class <Module>
{
}

namespace Microsoft
{
    namespace CodeAnalysis
    {
        class EmbeddedAttribute : System.Attribute
        {
            /*0x280b208*/ EmbeddedAttribute();
        }
    }
}

namespace System
{
    namespace Runtime
    {
        namespace CompilerServices
        {
            class IsReadOnlyAttribute : System.Attribute
            {
                /*0x280b210*/ IsReadOnlyAttribute();
            }

            class IsUnmanagedAttribute : System.Attribute
            {
                /*0x280b218*/ IsUnmanagedAttribute();
            }
        }
    }
}

namespace AOT
{
    class MonoPInvokeCallbackAttribute : System.Attribute
    {
        /*0x280b220*/ MonoPInvokeCallbackAttribute(System.Type type);
    }
}

namespace UnityEditor
{
    namespace Experimental
    {
        class RenderSettings
        {
            static /*0x0*/ bool <useRadianceAmbientProbe>k__BackingField;

            static /*0x280b228*/ bool get_useRadianceAmbientProbe();
            static /*0x280b270*/ void set_useRadianceAmbientProbe(bool value);
            /*0x280b2bc*/ RenderSettings();
        }
    }
}

namespace UnityEngineInternal
{
    enum TypeInferenceRules
    {
        TypeReferencedByFirstArgument = 0,
        TypeReferencedBySecondArgument = 1,
        ArrayOfTypeReferencedByFirstArgument = 2,
        TypeOfFirstArgument = 3,
    }

    class TypeInferenceRuleAttribute : System.Attribute
    {
        /*0x10*/ string _rule;

        /*0x280b2c4*/ TypeInferenceRuleAttribute(UnityEngineInternal.TypeInferenceRules rule);
        /*0x280b348*/ TypeInferenceRuleAttribute(string rule);
        /*0x280b370*/ string ToString();
    }

    class APIUpdaterRuntimeServices
    {
        static /*0x280b378*/ UnityEngine.Component AddComponent(UnityEngine.GameObject go, string sourceInfo, string name);
        /*0x280b3b8*/ APIUpdaterRuntimeServices();
    }

    class GenericStack : System.Collections.Stack
    {
        /*0x280b3c0*/ GenericStack();
    }

    struct GraphicsDeviceDebugSettings
    {
        /*0x10*/ float sleepAtStartOfGraphicsJobs;
        /*0x14*/ float sleepBeforeTextureUpload;
    }

    class GraphicsDeviceDebug
    {
        static /*0x280b3c8*/ UnityEngineInternal.GraphicsDeviceDebugSettings get_settings();
        static /*0x280b448*/ void set_settings(UnityEngineInternal.GraphicsDeviceDebugSettings value);
        static /*0x280b40c*/ void get_settings_Injected(ref UnityEngineInternal.GraphicsDeviceDebugSettings ret);
        static /*0x280b488*/ void set_settings_Injected(ref UnityEngineInternal.GraphicsDeviceDebugSettings value);
    }

    enum LightmapType
    {
        NoLightmap = -1,
        StaticLightmap = 0,
        DynamicLightmap = 1,
    }

    enum MemorylessMode
    {
        Unused = 0,
        Forced = 1,
        Automatic = 2,
    }

    class MemorylessManager
    {
        static /*0x280b4c4*/ UnityEngineInternal.MemorylessMode get_depthMemorylessMode();
        static /*0x280b514*/ void set_depthMemorylessMode(UnityEngineInternal.MemorylessMode value);
        static /*0x280b4ec*/ UnityEngineInternal.MemorylessMode GetFramebufferDepthMemorylessMode();
        static /*0x280b550*/ void SetFramebufferDepthMemorylessMode(UnityEngineInternal.MemorylessMode mode);
        /*0x280b58c*/ MemorylessManager();
    }

    enum GITextureType
    {
        Charting = 0,
        Albedo = 1,
        Emissive = 2,
        Irradiance = 3,
        Directionality = 4,
        Baked = 5,
        BakedDirectional = 6,
        InputWorkspace = 7,
        BakedShadowMask = 8,
        BakedAlbedo = 9,
        BakedEmissive = 10,
        BakedCharting = 11,
        BakedTexelValidity = 12,
        BakedUVOverlap = 13,
        BakedLightmapCulling = 14,
    }

    class GIDebugVisualisation
    {
        static /*0x280b594*/ void ResetRuntimeInputTextures();
        static /*0x280b5bc*/ void PlayCycleMode();
        static /*0x280b5e4*/ void PauseCycleMode();
        static /*0x280b60c*/ void StopCycleMode();
        static /*0x280b634*/ void CycleSkipSystems(int skip);
        static /*0x280b670*/ void CycleSkipInstances(int skip);
        static /*0x280b6ac*/ bool get_cycleMode();
        static /*0x280b6d4*/ bool get_pauseCycleMode();
        static /*0x280b6fc*/ UnityEngineInternal.GITextureType get_texType();
        static /*0x280b724*/ void set_texType(UnityEngineInternal.GITextureType value);
    }

    struct MathfInternal
    {
        static /*0x0*/ float FloatMinNormal;
        static /*0x4*/ float FloatMinDenormal;
        static /*0x8*/ bool IsFlushToZeroEnabled;

        static /*0x280b760*/ MathfInternal();
    }
}

namespace Unity
{
    namespace Baselib
    {
        class BaselibNativeLibrary
        {
        }

        struct ErrorState
        {
            /*0x10*/ Unity.Baselib.LowLevel.Binding.Baselib_ErrorState nativeErrorState;

            /*0x280b7f8*/ void ThrowIfFailed();
            /*0x280b860*/ Unity.Baselib.LowLevel.Binding.Baselib_ErrorCode get_ErrorCode();
            /*0x280b8f8*/ Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* get_NativeErrorStatePtr();
            /*0x280b8fc*/ string Explain(Unity.Baselib.LowLevel.Binding.Baselib_ErrorState_ExplainVerbosity verbosity);
        }

        class BaselibException : System.Exception
        {
            /*0x90*/ Unity.Baselib.ErrorState errorState;

            /*0x280b868*/ BaselibException(Unity.Baselib.ErrorState errorState);
            /*0x280bbd8*/ Unity.Baselib.LowLevel.Binding.Baselib_ErrorCode get_ErrorCode();
        }

        namespace LowLevel
        {
            class Binding
            {
                static uint Baselib_NetworkAddress_IpMaxStringLength = 46;
                static uint Baselib_RegisteredNetwork_Endpoint_MaxSize = 28;
                static uint Baselib_TLS_MinimumGuaranteedSlots = 100;
                static ulong Baselib_SecondsPerMinute = 60;
                static ulong Baselib_MillisecondsPerSecond = 1000;
                static ulong Baselib_MillisecondsPerMinute = 60000;
                static ulong Baselib_MicrosecondsPerMillisecond = 1000;
                static ulong Baselib_MicrosecondsPerSecond = 1000000;
                static ulong Baselib_MicrosecondsPerMinute = 60000000;
                static ulong Baselib_NanosecondsPerMicrosecond = 1000;
                static ulong Baselib_NanosecondsPerMillisecond = 1000000;
                static ulong Baselib_NanosecondsPerSecond = 1000000000;
                static ulong Baselib_NanosecondsPerMinute = 60000000000;
                static ulong Baselib_Timer_MaxNumberOfNanosecondsPerTick = 1000;
                static double Baselib_Timer_MinNumberOfNanosecondsPerTick = 0.01;
                static /*0x0*/ nuint Baselib_Memory_MaxAlignment;
                static /*0x8*/ nuint Baselib_Memory_MinGuaranteedAlignment;
                static /*0x10*/ nint Baselib_RegisteredNetwork_Buffer_Id_Invalid;
                static /*0x18*/ nint Baselib_Thread_InvalidId;
                static /*0x20*/ nuint Baselib_Thread_MaxThreadNameLength;
                static /*0x28*/ Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageAllocation Baselib_Memory_PageAllocation_Invalid;
                static /*0x40*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP Baselib_RegisteredNetwork_Socket_UDP_Invalid;
                static /*0x48*/ Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle Baselib_Socket_Handle_Invalid;
                static /*0x50*/ Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle Baselib_DynamicLibrary_Handle_Invalid;
                static /*0x58*/ Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue Baselib_FileIO_EventQueue_Invalid;
                static /*0x60*/ Unity.Baselib.LowLevel.Binding.Baselib_FileIO_AsyncFile Baselib_FileIO_AsyncFile_Invalid;
                static /*0x68*/ Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile Baselib_FileIO_SyncFile_Invalid;

                static /*0x280f0fc*/ Binding();
                static /*0x280bbe0*/ Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle Baselib_DynamicLibrary_OpenUtf8(byte* pathnameUtf8, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280bcc8*/ Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle Baselib_DynamicLibrary_OpenUtf16(char* pathnameUtf16, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280bdb0*/ Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle Baselib_DynamicLibrary_OpenProgramHandle(Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280be80*/ Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle Baselib_DynamicLibrary_FromNativeHandle(ulong handle, uint type, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280bf80*/ nint Baselib_DynamicLibrary_GetFunction(Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle handle, byte* functionName, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280c064*/ void Baselib_DynamicLibrary_Close(Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle handle);
                static /*0x280bb40*/ uint Baselib_ErrorState_Explain(Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, byte* buffer, uint bufferLen, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState_ExplainVerbosity verbosity);
                static /*0x280c118*/ Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue Baselib_FileIO_EventQueue_Create();
                static /*0x280c1d0*/ void Baselib_FileIO_EventQueue_Free(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue eq);
                static /*0x280c284*/ ulong Baselib_FileIO_EventQueue_Dequeue(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue eq, Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue_Result* results, ulong count, uint timeoutInMilliseconds);
                static /*0x280c380*/ void Baselib_FileIO_EventQueue_Shutdown(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue eq, uint threadCount);
                static /*0x280c44c*/ Unity.Baselib.LowLevel.Binding.Baselib_FileIO_AsyncFile Baselib_FileIO_AsyncOpen(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue eq, byte* pathname, ulong userdata, Unity.Baselib.LowLevel.Binding.Baselib_FileIO_Priority priority);
                static /*0x280c564*/ void Baselib_FileIO_AsyncRead(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_AsyncFile file, Unity.Baselib.LowLevel.Binding.Baselib_FileIO_ReadRequest* requests, ulong count, ulong userdata, Unity.Baselib.LowLevel.Binding.Baselib_FileIO_Priority priority);
                static /*0x280c678*/ void Baselib_FileIO_AsyncClose(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_AsyncFile file);
                static /*0x280c72c*/ Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile Baselib_FileIO_SyncOpen(byte* pathname, Unity.Baselib.LowLevel.Binding.Baselib_FileIO_OpenFlags openFlags, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280c82c*/ Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile Baselib_FileIO_SyncFileFromNativeHandle(ulong handle, uint type);
                static /*0x280c914*/ ulong Baselib_FileIO_SyncRead(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, ulong offset, nint buffer, ulong size, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280ca28*/ ulong Baselib_FileIO_SyncWrite(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, ulong offset, nint buffer, ulong size, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280cb3c*/ void Baselib_FileIO_SyncFlush(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280cc08*/ void Baselib_FileIO_SyncSetFileSize(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, ulong size, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280ccec*/ ulong Baselib_FileIO_SyncGetFileSize(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280cdb8*/ void Baselib_FileIO_SyncClose(Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280ce84*/ void Baselib_Memory_GetPageSizeInfo(Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageSizeInfo* outPagesSizeInfo);
                static /*0x280bb9c*/ nint Baselib_Memory_Allocate(nuint size);
                static /*0x280cec0*/ nint Baselib_Memory_Reallocate(nint ptr, nuint newSize);
                static /*0x280cf04*/ void Baselib_Memory_Free(nint ptr);
                static /*0x280cf40*/ nint Baselib_Memory_AlignedAllocate(nuint size, nuint alignment);
                static /*0x280cf84*/ nint Baselib_Memory_AlignedReallocate(nint ptr, nuint newSize, nuint alignment);
                static /*0x280cfd8*/ void Baselib_Memory_AlignedFree(nint ptr);
                static /*0x280d014*/ Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageAllocation Baselib_Memory_AllocatePages(ulong pageSize, ulong pageCount, ulong alignmentInMultipleOfPageSize, Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageState pageState, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280d15c*/ void Baselib_Memory_ReleasePages(Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageAllocation pageAllocation, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280d224*/ void Baselib_Memory_SetPageState(nint addressOfFirstPage, ulong pageSize, ulong pageCount, Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageState pageState, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280d290*/ void Baselib_NetworkAddress_Encode(Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* dstAddress, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress_Family family, byte* ip, ushort port, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280d2fc*/ void Baselib_NetworkAddress_Decode(Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* srcAddress, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress_Family* family, byte* ipAddressBuffer, uint ipAddressBufferLen, ushort* port, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280d370*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Buffer Baselib_RegisteredNetwork_Buffer_Register(Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageAllocation pageAllocation, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280d46c*/ void Baselib_RegisteredNetwork_Buffer_Deregister(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Buffer buffer);
                static /*0x280d51c*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_BufferSlice Baselib_RegisteredNetwork_BufferSlice_Create(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Buffer buffer, uint offset, uint size);
                static /*0x280d634*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_BufferSlice Baselib_RegisteredNetwork_BufferSlice_Empty();
                static /*0x280d708*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Endpoint Baselib_RegisteredNetwork_Endpoint_Create(Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* srcAddress, Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_BufferSlice dstSlice, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280d820*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Endpoint Baselib_RegisteredNetwork_Endpoint_Empty();
                static /*0x280d8f4*/ void Baselib_RegisteredNetwork_Endpoint_GetNetworkAddress(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Endpoint endpoint, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* dstAddress, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280d9d4*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP Baselib_RegisteredNetwork_Socket_UDP_Create(Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* bindAddress, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress_AddressReuse endpointReuse, uint sendQueueSize, uint recvQueueSize, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280db04*/ uint Baselib_RegisteredNetwork_Socket_UDP_ScheduleRecv(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Request* requests, uint requestsCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280dc00*/ uint Baselib_RegisteredNetwork_Socket_UDP_ScheduleSend(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Request* requests, uint requestsCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280dcfc*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_ProcessStatus Baselib_RegisteredNetwork_Socket_UDP_ProcessRecv(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280ddc8*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_ProcessStatus Baselib_RegisteredNetwork_Socket_UDP_ProcessSend(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280de94*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_CompletionQueueStatus Baselib_RegisteredNetwork_Socket_UDP_WaitForCompletedRecv(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, uint timeoutInMilliseconds, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280df78*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_CompletionQueueStatus Baselib_RegisteredNetwork_Socket_UDP_WaitForCompletedSend(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, uint timeoutInMilliseconds, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e05c*/ uint Baselib_RegisteredNetwork_Socket_UDP_DequeueRecv(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_CompletionResult* results, uint resultsCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e158*/ uint Baselib_RegisteredNetwork_Socket_UDP_DequeueSend(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_CompletionResult* results, uint resultsCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e254*/ void Baselib_RegisteredNetwork_Socket_UDP_GetNetworkAddress(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* dstAddress, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e338*/ void Baselib_RegisteredNetwork_Socket_UDP_Close(Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket);
                static /*0x280e3ec*/ Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle Baselib_Socket_Create(Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress_Family family, Unity.Baselib.LowLevel.Binding.Baselib_Socket_Protocol protocol, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e4ec*/ void Baselib_Socket_Bind(Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* address, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress_AddressReuse addressReuse, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e5e8*/ void Baselib_Socket_TCP_Connect(Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* address, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress_AddressReuse addressReuse, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e6e4*/ void Baselib_Socket_Poll(Unity.Baselib.LowLevel.Binding.Baselib_Socket_PollFd* sockets, uint socketsCount, uint timeoutInMilliseconds, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e740*/ void Baselib_Socket_GetAddress(Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* address, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e824*/ void Baselib_Socket_TCP_Listen(Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e8f0*/ Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle Baselib_Socket_TCP_Accept(Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e9d8*/ uint Baselib_Socket_UDP_Send(Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_Socket_Message* messages, uint messagesCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280ead4*/ uint Baselib_Socket_TCP_Send(Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, nint data, uint dataLen, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280ebd0*/ uint Baselib_Socket_UDP_Recv(Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_Socket_Message* messages, uint messagesCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280eccc*/ uint Baselib_Socket_TCP_Recv(Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, nint data, uint dataLen, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280edc8*/ void Baselib_Socket_Close(Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket);
                static /*0x280ee7c*/ void Baselib_Thread_YieldExecution();
                static /*0x280eea4*/ nint Baselib_Thread_GetCurrentThreadId();
                static /*0x280eecc*/ nuint Baselib_TLS_Alloc();
                static /*0x280eef4*/ void Baselib_TLS_Free(nuint handle);
                static /*0x280ef30*/ void Baselib_TLS_Set(nuint handle, nuint value);
                static /*0x280ef74*/ nuint Baselib_TLS_Get(nuint handle);
                static /*0x280efb0*/ Unity.Baselib.LowLevel.Binding.Baselib_Timer_TickToNanosecondConversionRatio Baselib_Timer_GetTicksToNanosecondsConversionRatio();
                static /*0x280f070*/ ulong Baselib_Timer_GetHighPrecisionTimerTicks();
                static /*0x280f098*/ void Baselib_Timer_WaitForAtLeast(uint timeInMilliseconds);
                static /*0x280f0d4*/ double Baselib_Timer_GetTimeSinceStartupInSeconds();
                static /*0x280bc74*/ void Baselib_DynamicLibrary_OpenUtf8_Injected(byte* pathnameUtf8, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, ref Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle ret);
                static /*0x280bd5c*/ void Baselib_DynamicLibrary_OpenUtf16_Injected(char* pathnameUtf16, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, ref Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle ret);
                static /*0x280be3c*/ void Baselib_DynamicLibrary_OpenProgramHandle_Injected(Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, ref Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle ret);
                static /*0x280bf24*/ void Baselib_DynamicLibrary_FromNativeHandle_Injected(ulong handle, uint type, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, ref Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle ret);
                static /*0x280c010*/ nint Baselib_DynamicLibrary_GetFunction_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle handle, byte* functionName, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280c0dc*/ void Baselib_DynamicLibrary_Close_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_DynamicLibrary_Handle handle);
                static /*0x280c194*/ void Baselib_FileIO_EventQueue_Create_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue ret);
                static /*0x280c248*/ void Baselib_FileIO_EventQueue_Free_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue eq);
                static /*0x280c324*/ ulong Baselib_FileIO_EventQueue_Dequeue_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue eq, Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue_Result* results, ulong count, uint timeoutInMilliseconds);
                static /*0x280c408*/ void Baselib_FileIO_EventQueue_Shutdown_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue eq, uint threadCount);
                static /*0x280c4f8*/ void Baselib_FileIO_AsyncOpen_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue eq, byte* pathname, ulong userdata, Unity.Baselib.LowLevel.Binding.Baselib_FileIO_Priority priority, ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_AsyncFile ret);
                static /*0x280c60c*/ void Baselib_FileIO_AsyncRead_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_AsyncFile file, Unity.Baselib.LowLevel.Binding.Baselib_FileIO_ReadRequest* requests, ulong count, ulong userdata, Unity.Baselib.LowLevel.Binding.Baselib_FileIO_Priority priority);
                static /*0x280c6f0*/ void Baselib_FileIO_AsyncClose_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_AsyncFile file);
                static /*0x280c7d0*/ void Baselib_FileIO_SyncOpen_Injected(byte* pathname, Unity.Baselib.LowLevel.Binding.Baselib_FileIO_OpenFlags openFlags, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile ret);
                static /*0x280c8c0*/ void Baselib_FileIO_SyncFileFromNativeHandle_Injected(ulong handle, uint type, ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile ret);
                static /*0x280c9bc*/ ulong Baselib_FileIO_SyncRead_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, ulong offset, nint buffer, ulong size, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280cad0*/ ulong Baselib_FileIO_SyncWrite_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, ulong offset, nint buffer, ulong size, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280cbc4*/ void Baselib_FileIO_SyncFlush_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280cc98*/ void Baselib_FileIO_SyncSetFileSize_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, ulong size, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280cd74*/ ulong Baselib_FileIO_SyncGetFileSize_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280ce40*/ void Baselib_FileIO_SyncClose_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_FileIO_SyncFile file, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280d0e8*/ void Baselib_Memory_AllocatePages_Injected(ulong pageSize, ulong pageCount, ulong alignmentInMultipleOfPageSize, Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageState pageState, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, ref Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageAllocation ret);
                static /*0x280d1e0*/ void Baselib_Memory_ReleasePages_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageAllocation pageAllocation, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280d418*/ void Baselib_RegisteredNetwork_Buffer_Register_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageAllocation pageAllocation, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Buffer ret);
                static /*0x280d4e0*/ void Baselib_RegisteredNetwork_Buffer_Deregister_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Buffer buffer);
                static /*0x280d5d8*/ void Baselib_RegisteredNetwork_BufferSlice_Create_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Buffer buffer, uint offset, uint size, ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_BufferSlice ret);
                static /*0x280d6cc*/ void Baselib_RegisteredNetwork_BufferSlice_Empty_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_BufferSlice ret);
                static /*0x280d7c4*/ void Baselib_RegisteredNetwork_Endpoint_Create_Injected(Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* srcAddress, ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_BufferSlice dstSlice, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Endpoint ret);
                static /*0x280d8b8*/ void Baselib_RegisteredNetwork_Endpoint_Empty_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Endpoint ret);
                static /*0x280d980*/ void Baselib_RegisteredNetwork_Endpoint_GetNetworkAddress_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Endpoint endpoint, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* dstAddress, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280da90*/ void Baselib_RegisteredNetwork_Socket_UDP_Create_Injected(Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* bindAddress, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress_AddressReuse endpointReuse, uint sendQueueSize, uint recvQueueSize, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP ret);
                static /*0x280dba4*/ uint Baselib_RegisteredNetwork_Socket_UDP_ScheduleRecv_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Request* requests, uint requestsCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280dca0*/ uint Baselib_RegisteredNetwork_Socket_UDP_ScheduleSend_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Request* requests, uint requestsCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280dd84*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_ProcessStatus Baselib_RegisteredNetwork_Socket_UDP_ProcessRecv_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280de50*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_ProcessStatus Baselib_RegisteredNetwork_Socket_UDP_ProcessSend_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280df24*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_CompletionQueueStatus Baselib_RegisteredNetwork_Socket_UDP_WaitForCompletedRecv_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, uint timeoutInMilliseconds, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e008*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_CompletionQueueStatus Baselib_RegisteredNetwork_Socket_UDP_WaitForCompletedSend_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, uint timeoutInMilliseconds, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e0fc*/ uint Baselib_RegisteredNetwork_Socket_UDP_DequeueRecv_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_CompletionResult* results, uint resultsCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e1f8*/ uint Baselib_RegisteredNetwork_Socket_UDP_DequeueSend_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_CompletionResult* results, uint resultsCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e2e4*/ void Baselib_RegisteredNetwork_Socket_UDP_GetNetworkAddress_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* dstAddress, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e3b0*/ void Baselib_RegisteredNetwork_Socket_UDP_Close_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Socket_UDP socket);
                static /*0x280e490*/ void Baselib_Socket_Create_Injected(Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress_Family family, Unity.Baselib.LowLevel.Binding.Baselib_Socket_Protocol protocol, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle ret);
                static /*0x280e58c*/ void Baselib_Socket_Bind_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* address, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress_AddressReuse addressReuse, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e688*/ void Baselib_Socket_TCP_Connect_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* address, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress_AddressReuse addressReuse, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e7d0*/ void Baselib_Socket_GetAddress_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* address, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e8ac*/ void Baselib_Socket_TCP_Listen_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280e984*/ void Baselib_Socket_TCP_Accept_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState, ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle ret);
                static /*0x280ea78*/ uint Baselib_Socket_UDP_Send_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_Socket_Message* messages, uint messagesCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280eb74*/ uint Baselib_Socket_TCP_Send_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, nint data, uint dataLen, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280ec70*/ uint Baselib_Socket_UDP_Recv_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, Unity.Baselib.LowLevel.Binding.Baselib_Socket_Message* messages, uint messagesCount, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280ed6c*/ uint Baselib_Socket_TCP_Recv_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket, nint data, uint dataLen, Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState);
                static /*0x280ee40*/ void Baselib_Socket_Close_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle socket);
                static /*0x280f034*/ void Baselib_Timer_GetTicksToNanosecondsConversionRatio_Injected(ref Unity.Baselib.LowLevel.Binding.Baselib_Timer_TickToNanosecondConversionRatio ret);

                struct Baselib_DynamicLibrary_Handle
                {
                    /*0x10*/ nint handle;
                }

                enum Baselib_ErrorCode
                {
                    Success = 0,
                    OutOfMemory = 16777216,
                    OutOfSystemResources = 16777217,
                    InvalidAddressRange = 16777218,
                    InvalidArgument = 16777219,
                    InvalidBufferSize = 16777220,
                    InvalidState = 16777221,
                    NotSupported = 16777222,
                    Timeout = 16777223,
                    UnsupportedAlignment = 33554432,
                    InvalidPageSize = 33554433,
                    InvalidPageCount = 33554434,
                    UnsupportedPageState = 33554435,
                    ThreadCannotJoinSelf = 50331648,
                    NetworkInitializationError = 67108864,
                    AddressInUse = 67108865,
                    AddressUnreachable = 67108866,
                    AddressFamilyNotSupported = 67108867,
                    Disconnected = 67108868,
                    InvalidPathname = 83886080,
                    RequestedAccessIsNotAllowed = 83886081,
                    IOError = 83886082,
                    FailedToOpenDynamicLibrary = 100663296,
                    FunctionNotFound = 100663297,
                    UnexpectedError = -1,
                }

                enum Baselib_ErrorState_NativeErrorCodeType
                {
                    None = 0,
                    PlatformDefined = 1,
                }

                enum Baselib_ErrorState_ExtraInformationType
                {
                    None = 0,
                    StaticString = 1,
                    GenerationCounter = 2,
                }

                struct Baselib_ErrorState
                {
                    /*0x10*/ Unity.Baselib.LowLevel.Binding.Baselib_SourceLocation sourceLocation;
                    /*0x28*/ ulong nativeErrorCode;
                    /*0x30*/ ulong extraInformation;
                    /*0x38*/ Unity.Baselib.LowLevel.Binding.Baselib_ErrorCode code;
                    /*0x3c*/ Unity.Baselib.LowLevel.Binding.Baselib_ErrorState_NativeErrorCodeType nativeErrorCodeType;
                    /*0x3d*/ Unity.Baselib.LowLevel.Binding.Baselib_ErrorState_ExtraInformationType extraInformationType;
                }

                enum Baselib_ErrorState_ExplainVerbosity
                {
                    ErrorType = 0,
                    ErrorType_SourceLocation_Explanation = 1,
                }

                struct Baselib_FileIO_EventQueue
                {
                    /*0x10*/ nint handle;
                }

                struct Baselib_FileIO_AsyncFile
                {
                    /*0x10*/ nint handle;
                }

                struct Baselib_FileIO_SyncFile
                {
                    /*0x10*/ nint handle;
                }

                enum Baselib_FileIO_OpenFlags
                {
                    Read = 1,
                    Write = 2,
                    OpenAlways = 4,
                    CreateAlways = 8,
                }

                struct Baselib_FileIO_ReadRequest
                {
                    /*0x10*/ ulong offset;
                    /*0x18*/ nint buffer;
                    /*0x20*/ ulong size;
                }

                enum Baselib_FileIO_Priority
                {
                    Normal = 0,
                    High = 1,
                }

                enum Baselib_FileIO_EventQueue_ResultType
                {
                    Baselib_FileIO_EventQueue_Callback = 1,
                    Baselib_FileIO_EventQueue_OpenFile = 2,
                    Baselib_FileIO_EventQueue_ReadFile = 3,
                    Baselib_FileIO_EventQueue_CloseFile = 4,
                }

                struct Baselib_FileIO_EventQueue_Result_Callback
                {
                    /*0x10*/ nint callback;
                }

                struct Baselib_FileIO_EventQueue_Result_OpenFile
                {
                    /*0x10*/ ulong fileSize;
                }

                struct Baselib_FileIO_EventQueue_Result_ReadFile
                {
                    /*0x10*/ ulong bytesTransferred;
                }

                struct Baselib_FileIO_EventQueue_Result
                {
                    /*0x10*/ Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue_ResultType type;
                    /*0x18*/ ulong userdata;
                    /*0x20*/ Unity.Baselib.LowLevel.Binding.Baselib_ErrorState errorState;
                    /*0x50*/ Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue_Result_Callback callback;
                    /*0x50*/ Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue_Result_OpenFile openFile;
                    /*0x50*/ Unity.Baselib.LowLevel.Binding.Baselib_FileIO_EventQueue_Result_ReadFile readFile;
                }

                struct Baselib_Memory_PageSizeInfo
                {
                    /*0x10*/ ulong defaultPageSize;
                    /*0x18*/ ulong pageSizes0;
                    /*0x20*/ ulong pageSizes1;
                    /*0x28*/ ulong pageSizes2;
                    /*0x30*/ ulong pageSizes3;
                    /*0x38*/ ulong pageSizes4;
                    /*0x40*/ ulong pageSizes5;
                    /*0x48*/ ulong pageSizesLen;
                }

                struct Baselib_Memory_PageAllocation
                {
                    /*0x10*/ nint ptr;
                    /*0x18*/ ulong pageSize;
                    /*0x20*/ ulong pageCount;
                }

                enum Baselib_Memory_PageState
                {
                    Reserved = 0,
                    NoAccess = 1,
                    ReadOnly = 2,
                    ReadWrite = 4,
                    ReadOnly_Executable = 18,
                    ReadWrite_Executable = 20,
                }

                enum Baselib_NetworkAddress_Family
                {
                    Invalid = 0,
                    IPv4 = 1,
                    IPv6 = 2,
                }

                struct Baselib_NetworkAddress
                {
                    /*0x10*/ byte data0;
                    /*0x11*/ byte data1;
                    /*0x12*/ byte data2;
                    /*0x13*/ byte data3;
                    /*0x14*/ byte data4;
                    /*0x15*/ byte data5;
                    /*0x16*/ byte data6;
                    /*0x17*/ byte data7;
                    /*0x18*/ byte data8;
                    /*0x19*/ byte data9;
                    /*0x1a*/ byte data10;
                    /*0x1b*/ byte data11;
                    /*0x1c*/ byte data12;
                    /*0x1d*/ byte data13;
                    /*0x1e*/ byte data14;
                    /*0x1f*/ byte data15;
                    /*0x10*/ byte ipv6_0;
                    /*0x11*/ byte ipv6_1;
                    /*0x12*/ byte ipv6_2;
                    /*0x13*/ byte ipv6_3;
                    /*0x14*/ byte ipv6_4;
                    /*0x15*/ byte ipv6_5;
                    /*0x16*/ byte ipv6_6;
                    /*0x17*/ byte ipv6_7;
                    /*0x18*/ byte ipv6_8;
                    /*0x19*/ byte ipv6_9;
                    /*0x1a*/ byte ipv6_10;
                    /*0x1b*/ byte ipv6_11;
                    /*0x1c*/ byte ipv6_12;
                    /*0x1d*/ byte ipv6_13;
                    /*0x1e*/ byte ipv6_14;
                    /*0x1f*/ byte ipv6_15;
                    /*0x10*/ byte ipv4_0;
                    /*0x11*/ byte ipv4_1;
                    /*0x12*/ byte ipv4_2;
                    /*0x13*/ byte ipv4_3;
                    /*0x20*/ byte port0;
                    /*0x21*/ byte port1;
                    /*0x22*/ byte family;
                    /*0x23*/ byte _padding;
                    /*0x24*/ uint ipv6_scope_id;
                }

                enum Baselib_NetworkAddress_AddressReuse
                {
                    DoNotAllow = 0,
                    Allow = 1,
                }

                struct Baselib_RegisteredNetwork_Buffer
                {
                    /*0x10*/ nint id;
                    /*0x18*/ Unity.Baselib.LowLevel.Binding.Baselib_Memory_PageAllocation allocation;
                }

                struct Baselib_RegisteredNetwork_BufferSlice
                {
                    /*0x10*/ nint id;
                    /*0x18*/ nint data;
                    /*0x20*/ uint size;
                    /*0x24*/ uint offset;
                }

                struct Baselib_RegisteredNetwork_Endpoint
                {
                    /*0x10*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_BufferSlice slice;
                }

                struct Baselib_RegisteredNetwork_Request
                {
                    /*0x10*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_BufferSlice payload;
                    /*0x28*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_Endpoint remoteEndpoint;
                    /*0x40*/ nint requestUserdata;
                }

                enum Baselib_RegisteredNetwork_CompletionStatus
                {
                    Failed = 0,
                    Success = 1,
                }

                struct Baselib_RegisteredNetwork_CompletionResult
                {
                    /*0x10*/ Unity.Baselib.LowLevel.Binding.Baselib_RegisteredNetwork_CompletionStatus status;
                    /*0x14*/ uint bytesTransferred;
                    /*0x18*/ nint requestUserdata;
                }

                struct Baselib_RegisteredNetwork_Socket_UDP
                {
                    /*0x10*/ nint handle;
                }

                enum Baselib_RegisteredNetwork_ProcessStatus
                {
                    NonePendingImmediately = 0,
                    Done = 0,
                    Pending = 1,
                }

                enum Baselib_RegisteredNetwork_CompletionQueueStatus
                {
                    NoResultsAvailable = 0,
                    ResultsAvailable = 1,
                }

                struct Baselib_Socket_Handle
                {
                    /*0x10*/ nint handle;
                }

                enum Baselib_Socket_Protocol
                {
                    UDP = 1,
                    TCP = 2,
                }

                struct Baselib_Socket_Message
                {
                    /*0x10*/ Unity.Baselib.LowLevel.Binding.Baselib_NetworkAddress* address;
                    /*0x18*/ nint data;
                    /*0x20*/ uint dataLen;
                }

                enum Baselib_Socket_PollEvents
                {
                    Readable = 1,
                    Writable = 2,
                    Connected = 4,
                }

                struct Baselib_Socket_PollFd
                {
                    /*0x10*/ Unity.Baselib.LowLevel.Binding.Baselib_Socket_Handle handle;
                    /*0x18*/ Unity.Baselib.LowLevel.Binding.Baselib_Socket_PollEvents requestedEvents;
                    /*0x1c*/ Unity.Baselib.LowLevel.Binding.Baselib_Socket_PollEvents resultEvents;
                    /*0x20*/ Unity.Baselib.LowLevel.Binding.Baselib_ErrorState* errorState;
                }

                struct Baselib_SourceLocation
                {
                    /*0x10*/ byte* file;
                    /*0x18*/ byte* function;
                    /*0x20*/ uint lineNumber;
                }

                struct Baselib_Timer_TickToNanosecondConversionRatio
                {
                    /*0x10*/ ulong ticksToNanosecondsNumerator;
                    /*0x18*/ ulong ticksToNanosecondsDenominator;
                }
            }
        }
    }

    namespace Profiling
    {
        enum ProfilerRecorderOptions
        {
            None = 0,
            StartImmediately = 1,
            KeepAliveDuringDomainReload = 2,
            CollectOnlyOnCurrentThread = 4,
            WrapAroundWhenCapacityReached = 8,
            SumAllSamplesInFrame = 16,
            GpuRecorder = 64,
            Default = 24,
        }

        struct ProfilerRecorderSample
        {
            /*0x10*/ long value;
            /*0x18*/ long count;
            /*0x20*/ long refValue;

            /*0x280f254*/ long get_Value();
            /*0x280f25c*/ long get_Count();
        }

        struct ProfilerRecorder : System.IDisposable
        {
            static Unity.Profiling.ProfilerRecorderOptions SharedRecorder = 128;
            /*0x10*/ ulong handle;

            static /*0x280f54c*/ Unity.Profiling.ProfilerRecorder StartNew(Unity.Profiling.ProfilerCategory category, string statName, int capacity, Unity.Profiling.ProfilerRecorderOptions options);
            static /*0x280f5a4*/ Unity.Profiling.ProfilerRecorder StartNew(Unity.Profiling.ProfilerMarker marker, int capacity, Unity.Profiling.ProfilerRecorderOptions options);
            static /*0x280f5dc*/ Unity.Profiling.ProfilerRecorder StartNew();
            static /*0x280f288*/ Unity.Profiling.ProfilerRecorder Create(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle statHandle, int maxSampleCount, Unity.Profiling.ProfilerRecorderOptions options);
            static /*0x280f84c*/ void Control(Unity.Profiling.ProfilerRecorder handle, Unity.Profiling.ProfilerRecorder.ControlOptions options);
            static /*0x280f7bc*/ Unity.Profiling.ProfilerMarkerDataUnit GetValueUnitType(Unity.Profiling.ProfilerRecorder handle);
            static /*0x280f730*/ Unity.Profiling.LowLevel.ProfilerMarkerDataType GetValueDataType(Unity.Profiling.ProfilerRecorder handle);
            static /*0x280f980*/ long GetCurrentValue(Unity.Profiling.ProfilerRecorder handle);
            static /*0x280fa0c*/ double GetCurrentValueAsDouble(Unity.Profiling.ProfilerRecorder handle);
            static /*0x280fa98*/ long GetLastValue(Unity.Profiling.ProfilerRecorder handle);
            static /*0x280fb24*/ double GetLastValueAsDouble(Unity.Profiling.ProfilerRecorder handle);
            static /*0x280fbb4*/ int GetCount(Unity.Profiling.ProfilerRecorder handle, Unity.Profiling.ProfilerRecorder.CountOptions countOptions);
            static /*0x280f640*/ bool GetValid(Unity.Profiling.ProfilerRecorder handle);
            static /*0x280fd30*/ bool GetWrapped(Unity.Profiling.ProfilerRecorder handle);
            static /*0x280fc9c*/ bool GetRunning(Unity.Profiling.ProfilerRecorder handle);
            static /*0x280fdc8*/ Unity.Profiling.ProfilerRecorderSample GetSampleInternal(Unity.Profiling.ProfilerRecorder handle, int index);
            static /*0x280fee8*/ void CopyTo_List(Unity.Profiling.ProfilerRecorder handle, System.Collections.Generic.List<Unity.Profiling.ProfilerRecorderSample> outSamples, bool reset);
            static /*0x2810048*/ int CopyTo_Pointer(Unity.Profiling.ProfilerRecorder handle, Unity.Profiling.ProfilerRecorderSample* outSamples, int outSamplesSize, bool reset);
            static /*0x2810210*/ void Create_Injected(ref Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle statHandle, int maxSampleCount, Unity.Profiling.ProfilerRecorderOptions options, ref Unity.Profiling.ProfilerRecorder ret);
            static /*0x281026c*/ void Control_Injected(ref Unity.Profiling.ProfilerRecorder handle, Unity.Profiling.ProfilerRecorder.ControlOptions options);
            static /*0x28102b0*/ Unity.Profiling.ProfilerMarkerDataUnit GetValueUnitType_Injected(ref Unity.Profiling.ProfilerRecorder handle);
            static /*0x28102ec*/ Unity.Profiling.LowLevel.ProfilerMarkerDataType GetValueDataType_Injected(ref Unity.Profiling.ProfilerRecorder handle);
            static /*0x2810328*/ long GetCurrentValue_Injected(ref Unity.Profiling.ProfilerRecorder handle);
            static /*0x2810364*/ double GetCurrentValueAsDouble_Injected(ref Unity.Profiling.ProfilerRecorder handle);
            static /*0x28103a0*/ long GetLastValue_Injected(ref Unity.Profiling.ProfilerRecorder handle);
            static /*0x28103dc*/ double GetLastValueAsDouble_Injected(ref Unity.Profiling.ProfilerRecorder handle);
            static /*0x2810418*/ int GetCount_Injected(ref Unity.Profiling.ProfilerRecorder handle, Unity.Profiling.ProfilerRecorder.CountOptions countOptions);
            static /*0x281045c*/ bool GetValid_Injected(ref Unity.Profiling.ProfilerRecorder handle);
            static /*0x2810498*/ bool GetWrapped_Injected(ref Unity.Profiling.ProfilerRecorder handle);
            static /*0x28104d4*/ bool GetRunning_Injected(ref Unity.Profiling.ProfilerRecorder handle);
            static /*0x2810510*/ void GetSampleInternal_Injected(ref Unity.Profiling.ProfilerRecorder handle, int index, ref Unity.Profiling.ProfilerRecorderSample ret);
            static /*0x2810564*/ void CopyTo_List_Injected(ref Unity.Profiling.ProfilerRecorder handle, System.Collections.Generic.List<Unity.Profiling.ProfilerRecorderSample> outSamples, bool reset);
            static /*0x28105b8*/ int CopyTo_Pointer_Injected(ref Unity.Profiling.ProfilerRecorder handle, Unity.Profiling.ProfilerRecorderSample* outSamples, int outSamplesSize, bool reset);
            /*0x280f264*/ ProfilerRecorder(Unity.Profiling.ProfilerRecorderOptions options);
            /*0x280f2e8*/ ProfilerRecorder(string statName, int capacity, Unity.Profiling.ProfilerRecorderOptions options);
            /*0x280f364*/ ProfilerRecorder(string categoryName, string statName, int capacity, Unity.Profiling.ProfilerRecorderOptions options);
            /*0x280f328*/ ProfilerRecorder(Unity.Profiling.ProfilerCategory category, string statName, int capacity, Unity.Profiling.ProfilerRecorderOptions options);
            /*0x280f484*/ ProfilerRecorder(Unity.Profiling.ProfilerCategory category, char* statName, int statNameLen, int capacity, Unity.Profiling.ProfilerRecorderOptions options);
            /*0x280f4c4*/ ProfilerRecorder(Unity.Profiling.ProfilerMarker marker, int capacity, Unity.Profiling.ProfilerRecorderOptions options);
            /*0x280f528*/ ProfilerRecorder(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle statHandle, int capacity, Unity.Profiling.ProfilerRecorderOptions options);
            /*0x280f5ec*/ bool get_Valid();
            /*0x280f684*/ Unity.Profiling.LowLevel.ProfilerMarkerDataType get_DataType();
            /*0x280f770*/ Unity.Profiling.ProfilerMarkerDataUnit get_UnitType();
            /*0x280f7fc*/ void Start();
            /*0x280f894*/ void Stop();
            /*0x280f8e4*/ void Reset();
            /*0x280f934*/ long get_CurrentValue();
            /*0x280f9c0*/ double get_CurrentValueAsDouble();
            /*0x280fa4c*/ long get_LastValue();
            /*0x280fad8*/ double get_LastValueAsDouble();
            /*0x280fb64*/ int get_Capacity();
            /*0x280fbfc*/ int get_Count();
            /*0x280fc4c*/ bool get_IsRunning();
            /*0x280fce0*/ bool get_WrappedAround();
            /*0x280fd74*/ Unity.Profiling.ProfilerRecorderSample GetSample(int index);
            /*0x280fe34*/ void CopyTo(System.Collections.Generic.List<Unity.Profiling.ProfilerRecorderSample> outSamples, bool reset);
            /*0x280ff40*/ int CopyTo(Unity.Profiling.ProfilerRecorderSample* dest, int destSize, bool reset);
            /*0x28100a8*/ Unity.Profiling.ProfilerRecorderSample[] ToArray();
            /*0x2810170*/ void FilterToCurrentThread();
            /*0x28101c0*/ void CollectFromAllThreads();
            /*0x2810614*/ void Dispose();
            /*0x280ffac*/ void CheckInitializedWithParamsAndThrow(Unity.Profiling.ProfilerRecorderSample* dest);
            /*0x280f6d0*/ void CheckInitializedAndThrow();

            enum ControlOptions
            {
                Start = 0,
                Stop = 1,
                Reset = 2,
                Release = 4,
                SetFilterToCurrentThread = 5,
                SetToCollectFromAllThreads = 6,
            }

            enum CountOptions
            {
                Count = 0,
                MaxCount = 1,
            }
        }

        class ProfilerRecorderDebugView
        {
            /*0x10*/ Unity.Profiling.ProfilerRecorder m_Recorder;

            /*0x2810668*/ ProfilerRecorderDebugView(Unity.Profiling.ProfilerRecorder r);
            /*0x2810690*/ Unity.Profiling.ProfilerRecorderSample[] get_Items();
        }

        struct ProfilerMarker
        {
            /*0x10*/ nint m_Ptr;

            /*0x28106a0*/ ProfilerMarker(string name);
            /*0x2810750*/ ProfilerMarker(char* name, int nameLen);
            /*0x28107b4*/ ProfilerMarker(Unity.Profiling.ProfilerCategory category, string name);
            /*0x2810818*/ ProfilerMarker(Unity.Profiling.ProfilerCategory category, char* name, int nameLen);
            /*0x2810880*/ ProfilerMarker(Unity.Profiling.ProfilerCategory category, string name, Unity.Profiling.LowLevel.MarkerFlags flags);
            /*0x28108e4*/ ProfilerMarker(Unity.Profiling.ProfilerCategory category, char* name, int nameLen, Unity.Profiling.LowLevel.MarkerFlags flags);
            /*0x2810698*/ nint get_Handle();
            /*0x2810958*/ void Begin();
            /*0x28109d0*/ void Begin(UnityEngine.Object contextUnityObject);
            /*0x2810a58*/ void End();
            /*0x2810ad0*/ void GetName(ref string name);
            /*0x2810b54*/ Unity.Profiling.ProfilerMarker.AutoScope Auto();

            struct AutoScope : System.IDisposable
            {
                /*0x10*/ nint m_Ptr;

                /*0x2810bdc*/ AutoScope(nint markerPtr);
                /*0x2810c7c*/ void Dispose();
            }
        }

        enum ProfilerFlowEventType
        {
            Begin = 0,
            ParallelNext = 1,
            End = 2,
            Next = 3,
        }

        enum ProfilerMarkerDataUnit
        {
            Undefined = 0,
            TimeNanoseconds = 1,
            Bytes = 2,
            Count = 3,
            Percent = 4,
            FrequencyHz = 5,
        }

        enum ProfilerCounterOptions
        {
            None = 0,
            FlushOnEndOfFrame = 2,
            ResetToZeroOnFlush = 4,
        }

        struct ProfilerCategory
        {
            /*0x10*/ ushort m_CategoryId;

            static /*0x2811028*/ Unity.Profiling.ProfilerCategory get_Render();
            static /*0x2811030*/ Unity.Profiling.ProfilerCategory get_Scripts();
            static /*0x2811038*/ Unity.Profiling.ProfilerCategory get_Gui();
            static /*0x2811040*/ Unity.Profiling.ProfilerCategory get_Physics();
            static /*0x2811048*/ Unity.Profiling.ProfilerCategory get_Animation();
            static /*0x2811050*/ Unity.Profiling.ProfilerCategory get_Ai();
            static /*0x2811058*/ Unity.Profiling.ProfilerCategory get_Audio();
            static /*0x2811060*/ Unity.Profiling.ProfilerCategory get_Video();
            static /*0x2811068*/ Unity.Profiling.ProfilerCategory get_Particles();
            static /*0x2811070*/ Unity.Profiling.ProfilerCategory get_Lighting();
            static /*0x2811078*/ Unity.Profiling.ProfilerCategory get_Network();
            static /*0x2811080*/ Unity.Profiling.ProfilerCategory get_Loading();
            static /*0x2811088*/ Unity.Profiling.ProfilerCategory get_Vr();
            static /*0x2811090*/ Unity.Profiling.ProfilerCategory get_Input();
            static /*0x2811098*/ Unity.Profiling.ProfilerCategory get_Memory();
            static /*0x28110a0*/ Unity.Profiling.ProfilerCategory get_VirtualTexturing();
            static /*0x28110a8*/ Unity.Profiling.ProfilerCategory get_FileIO();
            static /*0x28110b0*/ Unity.Profiling.ProfilerCategory get_Internal();
            static /*0x280f320*/ Unity.Profiling.ProfilerCategory get_Any();
            static /*0x28110b8*/ Unity.Profiling.ProfilerCategory get_GPU();
            static /*0x2810814*/ ushort op_Implicit(Unity.Profiling.ProfilerCategory category);
            /*0x280f3e4*/ ProfilerCategory(string categoryName);
            /*0x2810d50*/ ProfilerCategory(string categoryName, Unity.Profiling.ProfilerCategoryColor color);
            /*0x2810da8*/ ProfilerCategory(ushort category);
            /*0x2810db0*/ string get_Name();
            /*0x2810fac*/ UnityEngine.Color32 get_Color();
            /*0x2811024*/ string ToString();
        }

        enum ProfilerCategoryFlags
        {
            None = 0,
            Builtin = 1,
        }

        enum ProfilerCategoryColor
        {
            Render = 0,
            Scripts = 1,
            BurstJobs = 2,
            Other = 3,
            Physics = 4,
            Animation = 5,
            Audio = 6,
            AudioJob = 7,
            AudioUpdateJob = 8,
            Lighting = 9,
            GC = 10,
            VSync = 11,
            Memory = 12,
            Internal = 13,
            UI = 14,
            Build = 15,
            Input = 16,
        }

        struct ProfilerMarkerWithStringData
        {
            static System.Runtime.CompilerServices.MethodImplOptions AggressiveInlining = 256;
            /*0x10*/ nint _marker;

            static /*0x28110c0*/ Unity.Profiling.ProfilerMarkerWithStringData Create(string name, string parameterName);
            /*0x28111bc*/ Unity.Profiling.ProfilerMarkerWithStringData.AutoScope Auto(bool enabled, System.Func<string> parameterValue);
            /*0x2811320*/ Unity.Profiling.ProfilerMarkerWithStringData.AutoScope Auto(string value);

            struct AutoScope : System.IDisposable
            {
                /*0x10*/ nint _marker;

                /*0x281147c*/ AutoScope(nint marker);
                /*0x2811484*/ void Dispose();
            }
        }

        namespace LowLevel
        {
            enum MarkerFlags
            {
                Default = 0,
                Script = 2,
                ScriptInvoke = 32,
                ScriptDeepProfiler = 64,
                AvailabilityEditor = 4,
                AvailabilityNonDevelopment = 8,
                Warning = 16,
                Counter = 128,
                SampleGPU = 256,
            }

            enum ProfilerMarkerDataType
            {
                Int32 = 2,
                UInt32 = 3,
                Int64 = 4,
                UInt64 = 5,
                Float = 6,
                Double = 7,
                String16 = 9,
                Blob8 = 11,
            }

            namespace Unsafe
            {
                struct ProfilerRecorderDescription
                {
                    /*0x10*/ Unity.Profiling.ProfilerCategory category;
                    /*0x12*/ Unity.Profiling.LowLevel.MarkerFlags flags;
                    /*0x14*/ Unity.Profiling.LowLevel.ProfilerMarkerDataType dataType;
                    /*0x15*/ Unity.Profiling.ProfilerMarkerDataUnit unitType;
                    /*0x18*/ int reserved0;
                    /*0x1c*/ int nameUtf8Len;
                    /*0x20*/ byte* nameUtf8;

                    /*0x2811514*/ Unity.Profiling.ProfilerCategory get_Category();
                    /*0x281151c*/ Unity.Profiling.LowLevel.MarkerFlags get_Flags();
                    /*0x2811524*/ Unity.Profiling.LowLevel.ProfilerMarkerDataType get_DataType();
                    /*0x281152c*/ Unity.Profiling.ProfilerMarkerDataUnit get_UnitType();
                    /*0x2811534*/ int get_NameUtf8Len();
                    /*0x281153c*/ byte* get_NameUtf8();
                    /*0x2811544*/ string get_Name();
                }

                struct ProfilerRecorderHandle
                {
                    static ulong k_InvalidHandle = 18446744073709551615;
                    /*0x10*/ ulong handle;

                    static /*0x280f50c*/ Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle Get(Unity.Profiling.ProfilerMarker marker);
                    static /*0x2811570*/ Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle Get(Unity.Profiling.ProfilerCategory category, string statName);
                    static /*0x2811604*/ Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription GetDescription(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle handle);
                    static /*0x2811754*/ void GetAvailable(System.Collections.Generic.List<Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle> outRecorderHandleList);
                    static /*0x280f430*/ Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle GetByName(Unity.Profiling.ProfilerCategory category, string name);
                    static /*0x28117e4*/ Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle GetByName__Unmanaged(Unity.Profiling.ProfilerCategory category, byte* name, int nameLen);
                    static /*0x28118a4*/ Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle GetByName(Unity.Profiling.ProfilerCategory category, char* name, int nameLen);
                    static /*0x28118ac*/ Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle GetByName_Unsafe(Unity.Profiling.ProfilerCategory category, char* name, int nameLen);
                    static /*0x28116d0*/ Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription GetDescriptionInternal(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle handle);
                    static /*0x2811790*/ void GetByName_Injected(ref Unity.Profiling.ProfilerCategory category, string name, ref Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle ret);
                    static /*0x2811848*/ void GetByName__Unmanaged_Injected(ref Unity.Profiling.ProfilerCategory category, byte* name, int nameLen, ref Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle ret);
                    static /*0x2811910*/ void GetByName_Unsafe_Injected(ref Unity.Profiling.ProfilerCategory category, char* name, int nameLen, ref Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle ret);
                    static /*0x281196c*/ void GetDescriptionInternal_Injected(ref Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle handle, ref Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription ret);
                    /*0x2811554*/ ProfilerRecorderHandle(ulong handle);
                    /*0x281155c*/ bool get_Valid();
                }

                struct ProfilerMarkerData
                {
                    /*0x10*/ byte Type;
                    /*0x11*/ byte reserved0;
                    /*0x12*/ ushort reserved1;
                    /*0x14*/ uint Size;
                    /*0x18*/ void* Ptr;
                }

                struct ProfilerCategoryDescription
                {
                    /*0x10*/ ushort Id;
                    /*0x12*/ ushort Flags;
                    /*0x14*/ UnityEngine.Color32 Color;
                    /*0x18*/ int reserved0;
                    /*0x1c*/ int NameUtf8Len;
                    /*0x20*/ byte* NameUtf8;

                    /*0x28119b0*/ string get_Name();
                }

                class ProfilerUnsafeUtility
                {
                    static ushort CategoryRender = 0;
                    static ushort CategoryScripts = 1;
                    static ushort CategoryGUI = 4;
                    static ushort CategoryPhysics = 5;
                    static ushort CategoryAnimation = 6;
                    static ushort CategoryAi = 7;
                    static ushort CategoryAudio = 8;
                    static ushort CategoryVideo = 11;
                    static ushort CategoryParticles = 12;
                    static ushort CategoryLighting = 13;
                    static ushort CategoryLightning = 13;
                    static ushort CategoryNetwork = 14;
                    static ushort CategoryLoading = 15;
                    static ushort CategoryOther = 16;
                    static ushort CategoryVr = 22;
                    static ushort CategoryAllocation = 23;
                    static ushort CategoryInternal = 24;
                    static ushort CategoryFileIO = 25;
                    static ushort CategoryInput = 30;
                    static ushort CategoryVirtualTexturing = 31;
                    static ushort CategoryGPU = 32;
                    static ushort CategoryAny = 65535;

                    static /*0x2810d0c*/ ushort CreateCategory(string name, Unity.Profiling.ProfilerCategoryColor colorIndex);
                    static /*0x28119c0*/ ushort CreateCategory__Unmanaged(byte* name, int nameLen, Unity.Profiling.ProfilerCategoryColor colorIndex);
                    static /*0x2811a14*/ ushort CreateCategory(char* name, int nameLen, Unity.Profiling.ProfilerCategoryColor colorIndex);
                    static /*0x2811a68*/ ushort CreateCategory_Unsafe(char* name, int nameLen, Unity.Profiling.ProfilerCategoryColor colorIndex);
                    static /*0x2811abc*/ ushort GetCategoryByName(char* name, int nameLen);
                    static /*0x2811b00*/ ushort GetCategoryByName_Unsafe(char* name, int nameLen);
                    static /*0x2810e30*/ Unity.Profiling.LowLevel.Unsafe.ProfilerCategoryDescription GetCategoryDescription(ushort categoryId);
                    static /*0x2811b88*/ UnityEngine.Color32 GetCategoryColor(Unity.Profiling.ProfilerCategoryColor colorIndex);
                    static /*0x28106f4*/ nint CreateMarker(string name, ushort categoryId, Unity.Profiling.LowLevel.MarkerFlags flags, int metadataCount);
                    static /*0x2811c18*/ nint CreateMarker__Unmanaged(byte* name, int nameLen, ushort categoryId, Unity.Profiling.LowLevel.MarkerFlags flags, int metadataCount);
                    static /*0x2811c84*/ nint CreateMarker(char* name, int nameLen, ushort categoryId, Unity.Profiling.LowLevel.MarkerFlags flags, int metadataCount);
                    static /*0x2811cf0*/ nint CreateMarker_Unsafe(char* name, int nameLen, ushort categoryId, Unity.Profiling.LowLevel.MarkerFlags flags, int metadataCount);
                    static /*0x2811d5c*/ nint GetMarker(string name);
                    static /*0x2811150*/ void SetMarkerMetadata(nint markerPtr, int index, string name, byte type, byte unit);
                    static /*0x2811d98*/ void SetMarkerMetadata__Unmanaged(nint markerPtr, int index, byte* name, int nameLen, byte type, byte unit);
                    static /*0x2811e0c*/ void SetMarkerMetadata(nint markerPtr, int index, char* name, int nameLen, byte type, byte unit);
                    static /*0x2811e80*/ void SetMarkerMetadata_Unsafe(nint markerPtr, int index, char* name, int nameLen, byte type, byte unit);
                    static /*0x2810994*/ void BeginSample(nint markerPtr);
                    static /*0x2811428*/ void BeginSampleWithMetadata(nint markerPtr, int metadataCount, void* metadata);
                    static /*0x2810a94*/ void EndSample(nint markerPtr);
                    static /*0x2811ef4*/ void SingleSampleWithMetadata(nint markerPtr, int metadataCount, void* metadata);
                    static /*0x2811f48*/ void* CreateCounterValue(ref nint counterPtr, string name, ushort categoryId, Unity.Profiling.LowLevel.MarkerFlags flags, byte dataType, byte dataUnit, int dataSize, Unity.Profiling.ProfilerCounterOptions counterOptions);
                    static /*0x2811fd4*/ void* CreateCounterValue__Unmanaged(ref nint counterPtr, byte* name, int nameLen, ushort categoryId, Unity.Profiling.LowLevel.MarkerFlags flags, byte dataType, byte dataUnit, int dataSize, Unity.Profiling.ProfilerCounterOptions counterOptions);
                    static /*0x2812070*/ void* CreateCounterValue(ref nint counterPtr, char* name, int nameLen, ushort categoryId, Unity.Profiling.LowLevel.MarkerFlags flags, byte dataType, byte dataUnit, int dataSize, Unity.Profiling.ProfilerCounterOptions counterOptions);
                    static /*0x281210c*/ void* CreateCounterValue_Unsafe(ref nint counterPtr, char* name, int nameLen, ushort categoryId, Unity.Profiling.LowLevel.MarkerFlags flags, byte dataType, byte dataUnit, int dataSize, Unity.Profiling.ProfilerCounterOptions counterOptions);
                    static /*0x28121a8*/ void FlushCounterValue(void* counterValuePtr);
                    static /*0x2810ec0*/ string Utf8ToString(byte* chars, int charsLen);
                    static /*0x28121e4*/ uint CreateFlow(ushort categoryId);
                    static /*0x2812220*/ void FlowEvent(uint flowId, Unity.Profiling.ProfilerFlowEventType flowEventType);
                    static /*0x2810a14*/ void Internal_BeginWithObject(nint markerPtr, UnityEngine.Object contextUnityObject);
                    static /*0x2810b18*/ string Internal_GetName(nint markerPtr);
                    static /*0x2812264*/ long get_Timestamp();
                    static /*0x281228c*/ Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.TimestampConversionRatio get_TimestampToNanosecondsConversionRatio();
                    static /*0x2811b44*/ void GetCategoryDescription_Injected(ushort categoryId, ref Unity.Profiling.LowLevel.Unsafe.ProfilerCategoryDescription ret);
                    static /*0x2811bd4*/ void GetCategoryColor_Injected(Unity.Profiling.ProfilerCategoryColor colorIndex, ref UnityEngine.Color32 ret);
                    static /*0x28122d0*/ void get_TimestampToNanosecondsConversionRatio_Injected(ref Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.TimestampConversionRatio ret);

                    struct TimestampConversionRatio
                    {
                        /*0x10*/ long Numerator;
                        /*0x18*/ long Denominator;
                    }
                }
            }
        }
    }

    namespace Jobs
    {
        interface IJobFor
        {
            void Execute(int index);
        }

        class IJobForExtensions
        {
            static Unity.Jobs.JobHandle Schedule<T>(T jobData, int arrayLength, Unity.Jobs.JobHandle dependency);
            static Unity.Jobs.JobHandle ScheduleParallel<T>(T jobData, int arrayLength, int innerloopBatchCount, Unity.Jobs.JobHandle dependency);
            static void Run<T>(T jobData, int arrayLength);

            struct ForJobStruct<T>
            {
                static /*0x0*/ nint jobReflectionData;

                static ForJobStruct();
                static void Execute(ref T jobData, nint additionalPtr, nint bufferRangePatchData, ref Unity.Jobs.LowLevel.Unsafe.JobRanges ranges, int jobIndex);

                class ExecuteJobFunction<T> : System.MulticastDelegate
                {
                    ExecuteJobFunction(object object, nint method);
                    void Invoke(ref T data, nint additionalPtr, nint bufferRangePatchData, ref Unity.Jobs.LowLevel.Unsafe.JobRanges ranges, int jobIndex);
                }
            }
        }

        interface IJobParallelFor
        {
            void Execute(int index);
        }

        class IJobParallelForExtensions
        {
            static Unity.Jobs.JobHandle Schedule<T>(T jobData, int arrayLength, int innerloopBatchCount, Unity.Jobs.JobHandle dependsOn);
            static void Run<T>(T jobData, int arrayLength);

            struct ParallelForJobStruct<T>
            {
                static /*0x0*/ nint jobReflectionData;

                static ParallelForJobStruct();
                static void Execute(ref T jobData, nint additionalPtr, nint bufferRangePatchData, ref Unity.Jobs.LowLevel.Unsafe.JobRanges ranges, int jobIndex);

                class ExecuteJobFunction<T> : System.MulticastDelegate
                {
                    ExecuteJobFunction(object object, nint method);
                    void Invoke(ref T data, nint additionalPtr, nint bufferRangePatchData, ref Unity.Jobs.LowLevel.Unsafe.JobRanges ranges, int jobIndex);
                }
            }
        }

        interface IJob
        {
            void Execute();
        }

        class IJobExtensions
        {
            static Unity.Jobs.JobHandle Schedule<T>(T jobData, Unity.Jobs.JobHandle dependsOn);
            static void Run<T>(T jobData);

            struct JobStruct<T>
            {
                static /*0x0*/ nint jobReflectionData;

                static JobStruct();
                static void Execute(ref T data, nint additionalPtr, nint bufferRangePatchData, ref Unity.Jobs.LowLevel.Unsafe.JobRanges ranges, int jobIndex);

                class ExecuteJobFunction<T> : System.MulticastDelegate
                {
                    ExecuteJobFunction(object object, nint method);
                    void Invoke(ref T data, nint additionalPtr, nint bufferRangePatchData, ref Unity.Jobs.LowLevel.Unsafe.JobRanges ranges, int jobIndex);
                }
            }
        }

        struct JobHandle
        {
            /*0x10*/ nint jobGroup;
            /*0x18*/ int version;

            static /*0x28123d4*/ void CompleteAll(ref Unity.Jobs.JobHandle job0, ref Unity.Jobs.JobHandle job1);
            static /*0x28124e4*/ void CompleteAll(ref Unity.Jobs.JobHandle job0, ref Unity.Jobs.JobHandle job1, ref Unity.Jobs.JobHandle job2);
            static /*0x28125c4*/ void CompleteAll(Unity.Collections.NativeArray<Unity.Jobs.JobHandle> jobs);
            static /*0x28126c4*/ void ScheduleBatchedJobs();
            static /*0x2812398*/ void ScheduleBatchedJobsAndComplete(ref Unity.Jobs.JobHandle job);
            static /*0x2812688*/ bool ScheduleBatchedJobsAndIsCompleted(ref Unity.Jobs.JobHandle job);
            static /*0x28124a0*/ void ScheduleBatchedJobsAndCompleteAll(void* jobs, int count);
            static /*0x28126ec*/ Unity.Jobs.JobHandle CombineDependencies(Unity.Jobs.JobHandle job0, Unity.Jobs.JobHandle job1);
            static /*0x2812770*/ Unity.Jobs.JobHandle CombineDependencies(Unity.Jobs.JobHandle job0, Unity.Jobs.JobHandle job1, Unity.Jobs.JobHandle job2);
            static /*0x281280c*/ Unity.Jobs.JobHandle CombineDependencies(Unity.Collections.NativeArray<Unity.Jobs.JobHandle> jobs);
            static /*0x28128c8*/ Unity.Jobs.JobHandle CombineDependencies(Unity.Collections.NativeSlice<Unity.Jobs.JobHandle> jobs);
            static /*0x2812714*/ Unity.Jobs.JobHandle CombineDependenciesInternal2(ref Unity.Jobs.JobHandle job0, ref Unity.Jobs.JobHandle job1);
            static /*0x28127a0*/ Unity.Jobs.JobHandle CombineDependenciesInternal3(ref Unity.Jobs.JobHandle job0, ref Unity.Jobs.JobHandle job1, ref Unity.Jobs.JobHandle job2);
            static /*0x281286c*/ Unity.Jobs.JobHandle CombineDependenciesInternalPtr(void* jobs, int count);
            static /*0x2812a64*/ bool CheckFenceIsDependencyOrDidSyncFence(Unity.Jobs.JobHandle jobHandle, Unity.Jobs.JobHandle dependsOn);
            static /*0x2812960*/ void CombineDependenciesInternal2_Injected(ref Unity.Jobs.JobHandle job0, ref Unity.Jobs.JobHandle job1, ref Unity.Jobs.JobHandle ret);
            static /*0x28129b4*/ void CombineDependenciesInternal3_Injected(ref Unity.Jobs.JobHandle job0, ref Unity.Jobs.JobHandle job1, ref Unity.Jobs.JobHandle job2, ref Unity.Jobs.JobHandle ret);
            static /*0x2812a10*/ void CombineDependenciesInternalPtr_Injected(void* jobs, int count, ref Unity.Jobs.JobHandle ret);
            static /*0x2812ab0*/ bool CheckFenceIsDependencyOrDidSyncFence_Injected(ref Unity.Jobs.JobHandle jobHandle, ref Unity.Jobs.JobHandle dependsOn);
            /*0x281230c*/ void Complete();
            /*0x281264c*/ bool get_IsCompleted();
        }

        namespace LowLevel
        {
            namespace Unsafe
            {
                struct BatchQueryJob<CommandT, ResultT>
                {
                    /*0x0*/ Unity.Collections.NativeArray<CommandT> commands;
                    /*0x0*/ Unity.Collections.NativeArray<ResultT> results;

                    BatchQueryJob(Unity.Collections.NativeArray<CommandT> commands, Unity.Collections.NativeArray<ResultT> results);
                }

                struct BatchQueryJobStruct<T>
                {
                    static /*0x0*/ nint jobReflectionData;

                    static nint Initialize();
                }

                class JobHandleUnsafeUtility
                {
                    static /*0x2812af4*/ Unity.Jobs.JobHandle CombineDependencies(Unity.Jobs.JobHandle* jobs, int count);
                }

                class JobProducerTypeAttribute : System.Attribute
                {
                    /*0x10*/ System.Type <ProducerType>k__BackingField;

                    /*0x2812b00*/ JobProducerTypeAttribute(System.Type producerType);
                    /*0x2812af8*/ System.Type get_ProducerType();
                }

                struct JobRanges
                {
                    /*0x10*/ int BatchSize;
                    /*0x14*/ int NumJobs;
                    /*0x18*/ int TotalIterationCount;
                    /*0x1c*/ int NumPhases;
                    /*0x20*/ nint StartEndIndex;
                    /*0x28*/ nint PhaseData;
                }

                enum ScheduleMode
                {
                    Run = 0,
                    Batched = 1,
                    Parallel = 1,
                    Single = 2,
                }

                enum JobType
                {
                    Single = 0,
                    ParallelFor = 1,
                }

                class JobsUtility
                {
                    static int MaxJobThreadCount = 128;
                    static int CacheLineSize = 64;
                    static /*0x0*/ Unity.Jobs.LowLevel.Unsafe.JobsUtility.PanicFunction_ PanicFunction;

                    static /*0x2812b28*/ void GetJobRange(ref Unity.Jobs.LowLevel.Unsafe.JobRanges ranges, int jobIndex, ref int beginIndex, ref int endIndex);
                    static /*0x2812b70*/ bool GetWorkStealingRange(ref Unity.Jobs.LowLevel.Unsafe.JobRanges ranges, int jobIndex, ref int beginIndex, ref int endIndex);
                    static /*0x2812bcc*/ Unity.Jobs.JobHandle Schedule(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters parameters);
                    static /*0x2812c64*/ Unity.Jobs.JobHandle ScheduleParallelFor(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters parameters, int arrayLength, int innerloopBatchCount);
                    static /*0x2812d2c*/ Unity.Jobs.JobHandle ScheduleParallelForDeferArraySize(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters parameters, int innerloopBatchCount, void* listData, void* listDataAtomicSafetyHandle);
                    static /*0x2812e0c*/ Unity.Jobs.JobHandle ScheduleParallelForTransform(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters parameters, nint transfromAccesssArray);
                    static /*0x2812ebc*/ Unity.Jobs.JobHandle ScheduleParallelForTransformReadOnly(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters parameters, nint transfromAccesssArray, int innerloopBatchCount);
                    static /*0x2812f84*/ void PatchBufferMinMaxRanges(nint bufferRangePatchData, void* jobdata, int startIndex, int rangeSize);
                    static /*0x2812fe0*/ nint CreateJobReflectionData(System.Type wrapperJobType, System.Type userJobType, object managedJobFunction0, object managedJobFunction1, object managedJobFunction2);
                    static /*0x281304c*/ nint CreateJobReflectionData(System.Type type, Unity.Jobs.LowLevel.Unsafe.JobType jobType, object managedJobFunction0, object managedJobFunction1, object managedJobFunction2);
                    static /*0x28130ac*/ nint CreateJobReflectionData(System.Type type, object managedJobFunction0, object managedJobFunction1, object managedJobFunction2);
                    static /*0x281310c*/ nint CreateJobReflectionData(System.Type wrapperJobType, System.Type userJobType, Unity.Jobs.LowLevel.Unsafe.JobType jobType, object managedJobFunction0);
                    static /*0x2813168*/ nint CreateJobReflectionData(System.Type wrapperJobType, System.Type userJobType, object managedJobFunction0);
                    static /*0x28131c4*/ bool get_IsExecutingJob();
                    static /*0x28131ec*/ bool get_JobDebuggerEnabled();
                    static /*0x2813214*/ void set_JobDebuggerEnabled(bool value);
                    static /*0x2813250*/ bool get_JobCompilerEnabled();
                    static /*0x2813278*/ void set_JobCompilerEnabled(bool value);
                    static /*0x28132b4*/ int GetJobQueueWorkerThreadCount();
                    static /*0x28132dc*/ void SetJobQueueMaximumActiveThreadCount(int count);
                    static /*0x2813318*/ int get_JobWorkerMaximumCount();
                    static /*0x2813340*/ void ResetJobWorkerCount();
                    static /*0x2813368*/ int get_JobWorkerCount();
                    static /*0x2813390*/ void set_JobWorkerCount(int value);
                    static /*0x28134a8*/ nint GetSystemIdCellPtr();
                    static /*0x28134d0*/ void ClearSystemIds();
                    static /*0x28134f8*/ int GetSystemIdMappings(Unity.Jobs.JobHandle* handles, int* systemIds, int maxCount);
                    static /*0x281354c*/ void InvokePanicFunction();
                    static /*0x2812c20*/ void Schedule_Injected(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters parameters, ref Unity.Jobs.JobHandle ret);
                    static /*0x2812cd0*/ void ScheduleParallelFor_Injected(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters parameters, int arrayLength, int innerloopBatchCount, ref Unity.Jobs.JobHandle ret);
                    static /*0x2812da0*/ void ScheduleParallelForDeferArraySize_Injected(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters parameters, int innerloopBatchCount, void* listData, void* listDataAtomicSafetyHandle, ref Unity.Jobs.JobHandle ret);
                    static /*0x2812e68*/ void ScheduleParallelForTransform_Injected(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters parameters, nint transfromAccesssArray, ref Unity.Jobs.JobHandle ret);
                    static /*0x2812f28*/ void ScheduleParallelForTransformReadOnly_Injected(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters parameters, nint transfromAccesssArray, int innerloopBatchCount, ref Unity.Jobs.JobHandle ret);

                    struct JobScheduleParameters
                    {
                        /*0x10*/ Unity.Jobs.JobHandle Dependency;
                        /*0x20*/ int ScheduleMode;
                        /*0x28*/ nint ReflectionData;
                        /*0x30*/ nint JobDataPtr;

                        /*0x28135b0*/ JobScheduleParameters(void* i_jobData, nint i_reflectionData, Unity.Jobs.JobHandle i_dependency, Unity.Jobs.LowLevel.Unsafe.ScheduleMode i_scheduleMode);
                    }

                    class PanicFunction_ : System.MulticastDelegate
                    {
                        /*0x28135e8*/ PanicFunction_(object object, nint method);
                        /*0x28136a4*/ void Invoke();
                    }
                }
            }
        }
    }

    namespace Rendering
    {
        namespace HybridV2
        {
            struct DOTSInstancingCbuffer
            {
                /*0x10*/ int NameID;
                /*0x14*/ int CbufferIndex;
                /*0x18*/ int SizeBytes;
            }

            enum DOTSInstancingPropertyType
            {
                Unknown = 0,
                Float = 1,
                Half = 2,
                Int = 3,
                Short = 4,
                Uint = 5,
                Bool = 6,
                Struct = 7,
            }

            struct DOTSInstancingProperty
            {
                /*0x10*/ int MetadataNameID;
                /*0x14*/ int ConstantNameID;
                /*0x18*/ int CbufferIndex;
                /*0x1c*/ int MetadataOffset;
                /*0x20*/ int SizeBytes;
                /*0x24*/ Unity.Rendering.HybridV2.DOTSInstancingPropertyType ConstantType;
                /*0x28*/ int Cols;
                /*0x2c*/ int Rows;
            }

            class HybridV2ShaderReflection
            {
                static /*0x28136b8*/ nint GetDOTSInstancingCbuffersPointer(UnityEngine.Shader shader, ref int cbufferCount);
                static /*0x28136fc*/ nint GetDOTSInstancingPropertiesPointer(UnityEngine.Shader shader, ref int propertyCount);
                static /*0x2813740*/ uint GetDOTSReflectionVersionNumber();
                static /*0x2813768*/ Unity.Collections.NativeArray<Unity.Rendering.HybridV2.DOTSInstancingCbuffer> GetDOTSInstancingCbuffers(UnityEngine.Shader shader);
                static /*0x2813880*/ Unity.Collections.NativeArray<Unity.Rendering.HybridV2.DOTSInstancingProperty> GetDOTSInstancingProperties(UnityEngine.Shader shader);
                /*0x2813998*/ HybridV2ShaderReflection();
            }
        }
    }

    namespace IL2CPP
    {
        namespace CompilerServices
        {
            class Il2CppEagerStaticClassConstructionAttribute : System.Attribute
            {
                /*0x28139a0*/ Il2CppEagerStaticClassConstructionAttribute();
            }
        }
    }

    namespace Burst
    {
        class BurstDiscardAttribute : System.Attribute
        {
            /*0x28139a8*/ BurstDiscardAttribute();
        }

        class BurstAuthorizedExternalMethodAttribute : System.Attribute
        {
            /*0x28139b0*/ BurstAuthorizedExternalMethodAttribute();
        }

        namespace LowLevel
        {
            class BurstCompilerService
            {
                static /*0x28139b8*/ void Initialize(string folderRuntime, Unity.Burst.LowLevel.BurstCompilerService.ExtractCompilerFlags extractCompilerFlags);
                static /*0x2813c60*/ string InitializeInternal(string path, Unity.Burst.LowLevel.BurstCompilerService.ExtractCompilerFlags extractCompilerFlags);
                static /*0x2813ca4*/ string GetDisassembly(System.Reflection.MethodInfo m, string compilerOptions);
                static /*0x2813ce8*/ int CompileAsyncDelegateMethod(object delegateMethod, string compilerOptions);
                static /*0x2813d2c*/ void* GetAsyncCompiledAsyncDelegateMethod(int userID);
                static /*0x2813d68*/ void* GetOrCreateSharedMemory(ref UnityEngine.Hash128 key, uint size_of, uint alignment);
                static /*0x2813dbc*/ string GetMethodSignature(System.Reflection.MethodInfo method);
                static /*0x2813df8*/ bool get_IsInitialized();
                static /*0x2813e20*/ void SetCurrentExecutionMode(uint environment);
                static /*0x2813e5c*/ uint GetCurrentExecutionMode();
                static /*0x2813e84*/ void Log(void* userData, Unity.Burst.LowLevel.BurstCompilerService.BurstLogType logType, byte* message, byte* filename, int lineNumber);
                static /*0x2813ef0*/ bool LoadBurstLibrary(string fullPathToLibBurstGenerated);

                class ExtractCompilerFlags : System.MulticastDelegate
                {
                    /*0x2813f2c*/ ExtractCompilerFlags(object object, nint method);
                    /*0x281405c*/ bool Invoke(System.Type jobType, ref string flags);
                }

                enum BurstLogType
                {
                    Info = 0,
                    Warning = 1,
                    Error = 2,
                }
            }
        }
    }

    namespace IO
    {
        namespace LowLevel
        {
            namespace Unsafe
            {
                struct ReadCommand
                {
                    /*0x10*/ void* Buffer;
                    /*0x18*/ long Offset;
                    /*0x20*/ long Size;
                }

                struct ReadCommandArray
                {
                    /*0x10*/ Unity.IO.LowLevel.Unsafe.ReadCommand* ReadCommands;
                    /*0x18*/ int CommandCount;
                }

                enum FileState
                {
                    Absent = 0,
                    Exists = 1,
                }

                enum FileStatus
                {
                    Closed = 0,
                    Pending = 1,
                    Open = 2,
                    OpenFailed = 3,
                }

                struct FileInfoResult
                {
                    /*0x10*/ long FileSize;
                    /*0x18*/ Unity.IO.LowLevel.Unsafe.FileState FileState;
                }

                enum AssetLoadingSubsystem
                {
                    Other = 0,
                    Texture = 1,
                    VirtualTexture = 2,
                    Mesh = 3,
                    Audio = 4,
                    Scripts = 5,
                    EntitiesScene = 6,
                    EntitiesStreamBinaryReader = 7,
                    FileInfo = 8,
                }

                enum ReadStatus
                {
                    Complete = 0,
                    InProgress = 1,
                    Failed = 2,
                    Truncated = 4,
                    Canceled = 5,
                }

                enum Priority
                {
                    PriorityLow = 0,
                    PriorityHigh = 1,
                }

                struct FileHandle
                {
                    /*0x10*/ nint fileCommandPtr;
                    /*0x18*/ int version;

                    static /*0x2814124*/ bool IsFileHandleValid(ref Unity.IO.LowLevel.Unsafe.FileHandle handle);
                    static /*0x2814160*/ Unity.IO.LowLevel.Unsafe.FileStatus GetFileStatus_Internal(ref Unity.IO.LowLevel.Unsafe.FileHandle handle);
                    static /*0x2814230*/ Unity.Jobs.JobHandle GetJobHandle_Internal(ref Unity.IO.LowLevel.Unsafe.FileHandle handle);
                    static /*0x28143c8*/ void GetJobHandle_Internal_Injected(ref Unity.IO.LowLevel.Unsafe.FileHandle handle, ref Unity.Jobs.JobHandle ret);
                    /*0x2814070*/ Unity.IO.LowLevel.Unsafe.FileStatus get_Status();
                    /*0x281419c*/ Unity.Jobs.JobHandle get_JobHandle();
                    /*0x2814284*/ bool IsValid();
                    /*0x28142c0*/ Unity.Jobs.JobHandle Close(Unity.Jobs.JobHandle dependency);
                }

                struct ReadHandle : System.IDisposable
                {
                    /*0x10*/ nint ptr;
                    /*0x18*/ int version;

                    static /*0x2814620*/ void CancelInternal(Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814758*/ Unity.IO.LowLevel.Unsafe.ReadStatus GetReadStatus(Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814808*/ long GetReadCount(Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x28148b8*/ long GetBytesRead(Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x281497c*/ long GetBytesReadForCommand(Unity.IO.LowLevel.Unsafe.ReadHandle handle, uint readCommandIndex);
                    static /*0x2814a3c*/ ulong* GetBytesReadArray(Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814570*/ void ReleaseReadHandle(Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814418*/ bool IsReadHandleValid(Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x281470c*/ Unity.Jobs.JobHandle GetJobHandle(Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814660*/ void CancelInternal_Injected(ref Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814a7c*/ Unity.IO.LowLevel.Unsafe.ReadStatus GetReadStatus_Injected(ref Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814ab8*/ long GetReadCount_Injected(ref Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814af4*/ long GetBytesRead_Injected(ref Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814b30*/ long GetBytesReadForCommand_Injected(ref Unity.IO.LowLevel.Unsafe.ReadHandle handle, uint readCommandIndex);
                    static /*0x2814b74*/ ulong* GetBytesReadArray_Injected(ref Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814bb0*/ void ReleaseReadHandle_Injected(ref Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814bec*/ bool IsReadHandleValid_Injected(ref Unity.IO.LowLevel.Unsafe.ReadHandle handle);
                    static /*0x2814c28*/ void GetJobHandle_Injected(ref Unity.IO.LowLevel.Unsafe.ReadHandle handle, ref Unity.Jobs.JobHandle ret);
                    /*0x281440c*/ bool IsValid();
                    /*0x281445c*/ void Dispose();
                    /*0x28145b0*/ void Cancel();
                    /*0x281469c*/ Unity.Jobs.JobHandle get_JobHandle();
                    /*0x2814500*/ Unity.IO.LowLevel.Unsafe.ReadStatus get_Status();
                    /*0x2814798*/ long get_ReadCount();
                    /*0x2814848*/ long GetBytesRead();
                    /*0x28148f8*/ long GetBytesRead(uint readCommandIndex);
                    /*0x28149cc*/ ulong* GetBytesReadArray();
                }

                class AsyncReadManager
                {
                    static /*0x2814c6c*/ Unity.IO.LowLevel.Unsafe.ReadHandle ReadInternal(string filename, void* cmds, uint cmdCount, string assetName, ulong typeID, Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem subsystem);
                    static /*0x2814d7c*/ Unity.IO.LowLevel.Unsafe.ReadHandle Read(string filename, Unity.IO.LowLevel.Unsafe.ReadCommand* readCmds, uint readCmdCount, string assetName, ulong typeID, Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem subsystem);
                    static /*0x2814d80*/ Unity.IO.LowLevel.Unsafe.ReadHandle GetFileInfoInternal(string filename, void* cmd);
                    static /*0x2814e30*/ Unity.IO.LowLevel.Unsafe.ReadHandle GetFileInfo(string filename, Unity.IO.LowLevel.Unsafe.FileInfoResult* result);
                    static /*0x2814e88*/ Unity.IO.LowLevel.Unsafe.ReadHandle ReadWithHandlesInternal_NativePtr(ref Unity.IO.LowLevel.Unsafe.FileHandle fileHandle, void* readCmdArray, Unity.Jobs.JobHandle dependency);
                    static /*0x2814f48*/ Unity.IO.LowLevel.Unsafe.ReadHandle ReadWithHandlesInternal_NativeCopy(ref Unity.IO.LowLevel.Unsafe.FileHandle fileHandle, void* readCmdArray);
                    static /*0x2814ff8*/ Unity.IO.LowLevel.Unsafe.ReadHandle ReadDeferred(ref Unity.IO.LowLevel.Unsafe.FileHandle fileHandle, Unity.IO.LowLevel.Unsafe.ReadCommandArray* readCmdArray, Unity.Jobs.JobHandle dependency);
                    static /*0x28150ac*/ Unity.IO.LowLevel.Unsafe.ReadHandle Read(ref Unity.IO.LowLevel.Unsafe.FileHandle fileHandle, Unity.IO.LowLevel.Unsafe.ReadCommandArray readCmdArray);
                    static /*0x2815154*/ Unity.IO.LowLevel.Unsafe.FileHandle OpenFileAsync_Internal(string fileName);
                    static /*0x28151ec*/ Unity.IO.LowLevel.Unsafe.FileHandle OpenFileAsync(string fileName);
                    static /*0x281436c*/ Unity.Jobs.JobHandle CloseFileAsync(ref Unity.IO.LowLevel.Unsafe.FileHandle fileHandle, Unity.Jobs.JobHandle dependency);
                    static /*0x28152a8*/ Unity.Jobs.JobHandle CloseCachedFileAsync(string fileName, Unity.Jobs.JobHandle dependency);
                    static /*0x2814cf8*/ void ReadInternal_Injected(string filename, void* cmds, uint cmdCount, string assetName, ulong typeID, Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem subsystem, ref Unity.IO.LowLevel.Unsafe.ReadHandle ret);
                    static /*0x2814ddc*/ void GetFileInfoInternal_Injected(string filename, void* cmd, ref Unity.IO.LowLevel.Unsafe.ReadHandle ret);
                    static /*0x2814eec*/ void ReadWithHandlesInternal_NativePtr_Injected(ref Unity.IO.LowLevel.Unsafe.FileHandle fileHandle, void* readCmdArray, ref Unity.Jobs.JobHandle dependency, ref Unity.IO.LowLevel.Unsafe.ReadHandle ret);
                    static /*0x2814fa4*/ void ReadWithHandlesInternal_NativeCopy_Injected(ref Unity.IO.LowLevel.Unsafe.FileHandle fileHandle, void* readCmdArray, ref Unity.IO.LowLevel.Unsafe.ReadHandle ret);
                    static /*0x28151a8*/ void OpenFileAsync_Internal_Injected(string fileName, ref Unity.IO.LowLevel.Unsafe.FileHandle ret);
                    static /*0x2815254*/ void CloseFileAsync_Injected(ref Unity.IO.LowLevel.Unsafe.FileHandle fileHandle, ref Unity.Jobs.JobHandle dependency, ref Unity.Jobs.JobHandle ret);
                    static /*0x2815304*/ void CloseCachedFileAsync_Injected(string fileName, ref Unity.Jobs.JobHandle dependency, ref Unity.Jobs.JobHandle ret);
                }

                enum ProcessingState
                {
                    Unknown = 0,
                    InQueue = 1,
                    Reading = 2,
                    Completed = 3,
                    Failed = 4,
                    Canceled = 5,
                }

                enum FileReadType
                {
                    Sync = 0,
                    Async = 1,
                }

                struct AsyncReadManagerRequestMetric
                {
                    /*0x10*/ string <AssetName>k__BackingField;
                    /*0x18*/ string <FileName>k__BackingField;
                    /*0x20*/ ulong <OffsetBytes>k__BackingField;
                    /*0x28*/ ulong <SizeBytes>k__BackingField;
                    /*0x30*/ ulong <AssetTypeId>k__BackingField;
                    /*0x38*/ ulong <CurrentBytesRead>k__BackingField;
                    /*0x40*/ uint <BatchReadCount>k__BackingField;
                    /*0x44*/ bool <IsBatchRead>k__BackingField;
                    /*0x48*/ Unity.IO.LowLevel.Unsafe.ProcessingState <State>k__BackingField;
                    /*0x4c*/ Unity.IO.LowLevel.Unsafe.FileReadType <ReadType>k__BackingField;
                    /*0x50*/ Unity.IO.LowLevel.Unsafe.Priority <PriorityLevel>k__BackingField;
                    /*0x54*/ Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem <Subsystem>k__BackingField;
                    /*0x58*/ double <RequestTimeMicroseconds>k__BackingField;
                    /*0x60*/ double <TimeInQueueMicroseconds>k__BackingField;
                    /*0x68*/ double <TotalTimeMicroseconds>k__BackingField;

                    /*0x2815358*/ string get_AssetName();
                    /*0x2815360*/ string get_FileName();
                    /*0x2815368*/ ulong get_OffsetBytes();
                    /*0x2815370*/ ulong get_SizeBytes();
                    /*0x2815378*/ ulong get_AssetTypeId();
                    /*0x2815380*/ ulong get_CurrentBytesRead();
                    /*0x2815388*/ uint get_BatchReadCount();
                    /*0x2815390*/ bool get_IsBatchRead();
                    /*0x2815398*/ Unity.IO.LowLevel.Unsafe.ProcessingState get_State();
                    /*0x28153a0*/ Unity.IO.LowLevel.Unsafe.FileReadType get_ReadType();
                    /*0x28153a8*/ Unity.IO.LowLevel.Unsafe.Priority get_PriorityLevel();
                    /*0x28153b0*/ Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem get_Subsystem();
                    /*0x28153b8*/ double get_RequestTimeMicroseconds();
                    /*0x28153c0*/ double get_TimeInQueueMicroseconds();
                    /*0x28153c8*/ double get_TotalTimeMicroseconds();
                }

                class AsyncReadManagerMetrics
                {
                    static /*0x28153d0*/ bool IsEnabled();
                    static /*0x28153f8*/ void ClearMetrics_Internal();
                    static /*0x2815420*/ void ClearCompletedMetrics();
                    static /*0x2815448*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[] GetMetrics_Internal(bool clear);
                    static /*0x2815484*/ void GetMetrics_NoAlloc_Internal(System.Collections.Generic.List<Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric> metrics, bool clear);
                    static /*0x28154c8*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[] GetMetrics_Filtered_Internal(Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters filters, bool clear);
                    static /*0x281550c*/ void GetMetrics_NoAlloc_Filtered_Internal(System.Collections.Generic.List<Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric> metrics, Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters filters, bool clear);
                    static /*0x2815560*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[] GetMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters filters, Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.Flags flags);
                    static /*0x28155a4*/ void GetMetrics(System.Collections.Generic.List<Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric> outMetrics, Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters filters, Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.Flags flags);
                    static /*0x28155f8*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[] GetMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.Flags flags);
                    static /*0x2815634*/ void GetMetrics(System.Collections.Generic.List<Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric> outMetrics, Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.Flags flags);
                    static /*0x2815678*/ void StartCollectingMetrics();
                    static /*0x28156a0*/ void StopCollectingMetrics();
                    static /*0x28156c8*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetSummaryMetrics_Internal(bool clear);
                    static /*0x2815704*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetCurrentSummaryMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.Flags flags);
                    static /*0x2815740*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetSummaryMetricsWithFilters_Internal(Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters metricsFilters, bool clear);
                    static /*0x2815784*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetCurrentSummaryMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters metricsFilters, Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.Flags flags);
                    static /*0x28157c8*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetSummaryOfMetrics_Internal(Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[] metrics);
                    static /*0x2815804*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetSummaryOfMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[] metrics);
                    static /*0x2815840*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetSummaryOfMetrics_FromContainer_Internal(System.Collections.Generic.List<Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric> metrics);
                    static /*0x281587c*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetSummaryOfMetrics(System.Collections.Generic.List<Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric> metrics);
                    static /*0x28158b8*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetSummaryOfMetricsWithFilters_Internal(Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[] metrics, Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters metricsFilters);
                    static /*0x28158fc*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetSummaryOfMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[] metrics, Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters metricsFilters);
                    static /*0x2815940*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetSummaryOfMetricsWithFilters_FromContainer_Internal(System.Collections.Generic.List<Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric> metrics, Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters metricsFilters);
                    static /*0x2815984*/ Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics GetSummaryOfMetrics(System.Collections.Generic.List<Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric> metrics, Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters metricsFilters);
                    static /*0x28159c8*/ ulong GetTotalSizeOfNonASRMReadsBytes(bool emptyAfterRead);

                    enum Flags
                    {
                        None = 0,
                        ClearOnRead = 1,
                    }
                }

                class AsyncReadManagerSummaryMetrics
                {
                    /*0x10*/ ulong <TotalBytesRead>k__BackingField;
                    /*0x18*/ float <AverageBandwidthMBPerSecond>k__BackingField;
                    /*0x1c*/ float <AverageReadSizeInBytes>k__BackingField;
                    /*0x20*/ float <AverageWaitTimeMicroseconds>k__BackingField;
                    /*0x24*/ float <AverageReadTimeMicroseconds>k__BackingField;
                    /*0x28*/ float <AverageTotalRequestTimeMicroseconds>k__BackingField;
                    /*0x2c*/ float <AverageThroughputMBPerSecond>k__BackingField;
                    /*0x30*/ float <LongestWaitTimeMicroseconds>k__BackingField;
                    /*0x34*/ float <LongestReadTimeMicroseconds>k__BackingField;
                    /*0x38*/ ulong <LongestReadAssetType>k__BackingField;
                    /*0x40*/ ulong <LongestWaitAssetType>k__BackingField;
                    /*0x48*/ Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem <LongestReadSubsystem>k__BackingField;
                    /*0x4c*/ Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem <LongestWaitSubsystem>k__BackingField;
                    /*0x50*/ int <NumberOfInProgressRequests>k__BackingField;
                    /*0x54*/ int <NumberOfCompletedRequests>k__BackingField;
                    /*0x58*/ int <NumberOfFailedRequests>k__BackingField;
                    /*0x5c*/ int <NumberOfWaitingRequests>k__BackingField;
                    /*0x60*/ int <NumberOfCanceledRequests>k__BackingField;
                    /*0x64*/ int <TotalNumberOfRequests>k__BackingField;
                    /*0x68*/ int <NumberOfCachedReads>k__BackingField;
                    /*0x6c*/ int <NumberOfAsyncReads>k__BackingField;
                    /*0x70*/ int <NumberOfSyncReads>k__BackingField;

                    /*0x2815ab4*/ AsyncReadManagerSummaryMetrics();
                    /*0x2815a04*/ ulong get_TotalBytesRead();
                    /*0x2815a0c*/ float get_AverageBandwidthMBPerSecond();
                    /*0x2815a14*/ float get_AverageReadSizeInBytes();
                    /*0x2815a1c*/ float get_AverageWaitTimeMicroseconds();
                    /*0x2815a24*/ float get_AverageReadTimeMicroseconds();
                    /*0x2815a2c*/ float get_AverageTotalRequestTimeMicroseconds();
                    /*0x2815a34*/ float get_AverageThroughputMBPerSecond();
                    /*0x2815a3c*/ float get_LongestWaitTimeMicroseconds();
                    /*0x2815a44*/ float get_LongestReadTimeMicroseconds();
                    /*0x2815a4c*/ ulong get_LongestReadAssetType();
                    /*0x2815a54*/ ulong get_LongestWaitAssetType();
                    /*0x2815a5c*/ Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem get_LongestReadSubsystem();
                    /*0x2815a64*/ Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem get_LongestWaitSubsystem();
                    /*0x2815a6c*/ int get_NumberOfInProgressRequests();
                    /*0x2815a74*/ int get_NumberOfCompletedRequests();
                    /*0x2815a7c*/ int get_NumberOfFailedRequests();
                    /*0x2815a84*/ int get_NumberOfWaitingRequests();
                    /*0x2815a8c*/ int get_NumberOfCanceledRequests();
                    /*0x2815a94*/ int get_TotalNumberOfRequests();
                    /*0x2815a9c*/ int get_NumberOfCachedReads();
                    /*0x2815aa4*/ int get_NumberOfAsyncReads();
                    /*0x2815aac*/ int get_NumberOfSyncReads();
                }

                class AsyncReadManagerMetricsFilters
                {
                    /*0x10*/ ulong[] TypeIDs;
                    /*0x18*/ Unity.IO.LowLevel.Unsafe.ProcessingState[] States;
                    /*0x20*/ Unity.IO.LowLevel.Unsafe.FileReadType[] ReadTypes;
                    /*0x28*/ Unity.IO.LowLevel.Unsafe.Priority[] PriorityLevels;
                    /*0x30*/ Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem[] Subsystems;

                    /*0x2815abc*/ AsyncReadManagerMetricsFilters();
                    /*0x2815af0*/ AsyncReadManagerMetricsFilters(ulong typeID);
                    /*0x2815b9c*/ AsyncReadManagerMetricsFilters(Unity.IO.LowLevel.Unsafe.ProcessingState state);
                    /*0x2815c48*/ AsyncReadManagerMetricsFilters(Unity.IO.LowLevel.Unsafe.FileReadType readType);
                    /*0x2815cf4*/ AsyncReadManagerMetricsFilters(Unity.IO.LowLevel.Unsafe.Priority priorityLevel);
                    /*0x2815da0*/ AsyncReadManagerMetricsFilters(Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem subsystem);
                    /*0x2815e4c*/ AsyncReadManagerMetricsFilters(ulong[] typeIDs);
                    /*0x2815e88*/ AsyncReadManagerMetricsFilters(Unity.IO.LowLevel.Unsafe.ProcessingState[] states);
                    /*0x2815ec4*/ AsyncReadManagerMetricsFilters(Unity.IO.LowLevel.Unsafe.FileReadType[] readTypes);
                    /*0x2815f00*/ AsyncReadManagerMetricsFilters(Unity.IO.LowLevel.Unsafe.Priority[] priorityLevels);
                    /*0x2815f38*/ AsyncReadManagerMetricsFilters(Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem[] subsystems);
                    /*0x2815f70*/ AsyncReadManagerMetricsFilters(ulong[] typeIDs, Unity.IO.LowLevel.Unsafe.ProcessingState[] states, Unity.IO.LowLevel.Unsafe.FileReadType[] readTypes, Unity.IO.LowLevel.Unsafe.Priority[] priorityLevels, Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem[] subsystems);
                    /*0x2815e80*/ void SetTypeIDFilter(ulong[] _typeIDs);
                    /*0x2815ebc*/ void SetStateFilter(Unity.IO.LowLevel.Unsafe.ProcessingState[] _states);
                    /*0x2815ef8*/ void SetReadTypeFilter(Unity.IO.LowLevel.Unsafe.FileReadType[] _readTypes);
                    /*0x2815f30*/ void SetPriorityFilter(Unity.IO.LowLevel.Unsafe.Priority[] _priorityLevels);
                    /*0x2815f68*/ void SetSubsystemFilter(Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem[] _subsystems);
                    /*0x2815b28*/ void SetTypeIDFilter(ulong _typeID);
                    /*0x2815bd4*/ void SetStateFilter(Unity.IO.LowLevel.Unsafe.ProcessingState _state);
                    /*0x2815c80*/ void SetReadTypeFilter(Unity.IO.LowLevel.Unsafe.FileReadType _readType);
                    /*0x2815d2c*/ void SetPriorityFilter(Unity.IO.LowLevel.Unsafe.Priority _priorityLevel);
                    /*0x2815dd8*/ void SetSubsystemFilter(Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem _subsystem);
                    /*0x2815fc0*/ void RemoveTypeIDFilter();
                    /*0x2815fc8*/ void RemoveStateFilter();
                    /*0x2815fd0*/ void RemoveReadTypeFilter();
                    /*0x2815fd8*/ void RemovePriorityFilter();
                    /*0x2815fe0*/ void RemoveSubsystemFilter();
                    /*0x2815ae0*/ void ClearFilters();
                }

                class VirtualFileSystem
                {
                    static /*0x2815fe8*/ bool GetLocalFileSystemName(string vfsFileName, ref string localFileName, ref ulong localFileOffset, ref ulong localFileSize);
                }
            }
        }
    }

    namespace Collections
    {
        class NativeSliceExtensions
        {
            static Unity.Collections.NativeSlice<T> Slice<T>(Unity.Collections.NativeArray<T> thisArray);
            static Unity.Collections.NativeSlice<T> Slice<T>(Unity.Collections.NativeArray<T> thisArray, int start);
            static Unity.Collections.NativeSlice<T> Slice<T>(Unity.Collections.NativeArray<T> thisArray, int start, int length);
            static Unity.Collections.NativeSlice<T> Slice<T>(Unity.Collections.NativeSlice<T> thisSlice);
            static Unity.Collections.NativeSlice<T> Slice<T>(Unity.Collections.NativeSlice<T> thisSlice, int start);
            static Unity.Collections.NativeSlice<T> Slice<T>(Unity.Collections.NativeSlice<T> thisSlice, int start, int length);
        }

        struct NativeSlice<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.IEquatable<Unity.Collections.NativeSlice<T>>
        {
            /*0x0*/ byte* m_Buffer;
            /*0x0*/ int m_Stride;
            /*0x0*/ int m_Length;

            static Unity.Collections.NativeSlice<T> op_Implicit(Unity.Collections.NativeArray<T> array);
            static bool op_Equality(Unity.Collections.NativeSlice<T> left, Unity.Collections.NativeSlice<T> right);
            static bool op_Inequality(Unity.Collections.NativeSlice<T> left, Unity.Collections.NativeSlice<T> right);
            NativeSlice(Unity.Collections.NativeSlice<T> slice, int start);
            NativeSlice(Unity.Collections.NativeSlice<T> slice, int start, int length);
            NativeSlice(Unity.Collections.NativeArray<T> array);
            NativeSlice(Unity.Collections.NativeArray<T> array, int start);
            NativeSlice(Unity.Collections.NativeArray<T> array, int start, int length);
            Unity.Collections.NativeSlice<U> SliceConvert<U>();
            Unity.Collections.NativeSlice<U> SliceWithStride<U>(int offset);
            Unity.Collections.NativeSlice<U> SliceWithStride<U>();
            void CheckReadIndex(int index);
            void CheckWriteIndex(int index);
            T get_Item(int index);
            void set_Item(int index, T value);
            void CopyFrom(Unity.Collections.NativeSlice<T> slice);
            void CopyFrom(T[] array);
            void CopyTo(Unity.Collections.NativeArray<T> array);
            void CopyTo(T[] array);
            T[] ToArray();
            int get_Stride();
            int get_Length();
            Unity.Collections.NativeSlice.Enumerator<T> GetEnumerator();
            System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            bool Equals(Unity.Collections.NativeSlice<T> other);
            bool Equals(object obj);
            int GetHashCode();

            struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable
            {
                /*0x0*/ Unity.Collections.NativeSlice<T> m_Array;
                /*0x0*/ int m_Index;

                Enumerator(ref Unity.Collections.NativeSlice<T> array);
                void Dispose();
                bool MoveNext();
                void Reset();
                T get_Current();
                object System.Collections.IEnumerator.get_Current();
            }
        }

        class NativeSliceDebugView<T>
        {
            /*0x0*/ Unity.Collections.NativeSlice<T> m_Array;

            NativeSliceDebugView(Unity.Collections.NativeSlice<T> array);
            T[] get_Items();
        }

        enum NativeLeakDetectionMode
        {
            EnabledWithStackTrace = 3,
            Enabled = 2,
            Disabled = 1,
        }

        class NativeLeakDetection
        {
            static string kNativeLeakDetectionModePrefsString = "Unity.Colletions.NativeLeakDetection.Mode";
            static /*0x0*/ int s_NativeLeakDetectionMode;

            static /*0x2816044*/ void Initialize();
            static /*0x2816090*/ Unity.Collections.NativeLeakDetectionMode get_Mode();
            static /*0x2816108*/ void set_Mode(Unity.Collections.NativeLeakDetectionMode value);
        }

        enum NativeArrayOptions
        {
            UninitializedMemory = 0,
            ClearMemory = 1,
        }

        struct NativeArray<T> : System.IDisposable, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.IEquatable<Unity.Collections.NativeArray<T>>
        {
            /*0x0*/ void* m_Buffer;
            /*0x0*/ int m_Length;
            /*0x0*/ Unity.Collections.Allocator m_AllocatorLabel;

            static void CheckAllocateArguments(int length, Unity.Collections.Allocator allocator, long totalSize);
            static void Allocate(int length, Unity.Collections.Allocator allocator, ref Unity.Collections.NativeArray<T> array);
            static void IsUnmanagedAndThrow();
            static bool op_Equality(Unity.Collections.NativeArray<T> left, Unity.Collections.NativeArray<T> right);
            static bool op_Inequality(Unity.Collections.NativeArray<T> left, Unity.Collections.NativeArray<T> right);
            static void CheckCopyLengths(int srcLength, int dstLength);
            static void Copy(Unity.Collections.NativeArray<T> src, Unity.Collections.NativeArray<T> dst);
            static void Copy(Unity.Collections.NativeArray.ReadOnly<T> src, Unity.Collections.NativeArray<T> dst);
            static void Copy(T[] src, Unity.Collections.NativeArray<T> dst);
            static void Copy(Unity.Collections.NativeArray<T> src, T[] dst);
            static void Copy(Unity.Collections.NativeArray.ReadOnly<T> src, T[] dst);
            static void Copy(Unity.Collections.NativeArray<T> src, Unity.Collections.NativeArray<T> dst, int length);
            static void Copy(Unity.Collections.NativeArray.ReadOnly<T> src, Unity.Collections.NativeArray<T> dst, int length);
            static void Copy(T[] src, Unity.Collections.NativeArray<T> dst, int length);
            static void Copy(Unity.Collections.NativeArray<T> src, T[] dst, int length);
            static void Copy(Unity.Collections.NativeArray.ReadOnly<T> src, T[] dst, int length);
            static void CheckCopyArguments(int srcLength, int srcIndex, int dstLength, int dstIndex, int length);
            static void Copy(Unity.Collections.NativeArray<T> src, int srcIndex, Unity.Collections.NativeArray<T> dst, int dstIndex, int length);
            static void Copy(Unity.Collections.NativeArray.ReadOnly<T> src, int srcIndex, Unity.Collections.NativeArray<T> dst, int dstIndex, int length);
            static void Copy(T[] src, int srcIndex, Unity.Collections.NativeArray<T> dst, int dstIndex, int length);
            static void Copy(Unity.Collections.NativeArray<T> src, int srcIndex, T[] dst, int dstIndex, int length);
            static void Copy(Unity.Collections.NativeArray.ReadOnly<T> src, int srcIndex, T[] dst, int dstIndex, int length);
            static void CheckReinterpretSize<U>();
            NativeArray(int length, Unity.Collections.Allocator allocator, Unity.Collections.NativeArrayOptions options);
            NativeArray(T[] array, Unity.Collections.Allocator allocator);
            NativeArray(Unity.Collections.NativeArray<T> array, Unity.Collections.Allocator allocator);
            int get_Length();
            void CheckElementReadAccess(int index);
            void CheckElementWriteAccess(int index);
            T get_Item(int index);
            void set_Item(int index, T value);
            bool get_IsCreated();
            void Dispose();
            Unity.Jobs.JobHandle Dispose(Unity.Jobs.JobHandle inputDeps);
            void CopyFrom(T[] array);
            void CopyFrom(Unity.Collections.NativeArray<T> array);
            void CopyTo(T[] array);
            void CopyTo(Unity.Collections.NativeArray<T> array);
            T[] ToArray();
            Unity.Collections.NativeArray.Enumerator<T> GetEnumerator();
            System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            bool Equals(Unity.Collections.NativeArray<T> other);
            bool Equals(object obj);
            int GetHashCode();
            void CheckReinterpretLoadRange<U>(int sourceIndex);
            void CheckReinterpretStoreRange<U>(int destIndex);
            U ReinterpretLoad<U>(int sourceIndex);
            void ReinterpretStore<U>(int destIndex, U data);
            Unity.Collections.NativeArray<U> InternalReinterpret<U>(int length);
            Unity.Collections.NativeArray<U> Reinterpret<U>();
            void CheckReinterpretSize<U>(long tSize, long uSize, int expectedTypeSize, long byteLen, long uLen);
            Unity.Collections.NativeArray<U> Reinterpret<U>(int expectedTypeSize);
            void CheckGetSubArrayArguments(int start, int length);
            Unity.Collections.NativeArray<T> GetSubArray(int start, int length);
            Unity.Collections.NativeArray.ReadOnly<T> AsReadOnly();

            struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable
            {
                /*0x0*/ Unity.Collections.NativeArray<T> m_Array;
                /*0x0*/ int m_Index;

                Enumerator(ref Unity.Collections.NativeArray<T> array);
                void Dispose();
                bool MoveNext();
                void Reset();
                T get_Current();
                object System.Collections.IEnumerator.get_Current();
            }

            struct ReadOnly<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x0*/ void* m_Buffer;
                /*0x0*/ int m_Length;

                ReadOnly(void* buffer, int length);
                int get_Length();
                T[] ToArray();
                T get_Item(int index);
                bool get_IsCreated();
                Unity.Collections.NativeArray.ReadOnly.Enumerator<T> GetEnumerator();
                System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable
                {
                    /*0x0*/ Unity.Collections.NativeArray.ReadOnly<T> m_Array;
                    /*0x0*/ int m_Index;

                    Enumerator(ref Unity.Collections.NativeArray.ReadOnly<T> array);
                    void Dispose();
                    bool MoveNext();
                    void Reset();
                    T get_Current();
                    object System.Collections.IEnumerator.get_Current();
                }
            }
        }

        struct NativeArrayDispose
        {
            /*0x10*/ void* m_Buffer;
            /*0x18*/ Unity.Collections.Allocator m_AllocatorLabel;

            /*0x2816160*/ void Dispose();
        }

        struct NativeArrayDisposeJob : Unity.Jobs.IJob
        {
            /*0x10*/ Unity.Collections.NativeArrayDispose Data;

            /*0x28161e8*/ void Execute();
        }

        class NativeArrayDebugView<T>
        {
            /*0x0*/ Unity.Collections.NativeArray<T> m_Array;

            NativeArrayDebugView(Unity.Collections.NativeArray<T> array);
            T[] get_Items();
        }

        class NativeArrayReadOnlyDebugView<T>
        {
            /*0x0*/ Unity.Collections.NativeArray.ReadOnly<T> m_Array;

            NativeArrayReadOnlyDebugView(Unity.Collections.NativeArray.ReadOnly<T> array);
            T[] get_Items();
        }

        enum Allocator
        {
            Invalid = 0,
            None = 1,
            Temp = 2,
            TempJob = 3,
            Persistent = 4,
            AudioKernel = 5,
        }

        enum LeakCategory
        {
            Invalid = 0,
            Malloc = 1,
            TempJob = 2,
            Persistent = 3,
            LightProbesQuery = 4,
            NativeTest = 5,
            MeshDataArray = 6,
            TransformAccessArray = 7,
            NavMeshQuery = 8,
        }

        class ReadOnlyAttribute : System.Attribute
        {
            /*0x281622c*/ ReadOnlyAttribute();
        }

        class WriteOnlyAttribute : System.Attribute
        {
            /*0x2816234*/ WriteOnlyAttribute();
        }

        class DeallocateOnJobCompletionAttribute : System.Attribute
        {
            /*0x281623c*/ DeallocateOnJobCompletionAttribute();
        }

        class NativeFixedLengthAttribute : System.Attribute
        {
            /*0x10*/ int FixedLength;

            /*0x2816244*/ NativeFixedLengthAttribute(int fixedLength);
        }

        class NativeMatchesParallelForLengthAttribute : System.Attribute
        {
            /*0x281626c*/ NativeMatchesParallelForLengthAttribute();
        }

        class NativeDisableParallelForRestrictionAttribute : System.Attribute
        {
            /*0x2816274*/ NativeDisableParallelForRestrictionAttribute();
        }

        namespace LowLevel
        {
            namespace Unsafe
            {
                class BurstLike
                {
                    static /*0x281627c*/ int NativeFunctionCall_Int_IntPtr_IntPtr(nint function, nint p0, nint p1, ref int error);
                    static /*0x28162d8*/ nint StaticDataGetOrCreate(int key, int sizeInBytes, ref int error);
                }

                class UnsafeUtility
                {
                    static void CopyPtrToStructure<T>(void* ptr, ref T output);
                    static void InternalCopyPtrToStructure<T>(void* ptr, ref T output);
                    static void CopyStructureToPtr<T>(ref T input, void* ptr);
                    static void InternalCopyStructureToPtr<T>(ref T input, void* ptr);
                    static T ReadArrayElement<T>(void* source, int index);
                    static T ReadArrayElementWithStride<T>(void* source, int index, int stride);
                    static void WriteArrayElement<T>(void* destination, int index, T value);
                    static void WriteArrayElementWithStride<T>(void* destination, int index, int stride, T value);
                    static void* AddressOf<T>(ref T output);
                    static int SizeOf<T>();
                    static ref T As<U, T>(ref U from);
                    static ref T AsRef<T>(void* ptr);
                    static ref T ArrayElementAsRef<T>(void* ptr, int index);
                    static int EnumToInt<T>(T enumValue);
                    static void InternalEnumToInt<T>(ref T enumValue, ref int intValue);
                    static bool EnumEquals<T>(T lhs, T rhs);
                    static /*0x281632c*/ bool IsBlittableValueType(System.Type t);
                    static /*0x28163c8*/ string GetReasonForTypeNonBlittableImpl(System.Type t, string name);
                    static /*0x2816588*/ bool IsArrayBlittable(System.Array arr);
                    static bool IsGenericListBlittable<T>();
                    static /*0x28165b8*/ string GetReasonForArrayNonBlittable(System.Array arr);
                    static string GetReasonForGenericListNonBlittable<T>();
                    static /*0x2816608*/ string GetReasonForTypeNonBlittable(System.Type t);
                    static string GetReasonForValueTypeNonBlittable<T>();
                    static bool IsUnmanaged<T>();
                    static bool IsValidNativeContainerElementType<T>();
                    static int AlignOf<T>();
                    static /*0x2816638*/ int GetFieldOffsetInStruct(System.Reflection.FieldInfo field);
                    static /*0x2816674*/ int GetFieldOffsetInClass(System.Reflection.FieldInfo field);
                    static /*0x28166b0*/ int GetFieldOffset(System.Reflection.FieldInfo field);
                    static /*0x281676c*/ void* PinGCObjectAndGetAddress(object target, ref ulong gcHandle);
                    static /*0x28167f4*/ void* PinGCArrayAndGetDataAddress(System.Array target, ref ulong gcHandle);
                    static /*0x2816838*/ void* PinSystemArrayAndGetAddress(object target, ref ulong gcHandle);
                    static /*0x28167b0*/ void* PinSystemObjectAndGetAddress(object target, ref ulong gcHandle);
                    static /*0x281687c*/ void ReleaseGCObject(ulong gcHandle);
                    static /*0x28168b8*/ void CopyObjectAddressToPtr(object target, void* dstPtr);
                    static bool IsBlittable<T>();
                    static /*0x28168fc*/ int CheckForLeaks();
                    static /*0x2816924*/ int ForgiveLeaks();
                    static /*0x281694c*/ Unity.Collections.NativeLeakDetectionMode GetLeakDetectionMode();
                    static /*0x2816974*/ void SetLeakDetectionMode(Unity.Collections.NativeLeakDetectionMode value);
                    static /*0x28169b0*/ int LeakRecord(nint handle, Unity.Collections.LeakCategory category, int callstacksToSkip);
                    static /*0x2816a04*/ int LeakErase(nint handle, Unity.Collections.LeakCategory category);
                    static /*0x2816a48*/ void* MallocTracked(long size, int alignment, Unity.Collections.Allocator allocator, int callstacksToSkip);
                    static /*0x2816aa4*/ void FreeTracked(void* memory, Unity.Collections.Allocator allocator);
                    static /*0x2816ae8*/ void* Malloc(long size, int alignment, Unity.Collections.Allocator allocator);
                    static /*0x28161a4*/ void Free(void* memory, Unity.Collections.Allocator allocator);
                    static /*0x2816b3c*/ bool IsValidAllocator(Unity.Collections.Allocator allocator);
                    static /*0x2816b48*/ void MemCpy(void* destination, void* source, long size);
                    static /*0x2816b9c*/ void MemCpyReplicate(void* destination, void* source, int size, int count);
                    static /*0x2816bf8*/ void MemCpyStride(void* destination, int destinationStride, void* source, int sourceStride, int elementSize, int count);
                    static /*0x2816c6c*/ void MemMove(void* destination, void* source, long size);
                    static /*0x2816cc0*/ void MemSet(void* destination, byte value, long size);
                    static /*0x2816d14*/ void MemClear(void* destination, long size);
                    static /*0x2816d5c*/ int MemCmp(void* ptr1, void* ptr2, long size);
                    static /*0x2816db0*/ int SizeOf(System.Type type);
                    static /*0x281638c*/ bool IsBlittable(System.Type type);
                    static /*0x2816dec*/ bool IsUnmanaged(System.Type type);
                    static /*0x2816e28*/ bool IsValidNativeContainerElementType(System.Type type);
                    static /*0x2816e64*/ void LogError(string msg, string filename, int linenumber);

                    struct IsUnmanagedCache<T>
                    {
                        static /*0x0*/ int value;
                    }

                    struct IsValidNativeContainerElementTypeCache<T>
                    {
                        static /*0x0*/ int value;
                    }

                    struct AlignOfHelper<T>
                    {
                        /*0x0*/ byte dummy;
                        /*0x0*/ T data;
                    }
                }

                class NativeSliceUnsafeUtility
                {
                    static Unity.Collections.NativeSlice<T> ConvertExistingDataToNativeSlice<T>(void* dataPointer, int stride, int length);
                    static void* GetUnsafePtr<T>(Unity.Collections.NativeSlice<T> nativeSlice);
                    static void* GetUnsafeReadOnlyPtr<T>(Unity.Collections.NativeSlice<T> nativeSlice);
                }

                class NativeArrayUnsafeUtility
                {
                    static void CheckConvertArguments<T>(int length, Unity.Collections.Allocator allocator);
                    static Unity.Collections.NativeArray<T> ConvertExistingDataToNativeArray<T>(void* dataPointer, int length, Unity.Collections.Allocator allocator);
                    static void* GetUnsafePtr<T>(Unity.Collections.NativeArray<T> nativeArray);
                    static void* GetUnsafeReadOnlyPtr<T>(Unity.Collections.NativeArray<T> nativeArray);
                    static void* GetUnsafeReadOnlyPtr<T>(Unity.Collections.NativeArray.ReadOnly<T> nativeArray);
                    static void* GetUnsafeBufferPointerWithoutChecks<T>(Unity.Collections.NativeArray<T> nativeArray);
                }

                class NativeContainerAttribute : System.Attribute
                {
                    /*0x2816eb8*/ NativeContainerAttribute();
                }

                class NativeContainerIsReadOnlyAttribute : System.Attribute
                {
                    /*0x2816ec0*/ NativeContainerIsReadOnlyAttribute();
                }

                class NativeContainerIsAtomicWriteOnlyAttribute : System.Attribute
                {
                    /*0x2816ec8*/ NativeContainerIsAtomicWriteOnlyAttribute();
                }

                class NativeContainerSupportsMinMaxWriteRestrictionAttribute : System.Attribute
                {
                    /*0x2816ed0*/ NativeContainerSupportsMinMaxWriteRestrictionAttribute();
                }

                class NativeContainerSupportsDeallocateOnJobCompletionAttribute : System.Attribute
                {
                    /*0x2816ed8*/ NativeContainerSupportsDeallocateOnJobCompletionAttribute();
                }

                class NativeContainerSupportsDeferredConvertListToArray : System.Attribute
                {
                    /*0x2816ee0*/ NativeContainerSupportsDeferredConvertListToArray();
                }

                class NativeSetThreadIndexAttribute : System.Attribute
                {
                    /*0x2816ee8*/ NativeSetThreadIndexAttribute();
                }

                class NativeContainerNeedsThreadIndexAttribute : System.Attribute
                {
                    /*0x2816ef0*/ NativeContainerNeedsThreadIndexAttribute();
                }

                class WriteAccessRequiredAttribute : System.Attribute
                {
                    /*0x2816ef8*/ WriteAccessRequiredAttribute();
                }

                class NativeDisableUnsafePtrRestrictionAttribute : System.Attribute
                {
                    /*0x2816f00*/ NativeDisableUnsafePtrRestrictionAttribute();
                }

                class NativeDisableContainerSafetyRestrictionAttribute : System.Attribute
                {
                    /*0x2816f08*/ NativeDisableContainerSafetyRestrictionAttribute();
                }

                class NativeSetClassTypeToNullOnScheduleAttribute : System.Attribute
                {
                    /*0x2816f10*/ NativeSetClassTypeToNullOnScheduleAttribute();
                }
            }
        }
    }
}

namespace JetBrains
{
    namespace Annotations
    {
        class CanBeNullAttribute : System.Attribute
        {
            /*0x2816f18*/ CanBeNullAttribute();
        }

        class NotNullAttribute : System.Attribute
        {
            /*0x2816f20*/ NotNullAttribute();
        }

        class ItemNotNullAttribute : System.Attribute
        {
            /*0x2816f28*/ ItemNotNullAttribute();
        }

        class ItemCanBeNullAttribute : System.Attribute
        {
            /*0x2816f30*/ ItemCanBeNullAttribute();
        }

        class StringFormatMethodAttribute : System.Attribute
        {
            /*0x10*/ string <FormatParameterName>k__BackingField;

            /*0x2816f38*/ StringFormatMethodAttribute(string formatParameterName);
            /*0x2816f60*/ string get_FormatParameterName();
        }

        class ValueProviderAttribute : System.Attribute
        {
            /*0x10*/ string <Name>k__BackingField;

            /*0x2816f68*/ ValueProviderAttribute(string name);
            /*0x2816f90*/ string get_Name();
        }

        class InvokerParameterNameAttribute : System.Attribute
        {
            /*0x2816f98*/ InvokerParameterNameAttribute();
        }

        class NotifyPropertyChangedInvocatorAttribute : System.Attribute
        {
            /*0x10*/ string <ParameterName>k__BackingField;

            /*0x2816fa0*/ NotifyPropertyChangedInvocatorAttribute();
            /*0x2816fa8*/ NotifyPropertyChangedInvocatorAttribute(string parameterName);
            /*0x2816fd0*/ string get_ParameterName();
        }

        class ContractAnnotationAttribute : System.Attribute
        {
            /*0x10*/ string <Contract>k__BackingField;
            /*0x18*/ bool <ForceFullStates>k__BackingField;

            /*0x2816fd8*/ ContractAnnotationAttribute(string contract);
            /*0x2817004*/ ContractAnnotationAttribute(string contract, bool forceFullStates);
            /*0x2817034*/ string get_Contract();
            /*0x281703c*/ bool get_ForceFullStates();
        }

        class LocalizationRequiredAttribute : System.Attribute
        {
            /*0x10*/ bool <Required>k__BackingField;

            /*0x2817044*/ LocalizationRequiredAttribute();
            /*0x2817064*/ LocalizationRequiredAttribute(bool required);
            /*0x281708c*/ bool get_Required();
        }

        class CannotApplyEqualityOperatorAttribute : System.Attribute
        {
            /*0x2817094*/ CannotApplyEqualityOperatorAttribute();
        }

        class BaseTypeRequiredAttribute : System.Attribute
        {
            /*0x10*/ System.Type <BaseType>k__BackingField;

            /*0x281709c*/ BaseTypeRequiredAttribute(System.Type baseType);
            /*0x28170c4*/ System.Type get_BaseType();
        }

        class UsedImplicitlyAttribute : System.Attribute
        {
            /*0x10*/ JetBrains.Annotations.ImplicitUseKindFlags <UseKindFlags>k__BackingField;
            /*0x14*/ JetBrains.Annotations.ImplicitUseTargetFlags <TargetFlags>k__BackingField;

            /*0x28170cc*/ UsedImplicitlyAttribute();
            /*0x281711c*/ UsedImplicitlyAttribute(JetBrains.Annotations.ImplicitUseKindFlags useKindFlags);
            /*0x2817148*/ UsedImplicitlyAttribute(JetBrains.Annotations.ImplicitUseTargetFlags targetFlags);
            /*0x28170f0*/ UsedImplicitlyAttribute(JetBrains.Annotations.ImplicitUseKindFlags useKindFlags, JetBrains.Annotations.ImplicitUseTargetFlags targetFlags);
            /*0x2817174*/ JetBrains.Annotations.ImplicitUseKindFlags get_UseKindFlags();
            /*0x281717c*/ JetBrains.Annotations.ImplicitUseTargetFlags get_TargetFlags();
        }

        class MeansImplicitUseAttribute : System.Attribute
        {
            /*0x10*/ JetBrains.Annotations.ImplicitUseKindFlags <UseKindFlags>k__BackingField;
            /*0x14*/ JetBrains.Annotations.ImplicitUseTargetFlags <TargetFlags>k__BackingField;

            /*0x2817184*/ MeansImplicitUseAttribute();
            /*0x28171d4*/ MeansImplicitUseAttribute(JetBrains.Annotations.ImplicitUseKindFlags useKindFlags);
            /*0x2817200*/ MeansImplicitUseAttribute(JetBrains.Annotations.ImplicitUseTargetFlags targetFlags);
            /*0x28171a8*/ MeansImplicitUseAttribute(JetBrains.Annotations.ImplicitUseKindFlags useKindFlags, JetBrains.Annotations.ImplicitUseTargetFlags targetFlags);
            /*0x281722c*/ JetBrains.Annotations.ImplicitUseKindFlags get_UseKindFlags();
            /*0x2817234*/ JetBrains.Annotations.ImplicitUseTargetFlags get_TargetFlags();
        }

        enum ImplicitUseKindFlags
        {
            Default = 7,
            Access = 1,
            Assign = 2,
            InstantiatedWithFixedConstructorSignature = 4,
            InstantiatedNoFixedConstructorSignature = 8,
        }

        enum ImplicitUseTargetFlags
        {
            Default = 1,
            Itself = 1,
            Members = 2,
            WithMembers = 3,
        }

        class PublicAPIAttribute : System.Attribute
        {
            /*0x10*/ string <Comment>k__BackingField;

            /*0x281723c*/ PublicAPIAttribute();
            /*0x2817244*/ PublicAPIAttribute(string comment);
            /*0x281726c*/ string get_Comment();
        }

        class InstantHandleAttribute : System.Attribute
        {
            /*0x2817274*/ InstantHandleAttribute();
        }

        class PureAttribute : System.Attribute
        {
            /*0x281727c*/ PureAttribute();
        }

        class MustUseReturnValueAttribute : System.Attribute
        {
            /*0x10*/ string <Justification>k__BackingField;

            /*0x2817284*/ MustUseReturnValueAttribute();
            /*0x281728c*/ MustUseReturnValueAttribute(string justification);
            /*0x28172b4*/ string get_Justification();
        }

        class ProvidesContextAttribute : System.Attribute
        {
            /*0x28172bc*/ ProvidesContextAttribute();
        }

        class PathReferenceAttribute : System.Attribute
        {
            /*0x10*/ string <BasePath>k__BackingField;

            /*0x28172c4*/ PathReferenceAttribute();
            /*0x28172cc*/ PathReferenceAttribute(string basePath);
            /*0x28172f4*/ string get_BasePath();
        }

        class SourceTemplateAttribute : System.Attribute
        {
            /*0x28172fc*/ SourceTemplateAttribute();
        }

        class MacroAttribute : System.Attribute
        {
            /*0x10*/ string <Expression>k__BackingField;
            /*0x18*/ int <Editable>k__BackingField;
            /*0x20*/ string <Target>k__BackingField;

            /*0x2817334*/ MacroAttribute();
            /*0x2817304*/ string get_Expression();
            /*0x281730c*/ void set_Expression(string value);
            /*0x2817314*/ int get_Editable();
            /*0x281731c*/ void set_Editable(int value);
            /*0x2817324*/ string get_Target();
            /*0x281732c*/ void set_Target(string value);
        }

        class CollectionAccessAttribute : System.Attribute
        {
            /*0x10*/ JetBrains.Annotations.CollectionAccessType <CollectionAccessType>k__BackingField;

            /*0x281733c*/ CollectionAccessAttribute(JetBrains.Annotations.CollectionAccessType collectionAccessType);
            /*0x2817364*/ JetBrains.Annotations.CollectionAccessType get_CollectionAccessType();
        }

        enum CollectionAccessType
        {
            None = 0,
            Read = 1,
            ModifyExistingContent = 2,
            UpdatedContent = 6,
        }

        class AssertionMethodAttribute : System.Attribute
        {
            /*0x281736c*/ AssertionMethodAttribute();
        }

        class AssertionConditionAttribute : System.Attribute
        {
            /*0x10*/ JetBrains.Annotations.AssertionConditionType <ConditionType>k__BackingField;

            /*0x2817374*/ AssertionConditionAttribute(JetBrains.Annotations.AssertionConditionType conditionType);
            /*0x281739c*/ JetBrains.Annotations.AssertionConditionType get_ConditionType();
        }

        enum AssertionConditionType
        {
            IS_TRUE = 0,
            IS_FALSE = 1,
            IS_NULL = 2,
            IS_NOT_NULL = 3,
        }

        class TerminatesProgramAttribute : System.Attribute
        {
            /*0x28173a4*/ TerminatesProgramAttribute();
        }

        class LinqTunnelAttribute : System.Attribute
        {
            /*0x28173ac*/ LinqTunnelAttribute();
        }

        class NoEnumerationAttribute : System.Attribute
        {
            /*0x28173b4*/ NoEnumerationAttribute();
        }

        class RegexPatternAttribute : System.Attribute
        {
            /*0x28173bc*/ RegexPatternAttribute();
        }

        class NoReorderAttribute : System.Attribute
        {
            /*0x28173c4*/ NoReorderAttribute();
        }
    }
}

namespace UnityEngine
{
    enum SendMessageOptions
    {
        RequireReceiver = 0,
        DontRequireReceiver = 1,
    }

    enum PrimitiveType
    {
        Sphere = 0,
        Capsule = 1,
        Cylinder = 2,
        Cube = 3,
        Plane = 4,
        Quad = 5,
    }

    enum Space
    {
        World = 0,
        Self = 1,
    }

    enum RuntimePlatform
    {
        OSXEditor = 0,
        OSXPlayer = 1,
        WindowsPlayer = 2,
        OSXWebPlayer = 3,
        OSXDashboardPlayer = 4,
        WindowsWebPlayer = 5,
        WindowsEditor = 7,
        IPhonePlayer = 8,
        XBOX360 = 10,
        PS3 = 9,
        Android = 11,
        NaCl = 12,
        FlashPlayer = 15,
        LinuxPlayer = 13,
        LinuxEditor = 16,
        WebGLPlayer = 17,
        MetroPlayerX86 = 18,
        WSAPlayerX86 = 18,
        MetroPlayerX64 = 19,
        WSAPlayerX64 = 19,
        MetroPlayerARM = 20,
        WSAPlayerARM = 20,
        WP8Player = 21,
        BlackBerryPlayer = 22,
        TizenPlayer = 23,
        PSP2 = 24,
        PS4 = 25,
        PSM = 26,
        XboxOne = 27,
        SamsungTVPlayer = 28,
        WiiU = 30,
        tvOS = 31,
        Switch = 32,
        Lumin = 33,
        Stadia = 34,
        CloudRendering = 35,
        GameCoreScarlett = -1,
        GameCoreXboxSeries = 36,
        GameCoreXboxOne = 37,
        PS5 = 38,
        EmbeddedLinuxArm64 = 39,
        EmbeddedLinuxArm32 = 40,
        EmbeddedLinuxX64 = 41,
        EmbeddedLinuxX86 = 42,
        LinuxServer = 43,
        WindowsServer = 44,
        OSXServer = 45,
    }

    enum SystemLanguage
    {
        Afrikaans = 0,
        Arabic = 1,
        Basque = 2,
        Belarusian = 3,
        Bulgarian = 4,
        Catalan = 5,
        Chinese = 6,
        Czech = 7,
        Danish = 8,
        Dutch = 9,
        English = 10,
        Estonian = 11,
        Faroese = 12,
        Finnish = 13,
        French = 14,
        German = 15,
        Greek = 16,
        Hebrew = 17,
        Icelandic = 19,
        Indonesian = 20,
        Italian = 21,
        Japanese = 22,
        Korean = 23,
        Latvian = 24,
        Lithuanian = 25,
        Norwegian = 26,
        Polish = 27,
        Portuguese = 28,
        Romanian = 29,
        Russian = 30,
        SerboCroatian = 31,
        Slovak = 32,
        Slovenian = 33,
        Spanish = 34,
        Swedish = 35,
        Thai = 36,
        Turkish = 37,
        Ukrainian = 38,
        Vietnamese = 39,
        ChineseSimplified = 40,
        ChineseTraditional = 41,
        Unknown = 42,
        Hungarian = 18,
    }

    enum LogType
    {
        Error = 0,
        Assert = 1,
        Warning = 2,
        Log = 3,
        Exception = 4,
    }

    enum LogOption
    {
        None = 0,
        NoStacktrace = 1,
    }

    enum ThreadPriority
    {
        Low = 0,
        BelowNormal = 1,
        Normal = 2,
        High = 4,
    }

    class PlayerPrefsException : System.Exception
    {
        /*0x28173cc*/ PlayerPrefsException(string error);
    }

    class PlayerPrefs
    {
        static /*0x2817434*/ bool TrySetInt(string key, int value);
        static /*0x2817478*/ bool TrySetFloat(string key, float value);
        static /*0x28174c4*/ bool TrySetSetString(string key, string value);
        static /*0x2817508*/ void SetInt(string key, int value);
        static /*0x281759c*/ int GetInt(string key, int defaultValue);
        static /*0x28175e0*/ int GetInt(string key);
        static /*0x2817620*/ void SetFloat(string key, float value);
        static /*0x28176bc*/ float GetFloat(string key, float defaultValue);
        static /*0x2817708*/ float GetFloat(string key);
        static /*0x2817748*/ void SetString(string key, string value);
        static /*0x28177dc*/ string GetString(string key, string defaultValue);
        static /*0x2817820*/ string GetString(string key);
        static /*0x281788c*/ bool HasKey(string key);
        static /*0x28178c8*/ void DeleteKey(string key);
        static /*0x2817904*/ void DeleteAll();
        static /*0x281792c*/ void Save();
        /*0x2817954*/ PlayerPrefs();
    }

    enum WeightedMode
    {
        None = 0,
        In = 1,
        Out = 2,
        Both = 3,
    }

    struct Keyframe
    {
        /*0x10*/ float m_Time;
        /*0x14*/ float m_Value;
        /*0x18*/ float m_InTangent;
        /*0x1c*/ float m_OutTangent;
        /*0x20*/ int m_WeightedMode;
        /*0x24*/ float m_InWeight;
        /*0x28*/ float m_OutWeight;

        /*0x281795c*/ Keyframe(float time, float value);
        /*0x281796c*/ Keyframe(float time, float value, float inTangent, float outTangent);
        /*0x2817980*/ Keyframe(float time, float value, float inTangent, float outTangent, float inWeight, float outWeight);
        /*0x2817998*/ float get_time();
        /*0x28179a0*/ void set_time(float value);
        /*0x28179a8*/ float get_value();
        /*0x28179b0*/ void set_value(float value);
        /*0x28179b8*/ float get_inTangent();
        /*0x28179c0*/ void set_inTangent(float value);
        /*0x28179c8*/ float get_outTangent();
        /*0x28179d0*/ void set_outTangent(float value);
        /*0x28179d8*/ float get_inWeight();
        /*0x28179e0*/ void set_inWeight(float value);
        /*0x28179e8*/ float get_outWeight();
        /*0x28179f0*/ void set_outWeight(float value);
        /*0x28179f8*/ UnityEngine.WeightedMode get_weightedMode();
        /*0x2817a00*/ void set_weightedMode(UnityEngine.WeightedMode value);
        /*0x2817a08*/ int get_tangentMode();
        /*0x2817a18*/ void set_tangentMode(int value);
        /*0x2817a10*/ int get_tangentModeInternal();
        /*0x2817a1c*/ void set_tangentModeInternal(int value);
    }

    enum WrapMode
    {
        Once = 1,
        Loop = 2,
        PingPong = 4,
        Default = 0,
        ClampForever = 8,
        Clamp = 1,
    }

    class AnimationCurve : System.IEquatable<UnityEngine.AnimationCurve>
    {
        /*0x10*/ nint m_Ptr;

        static /*0x2817a20*/ void Internal_Destroy(nint ptr);
        static /*0x2817a5c*/ nint Internal_Create(UnityEngine.Keyframe[] keys);
        static /*0x2818100*/ UnityEngine.AnimationCurve Constant(float timeStart, float timeEnd, float value);
        static /*0x2818110*/ UnityEngine.AnimationCurve Linear(float timeStart, float valueStart, float timeEnd, float valueEnd);
        static /*0x28182a0*/ UnityEngine.AnimationCurve EaseInOut(float timeStart, float valueStart, float timeEnd, float valueEnd);
        /*0x2818250*/ AnimationCurve(UnityEngine.Keyframe[] keys);
        /*0x28184d4*/ AnimationCurve();
        /*0x2817a98*/ bool Internal_Equals(nint other);
        /*0x2817adc*/ void Finalize();
        /*0x2817b98*/ float Evaluate(float time);
        /*0x2817be4*/ UnityEngine.Keyframe[] get_keys();
        /*0x2817c5c*/ void set_keys(UnityEngine.Keyframe[] value);
        /*0x2817ce4*/ int AddKey(float time, float value);
        /*0x2817d38*/ int AddKey(UnityEngine.Keyframe key);
        /*0x2817d94*/ int AddKey_Internal(UnityEngine.Keyframe key);
        /*0x2817e1c*/ int MoveKey(int index, UnityEngine.Keyframe key);
        /*0x2817ec4*/ void RemoveKey(int index);
        /*0x2817f08*/ UnityEngine.Keyframe get_Item(int index);
        /*0x281801c*/ int get_length();
        /*0x2817ca0*/ void SetKeys(UnityEngine.Keyframe[] keys);
        /*0x2817fa0*/ UnityEngine.Keyframe GetKey(int index);
        /*0x2817c20*/ UnityEngine.Keyframe[] GetKeys();
        /*0x28180ac*/ void SmoothTangents(int index, float weight);
        /*0x28183d4*/ UnityEngine.WrapMode get_preWrapMode();
        /*0x2818410*/ void set_preWrapMode(UnityEngine.WrapMode value);
        /*0x2818454*/ UnityEngine.WrapMode get_postWrapMode();
        /*0x2818490*/ void set_postWrapMode(UnityEngine.WrapMode value);
        /*0x2818520*/ bool Equals(object o);
        /*0x28185e8*/ bool Equals(UnityEngine.AnimationCurve other);
        /*0x28186b0*/ int GetHashCode();
        /*0x2817dd8*/ int AddKey_Internal_Injected(ref UnityEngine.Keyframe key);
        /*0x2817e70*/ int MoveKey_Injected(int index, ref UnityEngine.Keyframe key);
        /*0x2818058*/ void GetKey_Injected(int index, ref UnityEngine.Keyframe ret);
    }

    class UnityEventQueueSystem
    {
        static /*0x28186bc*/ string GenerateEventIdForPayload(string eventPayloadName);
        static /*0x2818c98*/ nint GetGlobalEventQueue();
        /*0x2818cc0*/ UnityEventQueueSystem();
    }

    class DebugLogHandler : UnityEngine.ILogHandler
    {
        static /*0x2818cc8*/ void Internal_Log(UnityEngine.LogType level, UnityEngine.LogOption options, string msg, UnityEngine.Object obj);
        static /*0x2818d24*/ void Internal_LogException(System.Exception ex, UnityEngine.Object obj);
        /*0x2818ed0*/ DebugLogHandler();
        /*0x2818d68*/ void LogFormat(UnityEngine.LogType logType, UnityEngine.Object context, string format, object[] args);
        /*0x2818dd0*/ void LogFormat(UnityEngine.LogType logType, UnityEngine.LogOption logOptions, UnityEngine.Object context, string format, object[] args);
        /*0x2818e3c*/ void LogException(System.Exception exception, UnityEngine.Object context);
    }

    class Debug
    {
        static /*0x0*/ UnityEngine.ILogger s_DefaultLogger;
        static /*0x8*/ UnityEngine.ILogger s_Logger;

        static /*0x281c040*/ Debug();
        static /*0x2818ed8*/ UnityEngine.ILogger get_unityLogger();
        static /*0x2818f30*/ void DrawLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, float duration);
        static /*0x28190f4*/ void DrawLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color);
        static /*0x28191dc*/ void DrawLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end);
        static /*0x2819040*/ void DrawLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, float duration, bool depthTest);
        static /*0x28192f8*/ void DrawRay(UnityEngine.Vector3 start, UnityEngine.Vector3 dir, UnityEngine.Color color, float duration);
        static /*0x2819514*/ void DrawRay(UnityEngine.Vector3 start, UnityEngine.Vector3 dir, UnityEngine.Color color);
        static /*0x28195fc*/ void DrawRay(UnityEngine.Vector3 start, UnityEngine.Vector3 dir);
        static /*0x2819408*/ void DrawRay(UnityEngine.Vector3 start, UnityEngine.Vector3 dir, UnityEngine.Color color, float duration, bool depthTest);
        static /*0x28196ac*/ void Break();
        static /*0x28196d4*/ void DebugBreak();
        static /*0x28196fc*/ int ExtractStackTraceNoAlloc(byte* buffer, int bufferMax, string projectFolder);
        static /*0x2819750*/ void Log(object message);
        static /*0x2819858*/ void Log(object message, UnityEngine.Object context);
        static /*0x2819970*/ void LogFormat(string format, object[] args);
        static /*0x2819a88*/ void LogFormat(UnityEngine.Object context, string format, object[] args);
        static /*0x2819ba4*/ void LogFormat(UnityEngine.LogType logType, UnityEngine.LogOption logOptions, UnityEngine.Object context, string format, object[] args);
        static /*0x2813b58*/ void LogError(object message);
        static /*0x2819e7c*/ void LogError(object message, UnityEngine.Object context);
        static /*0x2819f94*/ void LogErrorFormat(string format, object[] args);
        static /*0x281a0ac*/ void LogErrorFormat(UnityEngine.Object context, string format, object[] args);
        static /*0x281a1c8*/ void ClearDeveloperConsole();
        static /*0x281a1f0*/ bool get_developerConsoleVisible();
        static /*0x281a218*/ void set_developerConsoleVisible(bool value);
        static /*0x281a254*/ void LogException(System.Exception exception);
        static /*0x281a35c*/ void LogException(System.Exception exception, UnityEngine.Object context);
        static /*0x281a470*/ void LogWarning(object message);
        static /*0x281a578*/ void LogWarning(object message, UnityEngine.Object context);
        static /*0x281a690*/ void LogWarningFormat(string format, object[] args);
        static /*0x281a7a8*/ void LogWarningFormat(UnityEngine.Object context, string format, object[] args);
        static /*0x281a8c4*/ void Assert(bool condition);
        static /*0x281a9f4*/ void Assert(bool condition, UnityEngine.Object context);
        static /*0x281ab2c*/ void Assert(bool condition, object message);
        static /*0x281ac48*/ void Assert(bool condition, string message);
        static /*0x281ad64*/ void Assert(bool condition, object message, UnityEngine.Object context);
        static /*0x281ae94*/ void Assert(bool condition, string message, UnityEngine.Object context);
        static /*0x281afc4*/ void AssertFormat(bool condition, string format, object[] args);
        static /*0x281b0f4*/ void AssertFormat(bool condition, UnityEngine.Object context, string format, object[] args);
        static /*0x281b228*/ void LogAssertion(object message);
        static /*0x281b330*/ void LogAssertion(object message, UnityEngine.Object context);
        static /*0x281b448*/ void LogAssertionFormat(string format, object[] args);
        static /*0x281b560*/ void LogAssertionFormat(UnityEngine.Object context, string format, object[] args);
        static /*0x281b67c*/ bool get_isDebugBuild();
        static /*0x281b6a4*/ void OpenConsoleFile();
        static /*0x281b6cc*/ UnityEngine.DiagnosticSwitch[] get_diagnosticSwitches();
        static /*0x281b6f4*/ UnityEngine.DiagnosticSwitch GetDiagnosticSwitch(string name);
        static /*0x281b894*/ bool CallOverridenDebugHandler(System.Exception exception, UnityEngine.Object obj);
        static /*0x281bc8c*/ bool IsLoggingEnabled();
        static /*0x281beb0*/ void Assert(bool condition, string format, object[] args);
        static /*0x281bfe0*/ UnityEngine.ILogger get_logger();
        static /*0x281928c*/ void DrawLine_Injected(ref UnityEngine.Vector3 start, ref UnityEngine.Vector3 end, ref UnityEngine.Color color, float duration, bool depthTest);
        /*0x281c038*/ Debug();
    }

    struct ExposedPropertyResolver
    {
        /*0x10*/ nint table;

        static /*0x281c188*/ UnityEngine.Object ResolveReferenceInternal(nint ptr, UnityEngine.PropertyName name, ref bool isValid);
        static /*0x281c27c*/ UnityEngine.Object ResolveReferenceBindingsInternal(nint ptr, UnityEngine.PropertyName name, ref bool isValid);
        static /*0x281c2d4*/ UnityEngine.Object ResolveReferenceBindingsInternal_Injected(nint ptr, ref UnityEngine.PropertyName name, ref bool isValid);
    }

    struct ExposedReference<T>
    {
        /*0x0*/ UnityEngine.PropertyName exposedName;
        /*0x0*/ UnityEngine.Object defaultValue;

        T Resolve(UnityEngine.IExposedPropertyTable resolver);
    }

    interface IExposedPropertyTable
    {
        void SetReferenceValue(UnityEngine.PropertyName id, UnityEngine.Object value);
        UnityEngine.Object GetReferenceValue(UnityEngine.PropertyName id, ref bool idValid);
        void ClearReferenceValue(UnityEngine.PropertyName id);
    }

    class SerializeField : System.Attribute
    {
        /*0x281c328*/ SerializeField();
    }

    class SerializeReference : System.Attribute
    {
        /*0x281c330*/ SerializeReference();
    }

    class PreferBinarySerialization : System.Attribute
    {
        /*0x281c338*/ PreferBinarySerialization();
    }

    interface ISerializationCallbackReceiver
    {
        void OnBeforeSerialize();
        void OnAfterDeserialize();
    }

    enum AudioType
    {
        UNKNOWN = 0,
        ACC = 1,
        AIFF = 2,
        IT = 10,
        MOD = 12,
        MPEG = 13,
        OGGVORBIS = 14,
        S3M = 17,
        WAV = 20,
        XM = 21,
        XMA = 22,
        VAG = 23,
        AUDIOQUEUE = 24,
    }

    class UnityLogWriter : System.IO.TextWriter
    {
        static /*0x281c340*/ void WriteStringToUnityLog(string s);
        static /*0x281c384*/ void WriteStringToUnityLogImpl(string s);
        static /*0x281c3c0*/ void Init();
        /*0x281c440*/ UnityLogWriter();
        /*0x281c498*/ System.Text.Encoding get_Encoding();
        /*0x281c4a0*/ void Write(char value);
        /*0x281c4f4*/ void Write(string s);
        /*0x281c538*/ void Write(char[] buffer, int index, int count);
    }

    interface ILogger : UnityEngine.ILogHandler
    {
        UnityEngine.ILogHandler get_logHandler();
        void set_logHandler(UnityEngine.ILogHandler value);
        bool get_logEnabled();
        void set_logEnabled(bool value);
        UnityEngine.LogType get_filterLogType();
        void set_filterLogType(UnityEngine.LogType value);
        bool IsLogTypeAllowed(UnityEngine.LogType logType);
        void Log(UnityEngine.LogType logType, object message);
        void Log(UnityEngine.LogType logType, object message, UnityEngine.Object context);
        void Log(UnityEngine.LogType logType, string tag, object message);
        void Log(UnityEngine.LogType logType, string tag, object message, UnityEngine.Object context);
        void Log(object message);
        void Log(string tag, object message);
        void Log(string tag, object message, UnityEngine.Object context);
        void LogWarning(string tag, object message);
        void LogWarning(string tag, object message, UnityEngine.Object context);
        void LogError(string tag, object message);
        void LogError(string tag, object message, UnityEngine.Object context);
        void LogFormat(UnityEngine.LogType logType, string format, object[] args);
        void LogException(System.Exception exception);
    }

    interface ILogHandler
    {
        void LogFormat(UnityEngine.LogType logType, UnityEngine.Object context, string format, object[] args);
        void LogException(System.Exception exception, UnityEngine.Object context);
    }

    class Logger : UnityEngine.ILogger, UnityEngine.ILogHandler
    {
        static string kNoTagFormat = "{0}";
        static string kTagFormat = "{0}: {1}";
        /*0x10*/ UnityEngine.ILogHandler <logHandler>k__BackingField;
        /*0x18*/ bool <logEnabled>k__BackingField;
        /*0x1c*/ UnityEngine.LogType <filterLogType>k__BackingField;

        static /*0x281c5f8*/ string GetString(object message);
        /*0x281c580*/ Logger();
        /*0x281c150*/ Logger(UnityEngine.ILogHandler logHandler);
        /*0x281c588*/ UnityEngine.ILogHandler get_logHandler();
        /*0x281c590*/ void set_logHandler(UnityEngine.ILogHandler value);
        /*0x281c598*/ bool get_logEnabled();
        /*0x281c5a0*/ void set_logEnabled(bool value);
        /*0x281c5ac*/ UnityEngine.LogType get_filterLogType();
        /*0x281c5b4*/ void set_filterLogType(UnityEngine.LogType value);
        /*0x281c5bc*/ bool IsLogTypeAllowed(UnityEngine.LogType logType);
        /*0x281c718*/ void Log(UnityEngine.LogType logType, object message);
        /*0x281c88c*/ void Log(UnityEngine.LogType logType, object message, UnityEngine.Object context);
        /*0x281ca04*/ void Log(UnityEngine.LogType logType, string tag, object message);
        /*0x281cba4*/ void Log(UnityEngine.LogType logType, string tag, object message, UnityEngine.Object context);
        /*0x281cd54*/ void Log(object message);
        /*0x281ceb0*/ void Log(string tag, object message);
        /*0x281d044*/ void Log(string tag, object message, UnityEngine.Object context);
        /*0x281d1dc*/ void LogWarning(string tag, object message);
        /*0x281d370*/ void LogWarning(string tag, object message, UnityEngine.Object context);
        /*0x281d508*/ void LogError(string tag, object message);
        /*0x281d698*/ void LogError(string tag, object message, UnityEngine.Object context);
        /*0x281d82c*/ void LogException(System.Exception exception);
        /*0x281d8f0*/ void LogException(System.Exception exception, UnityEngine.Object context);
        /*0x281d9c4*/ void LogFormat(UnityEngine.LogType logType, string format, object[] args);
        /*0x281dabc*/ void LogFormat(UnityEngine.LogType logType, UnityEngine.Object context, string format, object[] args);
    }

    class LineUtility
    {
        static /*0x281dbc4*/ void GeneratePointsToKeep3D(object pointsList, float tolerance, object pointsToKeepList);
        static /*0x281dc18*/ void GeneratePointsToKeep2D(object pointsList, float tolerance, object pointsToKeepList);
        static /*0x281dc6c*/ void GenerateSimplifiedPoints3D(object pointsList, float tolerance, object simplifiedPoints);
        static /*0x281dcc0*/ void GenerateSimplifiedPoints2D(object pointsList, float tolerance, object simplifiedPoints);
        static /*0x281dd14*/ void Simplify(System.Collections.Generic.List<UnityEngine.Vector3> points, float tolerance, System.Collections.Generic.List<int> pointsToKeep);
        static /*0x281dde0*/ void Simplify(System.Collections.Generic.List<UnityEngine.Vector3> points, float tolerance, System.Collections.Generic.List<UnityEngine.Vector3> simplifiedPoints);
        static /*0x281deac*/ void Simplify(System.Collections.Generic.List<UnityEngine.Vector2> points, float tolerance, System.Collections.Generic.List<int> pointsToKeep);
        static /*0x281df78*/ void Simplify(System.Collections.Generic.List<UnityEngine.Vector2> points, float tolerance, System.Collections.Generic.List<UnityEngine.Vector2> simplifiedPoints);
        /*0x281e044*/ LineUtility();
    }

    class MeshSubsetCombineUtility
    {
        /*0x281e04c*/ MeshSubsetCombineUtility();

        struct MeshInstance
        {
            /*0x10*/ int meshInstanceID;
            /*0x14*/ int rendererInstanceID;
            /*0x18*/ int additionalVertexStreamsMeshInstanceID;
            /*0x1c*/ int enlightenVertexStreamMeshInstanceID;
            /*0x20*/ UnityEngine.Matrix4x4 transform;
            /*0x60*/ UnityEngine.Vector4 lightmapScaleOffset;
            /*0x70*/ UnityEngine.Vector4 realtimeLightmapScaleOffset;
        }

        struct SubMeshInstance
        {
            /*0x10*/ int meshInstanceID;
            /*0x14*/ int vertexOffset;
            /*0x18*/ int gameObjectInstanceID;
            /*0x1c*/ int subMeshIndex;
            /*0x20*/ UnityEngine.Matrix4x4 transform;
        }

        struct MeshContainer
        {
            /*0x10*/ UnityEngine.GameObject gameObject;
            /*0x18*/ UnityEngine.MeshSubsetCombineUtility.MeshInstance instance;
            /*0x88*/ System.Collections.Generic.List<UnityEngine.MeshSubsetCombineUtility.SubMeshInstance> subMeshInstances;
        }
    }

    class StaticBatchingUtility
    {
        static /*0x0*/ Unity.Profiling.ProfilerMarker s_CombineMarker;
        static /*0x8*/ Unity.Profiling.ProfilerMarker s_SortMarker;
        static /*0x10*/ Unity.Profiling.ProfilerMarker s_MakeBatchMarker;

        static /*0x281f840*/ StaticBatchingUtility();
        static /*0x281e054*/ void Combine(UnityEngine.GameObject staticBatchRoot);
        static /*0x281e264*/ void Combine(UnityEngine.GameObject[] gos, UnityEngine.GameObject staticBatchRoot);
        /*0x281f838*/ StaticBatchingUtility();
    }

    class InternalStaticBatchingUtility
    {
        static int MaxVerticesInBatch = 64000;
        static string CombinedMeshPrefix = "Combined Mesh";

        static /*0x281e254*/ void CombineRoot(UnityEngine.GameObject staticBatchRoot, UnityEngine.InternalStaticBatchingUtility.StaticBatcherGOSorter sorter);
        static /*0x281f984*/ void Combine(UnityEngine.GameObject staticBatchRoot, bool combineOnlyStatic, bool isEditorPostprocessScene, UnityEngine.InternalStaticBatchingUtility.StaticBatcherGOSorter sorter);
        static /*0x281fc3c*/ uint GetMeshFormatHash(UnityEngine.Mesh mesh);
        static /*0x281fdcc*/ UnityEngine.GameObject[] SortGameObjectsForStaticBatching(UnityEngine.GameObject[] gos, UnityEngine.InternalStaticBatchingUtility.StaticBatcherGOSorter sorter);
        static /*0x281e468*/ void CombineGameObjects(UnityEngine.GameObject[] gos, UnityEngine.GameObject staticBatchRoot, bool isEditorPostprocessScene, UnityEngine.InternalStaticBatchingUtility.StaticBatcherGOSorter sorter);
        static /*0x282032c*/ void MakeBatch(System.Collections.Generic.List<UnityEngine.MeshSubsetCombineUtility.MeshContainer> meshes, UnityEngine.Transform staticBatchRootTransform, int batchIndex);
        /*0x2820f64*/ InternalStaticBatchingUtility();

        class StaticBatcherGOSorter
        {
            static /*0x2821190*/ UnityEngine.Renderer GetRenderer(UnityEngine.GameObject go);
            static /*0x28212d8*/ UnityEngine.Mesh GetMesh(UnityEngine.GameObject go);
            static /*0x28202c0*/ bool GetScaleFlip(UnityEngine.GameObject go);
            /*0x2820114*/ StaticBatcherGOSorter();
            /*0x2820f6c*/ long GetMaterialId(UnityEngine.Renderer renderer);
            /*0x28210ac*/ int GetLightmapIndex(UnityEngine.Renderer renderer);
            /*0x28213ac*/ long GetRendererId(UnityEngine.Renderer renderer);
        }

        class <>c__DisplayClass5_0
        {
            /*0x10*/ UnityEngine.InternalStaticBatchingUtility.StaticBatcherGOSorter sorter;

            /*0x282010c*/ <>c__DisplayClass5_0();
            /*0x2821430*/ long <SortGameObjectsForStaticBatching>b__1(UnityEngine.GameObject g);
            /*0x2821464*/ int <SortGameObjectsForStaticBatching>b__2(UnityEngine.GameObject g);
            /*0x282148c*/ long <SortGameObjectsForStaticBatching>b__4(UnityEngine.GameObject g);
        }

        class <>c
        {
            static /*0x0*/ UnityEngine.InternalStaticBatchingUtility.<> <>9;
            static /*0x8*/ System.Func<UnityEngine.GameObject, bool> <>9__5_0;
            static /*0x10*/ System.Func<UnityEngine.GameObject, uint> <>9__5_3;
            static /*0x18*/ System.Func<UnityEngine.Material, bool> <>9__6_0;

            static /*0x28214c0*/ <>c();
            /*0x2821524*/ <>c();
            /*0x282152c*/ bool <SortGameObjectsForStaticBatching>b__5_0(UnityEngine.GameObject g);
            /*0x2821534*/ uint <SortGameObjectsForStaticBatching>b__5_3(UnityEngine.GameObject g);
            /*0x2821548*/ bool <CombineGameObjects>b__6_0(UnityEngine.Material m);
        }
    }

    class CrashReport
    {
        static /*0x0*/ System.Collections.Generic.List<UnityEngine.CrashReport> internalReports;
        static /*0x8*/ object reportsLock;
        /*0x10*/ string id;
        /*0x18*/ System.DateTime time;
        /*0x20*/ string text;

        static /*0x2821ffc*/ CrashReport();
        static /*0x2821614*/ int Compare(UnityEngine.CrashReport c1, UnityEngine.CrashReport c2);
        static /*0x2821674*/ void PopulateReports();
        static /*0x2821b08*/ UnityEngine.CrashReport[] get_reports();
        static /*0x2821c34*/ UnityEngine.CrashReport get_lastReport();
        static /*0x2821db0*/ void RemoveAll();
        static /*0x2821a60*/ string[] GetReports();
        static /*0x2821a88*/ string GetReportData(string id, ref double secondsSinceUnixEpoch);
        static /*0x2821fc0*/ bool RemoveReport(string id);
        /*0x2821acc*/ CrashReport(string id, System.DateTime time, string text);
        /*0x2821e48*/ void Remove();
    }

    struct Pose : System.IEquatable<UnityEngine.Pose>
    {
        static /*0x0*/ UnityEngine.Pose k_Identity;
        /*0x10*/ UnityEngine.Vector3 position;
        /*0x1c*/ UnityEngine.Quaternion rotation;

        static /*0x2822910*/ Pose();
        static /*0x28225a4*/ UnityEngine.Pose get_identity();
        static /*0x28227cc*/ bool op_Equality(UnityEngine.Pose a, UnityEngine.Pose b);
        static /*0x28227fc*/ bool op_Inequality(UnityEngine.Pose a, UnityEngine.Pose b);
        /*0x2822074*/ Pose(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
        /*0x2822088*/ string ToString();
        /*0x282217c*/ string ToString(string format);
        /*0x2822284*/ UnityEngine.Pose GetTransformedBy(UnityEngine.Pose lhs);
        /*0x2822368*/ UnityEngine.Pose GetTransformedBy(UnityEngine.Transform lhs);
        /*0x2822454*/ UnityEngine.Vector3 get_forward();
        /*0x28224c4*/ UnityEngine.Vector3 get_right();
        /*0x2822534*/ UnityEngine.Vector3 get_up();
        /*0x282260c*/ bool Equals(object obj);
        /*0x282269c*/ bool Equals(UnityEngine.Pose other);
        /*0x2822720*/ int GetHashCode();
    }

    enum KeyCode
    {
        None = 0,
        Backspace = 8,
        Delete = 127,
        Tab = 9,
        Clear = 12,
        Return = 13,
        Pause = 19,
        Escape = 27,
        Space = 32,
        Keypad0 = 256,
        Keypad1 = 257,
        Keypad2 = 258,
        Keypad3 = 259,
        Keypad4 = 260,
        Keypad5 = 261,
        Keypad6 = 262,
        Keypad7 = 263,
        Keypad8 = 264,
        Keypad9 = 265,
        KeypadPeriod = 266,
        KeypadDivide = 267,
        KeypadMultiply = 268,
        KeypadMinus = 269,
        KeypadPlus = 270,
        KeypadEnter = 271,
        KeypadEquals = 272,
        UpArrow = 273,
        DownArrow = 274,
        RightArrow = 275,
        LeftArrow = 276,
        Insert = 277,
        Home = 278,
        End = 279,
        PageUp = 280,
        PageDown = 281,
        F1 = 282,
        F2 = 283,
        F3 = 284,
        F4 = 285,
        F5 = 286,
        F6 = 287,
        F7 = 288,
        F8 = 289,
        F9 = 290,
        F10 = 291,
        F11 = 292,
        F12 = 293,
        F13 = 294,
        F14 = 295,
        F15 = 296,
        Alpha0 = 48,
        Alpha1 = 49,
        Alpha2 = 50,
        Alpha3 = 51,
        Alpha4 = 52,
        Alpha5 = 53,
        Alpha6 = 54,
        Alpha7 = 55,
        Alpha8 = 56,
        Alpha9 = 57,
        Exclaim = 33,
        DoubleQuote = 34,
        Hash = 35,
        Dollar = 36,
        Percent = 37,
        Ampersand = 38,
        Quote = 39,
        LeftParen = 40,
        RightParen = 41,
        Asterisk = 42,
        Plus = 43,
        Comma = 44,
        Minus = 45,
        Period = 46,
        Slash = 47,
        Colon = 58,
        Semicolon = 59,
        Less = 60,
        Equals = 61,
        Greater = 62,
        Question = 63,
        At = 64,
        LeftBracket = 91,
        Backslash = 92,
        RightBracket = 93,
        Caret = 94,
        Underscore = 95,
        BackQuote = 96,
        A = 97,
        B = 98,
        C = 99,
        D = 100,
        E = 101,
        F = 102,
        G = 103,
        H = 104,
        I = 105,
        J = 106,
        K = 107,
        L = 108,
        M = 109,
        N = 110,
        O = 111,
        P = 112,
        Q = 113,
        R = 114,
        S = 115,
        T = 116,
        U = 117,
        V = 118,
        W = 119,
        X = 120,
        Y = 121,
        Z = 122,
        LeftCurlyBracket = 123,
        Pipe = 124,
        RightCurlyBracket = 125,
        Tilde = 126,
        Numlock = 300,
        CapsLock = 301,
        ScrollLock = 302,
        RightShift = 303,
        LeftShift = 304,
        RightControl = 305,
        LeftControl = 306,
        RightAlt = 307,
        LeftAlt = 308,
        LeftMeta = 310,
        LeftCommand = 310,
        LeftApple = 310,
        LeftWindows = 311,
        RightMeta = 309,
        RightCommand = 309,
        RightApple = 309,
        RightWindows = 312,
        AltGr = 313,
        Help = 315,
        Print = 316,
        SysReq = 317,
        Break = 318,
        Menu = 319,
        Mouse0 = 323,
        Mouse1 = 324,
        Mouse2 = 325,
        Mouse3 = 326,
        Mouse4 = 327,
        Mouse5 = 328,
        Mouse6 = 329,
        JoystickButton0 = 330,
        JoystickButton1 = 331,
        JoystickButton2 = 332,
        JoystickButton3 = 333,
        JoystickButton4 = 334,
        JoystickButton5 = 335,
        JoystickButton6 = 336,
        JoystickButton7 = 337,
        JoystickButton8 = 338,
        JoystickButton9 = 339,
        JoystickButton10 = 340,
        JoystickButton11 = 341,
        JoystickButton12 = 342,
        JoystickButton13 = 343,
        JoystickButton14 = 344,
        JoystickButton15 = 345,
        JoystickButton16 = 346,
        JoystickButton17 = 347,
        JoystickButton18 = 348,
        JoystickButton19 = 349,
        Joystick1Button0 = 350,
        Joystick1Button1 = 351,
        Joystick1Button2 = 352,
        Joystick1Button3 = 353,
        Joystick1Button4 = 354,
        Joystick1Button5 = 355,
        Joystick1Button6 = 356,
        Joystick1Button7 = 357,
        Joystick1Button8 = 358,
        Joystick1Button9 = 359,
        Joystick1Button10 = 360,
        Joystick1Button11 = 361,
        Joystick1Button12 = 362,
        Joystick1Button13 = 363,
        Joystick1Button14 = 364,
        Joystick1Button15 = 365,
        Joystick1Button16 = 366,
        Joystick1Button17 = 367,
        Joystick1Button18 = 368,
        Joystick1Button19 = 369,
        Joystick2Button0 = 370,
        Joystick2Button1 = 371,
        Joystick2Button2 = 372,
        Joystick2Button3 = 373,
        Joystick2Button4 = 374,
        Joystick2Button5 = 375,
        Joystick2Button6 = 376,
        Joystick2Button7 = 377,
        Joystick2Button8 = 378,
        Joystick2Button9 = 379,
        Joystick2Button10 = 380,
        Joystick2Button11 = 381,
        Joystick2Button12 = 382,
        Joystick2Button13 = 383,
        Joystick2Button14 = 384,
        Joystick2Button15 = 385,
        Joystick2Button16 = 386,
        Joystick2Button17 = 387,
        Joystick2Button18 = 388,
        Joystick2Button19 = 389,
        Joystick3Button0 = 390,
        Joystick3Button1 = 391,
        Joystick3Button2 = 392,
        Joystick3Button3 = 393,
        Joystick3Button4 = 394,
        Joystick3Button5 = 395,
        Joystick3Button6 = 396,
        Joystick3Button7 = 397,
        Joystick3Button8 = 398,
        Joystick3Button9 = 399,
        Joystick3Button10 = 400,
        Joystick3Button11 = 401,
        Joystick3Button12 = 402,
        Joystick3Button13 = 403,
        Joystick3Button14 = 404,
        Joystick3Button15 = 405,
        Joystick3Button16 = 406,
        Joystick3Button17 = 407,
        Joystick3Button18 = 408,
        Joystick3Button19 = 409,
        Joystick4Button0 = 410,
        Joystick4Button1 = 411,
        Joystick4Button2 = 412,
        Joystick4Button3 = 413,
        Joystick4Button4 = 414,
        Joystick4Button5 = 415,
        Joystick4Button6 = 416,
        Joystick4Button7 = 417,
        Joystick4Button8 = 418,
        Joystick4Button9 = 419,
        Joystick4Button10 = 420,
        Joystick4Button11 = 421,
        Joystick4Button12 = 422,
        Joystick4Button13 = 423,
        Joystick4Button14 = 424,
        Joystick4Button15 = 425,
        Joystick4Button16 = 426,
        Joystick4Button17 = 427,
        Joystick4Button18 = 428,
        Joystick4Button19 = 429,
        Joystick5Button0 = 430,
        Joystick5Button1 = 431,
        Joystick5Button2 = 432,
        Joystick5Button3 = 433,
        Joystick5Button4 = 434,
        Joystick5Button5 = 435,
        Joystick5Button6 = 436,
        Joystick5Button7 = 437,
        Joystick5Button8 = 438,
        Joystick5Button9 = 439,
        Joystick5Button10 = 440,
        Joystick5Button11 = 441,
        Joystick5Button12 = 442,
        Joystick5Button13 = 443,
        Joystick5Button14 = 444,
        Joystick5Button15 = 445,
        Joystick5Button16 = 446,
        Joystick5Button17 = 447,
        Joystick5Button18 = 448,
        Joystick5Button19 = 449,
        Joystick6Button0 = 450,
        Joystick6Button1 = 451,
        Joystick6Button2 = 452,
        Joystick6Button3 = 453,
        Joystick6Button4 = 454,
        Joystick6Button5 = 455,
        Joystick6Button6 = 456,
        Joystick6Button7 = 457,
        Joystick6Button8 = 458,
        Joystick6Button9 = 459,
        Joystick6Button10 = 460,
        Joystick6Button11 = 461,
        Joystick6Button12 = 462,
        Joystick6Button13 = 463,
        Joystick6Button14 = 464,
        Joystick6Button15 = 465,
        Joystick6Button16 = 466,
        Joystick6Button17 = 467,
        Joystick6Button18 = 468,
        Joystick6Button19 = 469,
        Joystick7Button0 = 470,
        Joystick7Button1 = 471,
        Joystick7Button2 = 472,
        Joystick7Button3 = 473,
        Joystick7Button4 = 474,
        Joystick7Button5 = 475,
        Joystick7Button6 = 476,
        Joystick7Button7 = 477,
        Joystick7Button8 = 478,
        Joystick7Button9 = 479,
        Joystick7Button10 = 480,
        Joystick7Button11 = 481,
        Joystick7Button12 = 482,
        Joystick7Button13 = 483,
        Joystick7Button14 = 484,
        Joystick7Button15 = 485,
        Joystick7Button16 = 486,
        Joystick7Button17 = 487,
        Joystick7Button18 = 488,
        Joystick7Button19 = 489,
        Joystick8Button0 = 490,
        Joystick8Button1 = 491,
        Joystick8Button2 = 492,
        Joystick8Button3 = 493,
        Joystick8Button4 = 494,
        Joystick8Button5 = 495,
        Joystick8Button6 = 496,
        Joystick8Button7 = 497,
        Joystick8Button8 = 498,
        Joystick8Button9 = 499,
        Joystick8Button10 = 500,
        Joystick8Button11 = 501,
        Joystick8Button12 = 502,
        Joystick8Button13 = 503,
        Joystick8Button14 = 504,
        Joystick8Button15 = 505,
        Joystick8Button16 = 506,
        Joystick8Button17 = 507,
        Joystick8Button18 = 508,
        Joystick8Button19 = 509,
    }

    enum CursorMode
    {
        Auto = 0,
        ForceSoftware = 1,
    }

    enum CursorLockMode
    {
        None = 0,
        Locked = 1,
        Confined = 2,
    }

    class Cursor
    {
        static /*0x28229d4*/ void SetCursor(UnityEngine.Texture2D texture, UnityEngine.CursorMode cursorMode);
        static /*0x2822a2c*/ void SetCursor(UnityEngine.Texture2D texture, UnityEngine.Vector2 hotspot, UnityEngine.CursorMode cursorMode);
        static /*0x2822ad8*/ bool get_visible();
        static /*0x2822b00*/ void set_visible(bool value);
        static /*0x2822b3c*/ UnityEngine.CursorLockMode get_lockState();
        static /*0x2822b64*/ void set_lockState(UnityEngine.CursorLockMode value);
        static /*0x2822a84*/ void SetCursor_Injected(UnityEngine.Texture2D texture, ref UnityEngine.Vector2 hotspot, UnityEngine.CursorMode cursorMode);
        /*0x2822ba0*/ Cursor();
    }

    class DiagnosticSwitch
    {
        /*0x10*/ nint m_Ptr;

        /*0x2822ba8*/ DiagnosticSwitch();
        /*0x281b858*/ string get_name();
        /*0x2822bb0*/ string get_description();
        /*0x2822bec*/ string get_owningModule();
        /*0x2822c28*/ UnityEngine.DiagnosticSwitch.Flags get_flags();
        /*0x2822c64*/ object get_value();
        /*0x2822cdc*/ void set_value(object value);
        /*0x2822d78*/ object get_defaultValue();
        /*0x2822db4*/ object get_minValue();
        /*0x2822df0*/ object get_maxValue();
        /*0x2822e2c*/ object get_persistentValue();
        /*0x2822ea4*/ void set_persistentValue(object value);
        /*0x2822eec*/ UnityEngine.EnumInfo get_enumInfo();
        /*0x2822ca0*/ object GetScriptingValue();
        /*0x2822e68*/ object GetScriptingPersistentValue();
        /*0x2822d24*/ void SetScriptingValue(object value, bool setPersistent);
        /*0x2822f28*/ bool get_isSetToDefault();
        /*0x2822fa0*/ bool get_needsRestart();

        enum Flags
        {
            None = 0,
            CanChangeAfterEngineStart = 1,
        }
    }

    class Ping
    {
        /*0x10*/ nint m_Ptr;

        static /*0x28231e4*/ void Internal_Destroy(nint ptr);
        static /*0x2823074*/ nint Internal_Create(string address);
        /*0x2823024*/ Ping(string address);
        /*0x28230b0*/ void Finalize();
        /*0x2823144*/ void DestroyPing();
        /*0x2823220*/ bool get_isDone();
        /*0x28232b0*/ bool Internal_IsDone();
        /*0x28232ec*/ int get_time();
        /*0x2823328*/ string get_ip();
    }

    class HotReloadDeserializer
    {
        static /*0x2823364*/ void PrepareHotReload();
        static /*0x282338c*/ void FinishHotReload(System.Type[] typesToReset);
        static /*0x28233c8*/ UnityEngine.Object CreateEmptyAsset(System.Type type);
        static /*0x2823404*/ void DeserializeAsset(UnityEngine.Object asset, byte[] data);
        static /*0x2823448*/ void RemapInstanceIds(UnityEngine.Object editorAsset, int[] editorToPlayerInstanceIdMapKeys, int[] editorToPlayerInstanceIdMapValues);
        static /*0x282349c*/ void RemapInstanceIds(UnityEngine.Object editorAsset, System.Collections.Generic.Dictionary<int, int> editorToPlayerInstanceIdMap);
        static /*0x2823574*/ void FinalizeAssetCreation(UnityEngine.Object asset);
        static /*0x28235b0*/ UnityEngine.Object[] GetDependencies(UnityEngine.Object asset);
        static /*0x28235ec*/ int[] GetNullDependencies(UnityEngine.Object asset);
    }

    class Light : UnityEngine.Behaviour
    {
        /*0x18*/ int m_BakedIndex;

        static /*0x2823cf0*/ int get_pixelLightCount();
        static /*0x2823cf8*/ void set_pixelLightCount(int value);
        static /*0x2823d00*/ UnityEngine.Light[] GetLights(UnityEngine.LightType type, int layer);
        /*0x2824c84*/ Light();
        /*0x2823628*/ void Reset();
        /*0x2823664*/ UnityEngine.LightShadows get_shadows();
        /*0x28236a0*/ void set_shadows(UnityEngine.LightShadows value);
        /*0x28236e4*/ float get_shadowStrength();
        /*0x2823720*/ void set_shadowStrength(float value);
        /*0x282376c*/ UnityEngine.Rendering.LightShadowResolution get_shadowResolution();
        /*0x28237a8*/ void set_shadowResolution(UnityEngine.Rendering.LightShadowResolution value);
        /*0x28237ec*/ float get_shadowSoftness();
        /*0x28237f4*/ void set_shadowSoftness(float value);
        /*0x28237f8*/ float get_shadowSoftnessFade();
        /*0x2823800*/ void set_shadowSoftnessFade(float value);
        /*0x2823804*/ float[] get_layerShadowCullDistances();
        /*0x2823840*/ void set_layerShadowCullDistances(float[] value);
        /*0x2823884*/ float get_cookieSize();
        /*0x28238c0*/ void set_cookieSize(float value);
        /*0x282390c*/ UnityEngine.Texture get_cookie();
        /*0x2823948*/ void set_cookie(UnityEngine.Texture value);
        /*0x282398c*/ UnityEngine.LightRenderMode get_renderMode();
        /*0x28239c8*/ void set_renderMode(UnityEngine.LightRenderMode value);
        /*0x2823a0c*/ int get_bakedIndex();
        /*0x2823a14*/ void set_bakedIndex(int value);
        /*0x2823a1c*/ void AddCommandBuffer(UnityEngine.Rendering.LightEvent evt, UnityEngine.Rendering.CommandBuffer buffer);
        /*0x2823a74*/ void AddCommandBuffer(UnityEngine.Rendering.LightEvent evt, UnityEngine.Rendering.CommandBuffer buffer, UnityEngine.Rendering.ShadowMapPass shadowPassMask);
        /*0x2823ad0*/ void AddCommandBufferAsync(UnityEngine.Rendering.LightEvent evt, UnityEngine.Rendering.CommandBuffer buffer, UnityEngine.Rendering.ComputeQueueType queueType);
        /*0x2823b30*/ void AddCommandBufferAsync(UnityEngine.Rendering.LightEvent evt, UnityEngine.Rendering.CommandBuffer buffer, UnityEngine.Rendering.ShadowMapPass shadowPassMask, UnityEngine.Rendering.ComputeQueueType queueType);
        /*0x2823b9c*/ void RemoveCommandBuffer(UnityEngine.Rendering.LightEvent evt, UnityEngine.Rendering.CommandBuffer buffer);
        /*0x2823bf0*/ void RemoveCommandBuffers(UnityEngine.Rendering.LightEvent evt);
        /*0x2823c34*/ void RemoveAllCommandBuffers();
        /*0x2823c70*/ UnityEngine.Rendering.CommandBuffer[] GetCommandBuffers(UnityEngine.Rendering.LightEvent evt);
        /*0x2823cb4*/ int get_commandBufferCount();
        /*0x2823d44*/ float get_shadowConstantBias();
        /*0x2823d4c*/ void set_shadowConstantBias(float value);
        /*0x2823d50*/ float get_shadowObjectSizeBias();
        /*0x2823d58*/ void set_shadowObjectSizeBias(float value);
        /*0x2823d5c*/ bool get_attenuate();
        /*0x2823d64*/ void set_attenuate(bool value);
        /*0x2823d68*/ UnityEngine.LightType get_type();
        /*0x2823da4*/ void set_type(UnityEngine.LightType value);
        /*0x2823de8*/ UnityEngine.LightShape get_shape();
        /*0x2823e24*/ void set_shape(UnityEngine.LightShape value);
        /*0x2823e68*/ float get_spotAngle();
        /*0x2823ea4*/ void set_spotAngle(float value);
        /*0x2823ef0*/ float get_innerSpotAngle();
        /*0x2823f2c*/ void set_innerSpotAngle(float value);
        /*0x2823f78*/ UnityEngine.Color get_color();
        /*0x2824014*/ void set_color(UnityEngine.Color value);
        /*0x28240ac*/ float get_colorTemperature();
        /*0x28240e8*/ void set_colorTemperature(float value);
        /*0x2824134*/ bool get_useColorTemperature();
        /*0x2824170*/ void set_useColorTemperature(bool value);
        /*0x28241b4*/ float get_intensity();
        /*0x28241f0*/ void set_intensity(float value);
        /*0x282423c*/ float get_bounceIntensity();
        /*0x2824278*/ void set_bounceIntensity(float value);
        /*0x28242c4*/ bool get_useBoundingSphereOverride();
        /*0x2824300*/ void set_useBoundingSphereOverride(bool value);
        /*0x2824344*/ UnityEngine.Vector4 get_boundingSphereOverride();
        /*0x28243e0*/ void set_boundingSphereOverride(UnityEngine.Vector4 value);
        /*0x2824478*/ bool get_useViewFrustumForShadowCasterCull();
        /*0x28244b4*/ void set_useViewFrustumForShadowCasterCull(bool value);
        /*0x28244f8*/ int get_shadowCustomResolution();
        /*0x2824534*/ void set_shadowCustomResolution(int value);
        /*0x2824578*/ float get_shadowBias();
        /*0x28245b4*/ void set_shadowBias(float value);
        /*0x2824600*/ float get_shadowNormalBias();
        /*0x282463c*/ void set_shadowNormalBias(float value);
        /*0x2824688*/ float get_shadowNearPlane();
        /*0x28246c4*/ void set_shadowNearPlane(float value);
        /*0x2824710*/ bool get_useShadowMatrixOverride();
        /*0x282474c*/ void set_useShadowMatrixOverride(bool value);
        /*0x2824790*/ UnityEngine.Matrix4x4 get_shadowMatrixOverride();
        /*0x2824840*/ void set_shadowMatrixOverride(UnityEngine.Matrix4x4 value);
        /*0x28248c8*/ float get_range();
        /*0x2824904*/ void set_range(float value);
        /*0x2824950*/ UnityEngine.Flare get_flare();
        /*0x282498c*/ void set_flare(UnityEngine.Flare value);
        /*0x28249d0*/ UnityEngine.LightBakingOutput get_bakingOutput();
        /*0x2824a7c*/ void set_bakingOutput(UnityEngine.LightBakingOutput value);
        /*0x2824b04*/ int get_cullingMask();
        /*0x2824b40*/ void set_cullingMask(int value);
        /*0x2824b84*/ int get_renderingLayerMask();
        /*0x2824bc0*/ void set_renderingLayerMask(int value);
        /*0x2824c04*/ UnityEngine.LightShadowCasterMode get_lightShadowCasterMode();
        /*0x2824c40*/ void set_lightShadowCasterMode(UnityEngine.LightShadowCasterMode value);
        /*0x2823fd0*/ void get_color_Injected(ref UnityEngine.Color ret);
        /*0x2824068*/ void set_color_Injected(ref UnityEngine.Color value);
        /*0x282439c*/ void get_boundingSphereOverride_Injected(ref UnityEngine.Vector4 ret);
        /*0x2824434*/ void set_boundingSphereOverride_Injected(ref UnityEngine.Vector4 value);
        /*0x28247fc*/ void get_shadowMatrixOverride_Injected(ref UnityEngine.Matrix4x4 ret);
        /*0x2824884*/ void set_shadowMatrixOverride_Injected(ref UnityEngine.Matrix4x4 value);
        /*0x2824a38*/ void get_bakingOutput_Injected(ref UnityEngine.LightBakingOutput ret);
        /*0x2824ac0*/ void set_bakingOutput_Injected(ref UnityEngine.LightBakingOutput value);
    }

    class Renderer : UnityEngine.Component
    {
        /*0x2826938*/ Renderer();
        /*0x2824c8c*/ UnityEngine.Bounds get_bounds();
        /*0x2824d38*/ void set_bounds(UnityEngine.Bounds value);
        /*0x2824dc0*/ UnityEngine.Bounds get_localBounds();
        /*0x2824e6c*/ void set_localBounds(UnityEngine.Bounds value);
        /*0x2824ef4*/ void ResetBounds();
        /*0x2824f30*/ void ResetLocalBounds();
        /*0x2824f6c*/ void SetStaticLightmapST(UnityEngine.Vector4 st);
        /*0x2825004*/ UnityEngine.Material GetMaterial();
        /*0x2825040*/ UnityEngine.Material GetSharedMaterial();
        /*0x282507c*/ void SetMaterial(UnityEngine.Material m);
        /*0x28250c0*/ UnityEngine.Material[] GetMaterialArray();
        /*0x28250fc*/ void CopyMaterialArray(UnityEngine.Material[] m);
        /*0x2825140*/ void CopySharedMaterialArray(UnityEngine.Material[] m);
        /*0x2825184*/ void SetMaterialArray(UnityEngine.Material[] m);
        /*0x28251c8*/ void Internal_SetPropertyBlock(UnityEngine.MaterialPropertyBlock properties);
        /*0x282520c*/ void Internal_GetPropertyBlock(UnityEngine.MaterialPropertyBlock dest);
        /*0x2825250*/ void Internal_SetPropertyBlockMaterialIndex(UnityEngine.MaterialPropertyBlock properties, int materialIndex);
        /*0x28252a4*/ void Internal_GetPropertyBlockMaterialIndex(UnityEngine.MaterialPropertyBlock dest, int materialIndex);
        /*0x28252f8*/ bool HasPropertyBlock();
        /*0x2825334*/ void SetPropertyBlock(UnityEngine.MaterialPropertyBlock properties);
        /*0x2825378*/ void SetPropertyBlock(UnityEngine.MaterialPropertyBlock properties, int materialIndex);
        /*0x28253cc*/ void GetPropertyBlock(UnityEngine.MaterialPropertyBlock properties);
        /*0x2825410*/ void GetPropertyBlock(UnityEngine.MaterialPropertyBlock properties, int materialIndex);
        /*0x2825464*/ void GetClosestReflectionProbesInternal(object result);
        /*0x2820158*/ bool get_enabled();
        /*0x2820e98*/ void set_enabled(bool value);
        /*0x28254a8*/ bool get_isVisible();
        /*0x28254e4*/ UnityEngine.Rendering.ShadowCastingMode get_shadowCastingMode();
        /*0x2825520*/ void set_shadowCastingMode(UnityEngine.Rendering.ShadowCastingMode value);
        /*0x2825564*/ bool get_receiveShadows();
        /*0x28255a0*/ void set_receiveShadows(bool value);
        /*0x28255e4*/ bool get_forceRenderingOff();
        /*0x2825620*/ void set_forceRenderingOff(bool value);
        /*0x2825664*/ bool GetIsStaticShadowCaster();
        /*0x28256a0*/ void SetIsStaticShadowCaster(bool value);
        /*0x28256e4*/ bool get_staticShadowCaster();
        /*0x2825720*/ void set_staticShadowCaster(bool value);
        /*0x2825764*/ UnityEngine.MotionVectorGenerationMode get_motionVectorGenerationMode();
        /*0x28257a0*/ void set_motionVectorGenerationMode(UnityEngine.MotionVectorGenerationMode value);
        /*0x28257e4*/ UnityEngine.Rendering.LightProbeUsage get_lightProbeUsage();
        /*0x2825820*/ void set_lightProbeUsage(UnityEngine.Rendering.LightProbeUsage value);
        /*0x2825864*/ UnityEngine.Rendering.ReflectionProbeUsage get_reflectionProbeUsage();
        /*0x28258a0*/ void set_reflectionProbeUsage(UnityEngine.Rendering.ReflectionProbeUsage value);
        /*0x28258e4*/ uint get_renderingLayerMask();
        /*0x2825920*/ void set_renderingLayerMask(uint value);
        /*0x2825964*/ int get_rendererPriority();
        /*0x28259a0*/ void set_rendererPriority(int value);
        /*0x28259e4*/ UnityEngine.Experimental.Rendering.RayTracingMode get_rayTracingMode();
        /*0x2825a20*/ void set_rayTracingMode(UnityEngine.Experimental.Rendering.RayTracingMode value);
        /*0x2825a64*/ string get_sortingLayerName();
        /*0x2825aa0*/ void set_sortingLayerName(string value);
        /*0x2825ae4*/ int get_sortingLayerID();
        /*0x2825b20*/ void set_sortingLayerID(int value);
        /*0x2825b64*/ int get_sortingOrder();
        /*0x2825ba0*/ void set_sortingOrder(int value);
        /*0x2825be4*/ int get_sortingGroupID();
        /*0x2825c20*/ void set_sortingGroupID(int value);
        /*0x2825c64*/ int get_sortingGroupOrder();
        /*0x2825ca0*/ void set_sortingGroupOrder(int value);
        /*0x2825ce4*/ bool get_allowOcclusionWhenDynamic();
        /*0x2825d20*/ void set_allowOcclusionWhenDynamic(bool value);
        /*0x2825d64*/ UnityEngine.Transform get_staticBatchRootTransform();
        /*0x2820e54*/ void set_staticBatchRootTransform(UnityEngine.Transform value);
        /*0x2820194*/ int get_staticBatchIndex();
        /*0x2820e00*/ void SetStaticBatchInfo(int firstSubMesh, int subMeshCount);
        /*0x2825da0*/ bool get_isPartOfStaticBatch();
        /*0x2825ddc*/ UnityEngine.Matrix4x4 get_worldToLocalMatrix();
        /*0x2825e8c*/ UnityEngine.Matrix4x4 get_localToWorldMatrix();
        /*0x2825f3c*/ UnityEngine.GameObject get_lightProbeProxyVolumeOverride();
        /*0x2825f78*/ void set_lightProbeProxyVolumeOverride(UnityEngine.GameObject value);
        /*0x2825fbc*/ UnityEngine.Transform get_probeAnchor();
        /*0x2825ff8*/ void set_probeAnchor(UnityEngine.Transform value);
        /*0x282603c*/ int GetLightmapIndex(UnityEngineInternal.LightmapType lt);
        /*0x2826080*/ void SetLightmapIndex(int index, UnityEngineInternal.LightmapType lt);
        /*0x28260d4*/ UnityEngine.Vector4 GetLightmapST(UnityEngineInternal.LightmapType lt);
        /*0x2826188*/ void SetLightmapST(UnityEngine.Vector4 st, UnityEngineInternal.LightmapType lt);
        /*0x2821150*/ int get_lightmapIndex();
        /*0x2826238*/ void set_lightmapIndex(int value);
        /*0x2826280*/ int get_realtimeLightmapIndex();
        /*0x28262c0*/ void set_realtimeLightmapIndex(int value);
        /*0x2820d70*/ UnityEngine.Vector4 get_lightmapScaleOffset();
        /*0x2826308*/ void set_lightmapScaleOffset(UnityEngine.Vector4 value);
        /*0x2820d78*/ UnityEngine.Vector4 get_realtimeLightmapScaleOffset();
        /*0x282630c*/ void set_realtimeLightmapScaleOffset(UnityEngine.Vector4 value);
        /*0x2826314*/ int GetMaterialCount();
        /*0x2826350*/ UnityEngine.Material[] GetSharedMaterialArray();
        /*0x282638c*/ UnityEngine.Material[] get_materials();
        /*0x28263c8*/ void set_materials(UnityEngine.Material[] value);
        /*0x282640c*/ UnityEngine.Material get_material();
        /*0x2826448*/ void set_material(UnityEngine.Material value);
        /*0x2821070*/ UnityEngine.Material get_sharedMaterial();
        /*0x282648c*/ void set_sharedMaterial(UnityEngine.Material value);
        /*0x28201d0*/ UnityEngine.Material[] get_sharedMaterials();
        /*0x2820dbc*/ void set_sharedMaterials(UnityEngine.Material[] value);
        /*0x28264d0*/ void GetMaterials(System.Collections.Generic.List<UnityEngine.Material> m);
        /*0x2826604*/ void GetSharedMaterials(System.Collections.Generic.List<UnityEngine.Material> m);
        /*0x2826738*/ void GetClosestReflectionProbes(System.Collections.Generic.List<UnityEngine.Rendering.ReflectionProbeBlendInfo> result);
        /*0x282677c*/ bool get_castShadows();
        /*0x28267c4*/ void set_castShadows(bool value);
        /*0x2826810*/ bool get_motionVectors();
        /*0x2826858*/ void set_motionVectors(bool value);
        /*0x28268a4*/ bool get_useLightProbes();
        /*0x28268ec*/ void set_useLightProbes(bool value);
        /*0x2824cf4*/ void get_bounds_Injected(ref UnityEngine.Bounds ret);
        /*0x2824d7c*/ void set_bounds_Injected(ref UnityEngine.Bounds value);
        /*0x2824e28*/ void get_localBounds_Injected(ref UnityEngine.Bounds ret);
        /*0x2824eb0*/ void set_localBounds_Injected(ref UnityEngine.Bounds value);
        /*0x2824fc0*/ void SetStaticLightmapST_Injected(ref UnityEngine.Vector4 st);
        /*0x2825e48*/ void get_worldToLocalMatrix_Injected(ref UnityEngine.Matrix4x4 ret);
        /*0x2825ef8*/ void get_localToWorldMatrix_Injected(ref UnityEngine.Matrix4x4 ret);
        /*0x2826134*/ void GetLightmapST_Injected(UnityEngineInternal.LightmapType lt, ref UnityEngine.Vector4 ret);
        /*0x28261e4*/ void SetLightmapST_Injected(ref UnityEngine.Vector4 st, UnityEngineInternal.LightmapType lt);
    }

    class TrailRenderer : UnityEngine.Renderer
    {
        /*0x2827dd8*/ TrailRenderer();
        /*0x2826940*/ float get_time();
        /*0x282697c*/ void set_time(float value);
        /*0x28269c8*/ float get_startWidth();
        /*0x2826a04*/ void set_startWidth(float value);
        /*0x2826a50*/ float get_endWidth();
        /*0x2826a8c*/ void set_endWidth(float value);
        /*0x2826ad8*/ float get_widthMultiplier();
        /*0x2826b14*/ void set_widthMultiplier(float value);
        /*0x2826b60*/ bool get_autodestruct();
        /*0x2826b9c*/ void set_autodestruct(bool value);
        /*0x2826be0*/ bool get_emitting();
        /*0x2826c1c*/ void set_emitting(bool value);
        /*0x2826c60*/ int get_numCornerVertices();
        /*0x2826c9c*/ void set_numCornerVertices(int value);
        /*0x2826ce0*/ int get_numCapVertices();
        /*0x2826d1c*/ void set_numCapVertices(int value);
        /*0x2826d60*/ float get_minVertexDistance();
        /*0x2826d9c*/ void set_minVertexDistance(float value);
        /*0x2826de8*/ UnityEngine.Color get_startColor();
        /*0x2826e84*/ void set_startColor(UnityEngine.Color value);
        /*0x2826f1c*/ UnityEngine.Color get_endColor();
        /*0x2826fb8*/ void set_endColor(UnityEngine.Color value);
        /*0x2827050*/ int get_positionCount();
        /*0x282708c*/ void SetPosition(int index, UnityEngine.Vector3 position);
        /*0x282713c*/ UnityEngine.Vector3 GetPosition(int index);
        /*0x28271f4*/ float get_shadowBias();
        /*0x2827230*/ void set_shadowBias(float value);
        /*0x282727c*/ bool get_generateLightingData();
        /*0x28272b8*/ void set_generateLightingData(bool value);
        /*0x28272fc*/ UnityEngine.LineTextureMode get_textureMode();
        /*0x2827338*/ void set_textureMode(UnityEngine.LineTextureMode value);
        /*0x282737c*/ UnityEngine.LineAlignment get_alignment();
        /*0x28273b8*/ void set_alignment(UnityEngine.LineAlignment value);
        /*0x28273fc*/ void Clear();
        /*0x2827438*/ void BakeMesh(UnityEngine.Mesh mesh, bool useTransform);
        /*0x282749c*/ void BakeMesh(UnityEngine.Mesh mesh, UnityEngine.Camera camera, bool useTransform);
        /*0x28274f8*/ UnityEngine.AnimationCurve get_widthCurve();
        /*0x2827570*/ void set_widthCurve(UnityEngine.AnimationCurve value);
        /*0x28275f8*/ UnityEngine.Gradient get_colorGradient();
        /*0x2827670*/ void set_colorGradient(UnityEngine.Gradient value);
        /*0x2827534*/ UnityEngine.AnimationCurve GetWidthCurveCopy();
        /*0x28275b4*/ void SetWidthCurve(UnityEngine.AnimationCurve curve);
        /*0x2827634*/ UnityEngine.Gradient GetColorGradientCopy();
        /*0x28276b4*/ void SetColorGradient(UnityEngine.Gradient curve);
        /*0x28276f8*/ int GetPositions(UnityEngine.Vector3[] positions);
        /*0x282773c*/ void SetPositions(UnityEngine.Vector3[] positions);
        /*0x2827780*/ void AddPosition(UnityEngine.Vector3 position);
        /*0x2827818*/ void AddPositions(UnityEngine.Vector3[] positions);
        /*0x282785c*/ void SetPositions(Unity.Collections.NativeArray<UnityEngine.Vector3> positions);
        /*0x2827948*/ void SetPositions(Unity.Collections.NativeSlice<UnityEngine.Vector3> positions);
        /*0x2827a1c*/ int GetPositions(Unity.Collections.NativeArray<UnityEngine.Vector3> positions);
        /*0x2827b08*/ int GetPositions(Unity.Collections.NativeSlice<UnityEngine.Vector3> positions);
        /*0x2827bdc*/ void AddPositions(Unity.Collections.NativeArray<UnityEngine.Vector3> positions);
        /*0x2827cc8*/ void AddPositions(Unity.Collections.NativeSlice<UnityEngine.Vector3> positions);
        /*0x28278f4*/ void SetPositionsWithNativeContainer(nint positions, int count);
        /*0x2827ab4*/ int GetPositionsWithNativeContainer(nint positions, int length);
        /*0x2827c74*/ void AddPositionsWithNativeContainer(nint positions, int length);
        /*0x2827d9c*/ int get_numPositions();
        /*0x2826e40*/ void get_startColor_Injected(ref UnityEngine.Color ret);
        /*0x2826ed8*/ void set_startColor_Injected(ref UnityEngine.Color value);
        /*0x2826f74*/ void get_endColor_Injected(ref UnityEngine.Color ret);
        /*0x282700c*/ void set_endColor_Injected(ref UnityEngine.Color value);
        /*0x28270e8*/ void SetPosition_Injected(int index, ref UnityEngine.Vector3 position);
        /*0x28271a0*/ void GetPosition_Injected(int index, ref UnityEngine.Vector3 ret);
        /*0x28277d4*/ void AddPosition_Injected(ref UnityEngine.Vector3 position);
    }

    class LineRenderer : UnityEngine.Renderer
    {
        /*0x282906c*/ LineRenderer();
        /*0x2827de0*/ float get_startWidth();
        /*0x2827e1c*/ void set_startWidth(float value);
        /*0x2827e68*/ float get_endWidth();
        /*0x2827ea4*/ void set_endWidth(float value);
        /*0x2827ef0*/ float get_widthMultiplier();
        /*0x2827f2c*/ void set_widthMultiplier(float value);
        /*0x2827f78*/ int get_numCornerVertices();
        /*0x2827fb4*/ void set_numCornerVertices(int value);
        /*0x2827ff8*/ int get_numCapVertices();
        /*0x2828034*/ void set_numCapVertices(int value);
        /*0x2828078*/ bool get_useWorldSpace();
        /*0x28280b4*/ void set_useWorldSpace(bool value);
        /*0x28280f8*/ bool get_loop();
        /*0x2828134*/ void set_loop(bool value);
        /*0x2828178*/ UnityEngine.Color get_startColor();
        /*0x2828214*/ void set_startColor(UnityEngine.Color value);
        /*0x28282ac*/ UnityEngine.Color get_endColor();
        /*0x2828348*/ void set_endColor(UnityEngine.Color value);
        /*0x28283e0*/ int get_positionCount();
        /*0x282841c*/ void set_positionCount(int value);
        /*0x2828460*/ void SetPosition(int index, UnityEngine.Vector3 position);
        /*0x2828510*/ UnityEngine.Vector3 GetPosition(int index);
        /*0x28285c8*/ float get_shadowBias();
        /*0x2828604*/ void set_shadowBias(float value);
        /*0x2828650*/ bool get_generateLightingData();
        /*0x282868c*/ void set_generateLightingData(bool value);
        /*0x28286d0*/ UnityEngine.LineTextureMode get_textureMode();
        /*0x282870c*/ void set_textureMode(UnityEngine.LineTextureMode value);
        /*0x2828750*/ UnityEngine.LineAlignment get_alignment();
        /*0x282878c*/ void set_alignment(UnityEngine.LineAlignment value);
        /*0x28287d0*/ void Simplify(float tolerance);
        /*0x282881c*/ void BakeMesh(UnityEngine.Mesh mesh, bool useTransform);
        /*0x2828880*/ void BakeMesh(UnityEngine.Mesh mesh, UnityEngine.Camera camera, bool useTransform);
        /*0x28288dc*/ UnityEngine.AnimationCurve get_widthCurve();
        /*0x2828954*/ void set_widthCurve(UnityEngine.AnimationCurve value);
        /*0x28289dc*/ UnityEngine.Gradient get_colorGradient();
        /*0x2828a54*/ void set_colorGradient(UnityEngine.Gradient value);
        /*0x2828918*/ UnityEngine.AnimationCurve GetWidthCurveCopy();
        /*0x2828998*/ void SetWidthCurve(UnityEngine.AnimationCurve curve);
        /*0x2828a18*/ UnityEngine.Gradient GetColorGradientCopy();
        /*0x2828a98*/ void SetColorGradient(UnityEngine.Gradient curve);
        /*0x2828adc*/ int GetPositions(UnityEngine.Vector3[] positions);
        /*0x2828b20*/ void SetPositions(UnityEngine.Vector3[] positions);
        /*0x2828b64*/ void SetPositions(Unity.Collections.NativeArray<UnityEngine.Vector3> positions);
        /*0x2828c50*/ void SetPositions(Unity.Collections.NativeSlice<UnityEngine.Vector3> positions);
        /*0x2828d24*/ int GetPositions(Unity.Collections.NativeArray<UnityEngine.Vector3> positions);
        /*0x2828e10*/ int GetPositions(Unity.Collections.NativeSlice<UnityEngine.Vector3> positions);
        /*0x2828bfc*/ void SetPositionsWithNativeContainer(nint positions, int count);
        /*0x2828dbc*/ int GetPositionsWithNativeContainer(nint positions, int length);
        /*0x2828ee4*/ void SetWidth(float start, float end);
        /*0x2828f60*/ void SetColors(UnityEngine.Color start, UnityEngine.Color end);
        /*0x2828fa8*/ void SetVertexCount(int count);
        /*0x2828fec*/ int get_numPositions();
        /*0x2829028*/ void set_numPositions(int value);
        /*0x28281d0*/ void get_startColor_Injected(ref UnityEngine.Color ret);
        /*0x2828268*/ void set_startColor_Injected(ref UnityEngine.Color value);
        /*0x2828304*/ void get_endColor_Injected(ref UnityEngine.Color ret);
        /*0x282839c*/ void set_endColor_Injected(ref UnityEngine.Color value);
        /*0x28284bc*/ void SetPosition_Injected(int index, ref UnityEngine.Vector3 position);
        /*0x2828574*/ void GetPosition_Injected(int index, ref UnityEngine.Vector3 ret);
    }

    class SkinnedMeshRenderer : UnityEngine.Renderer
    {
        /*0x28297a8*/ SkinnedMeshRenderer();
        /*0x2829074*/ UnityEngine.SkinQuality get_quality();
        /*0x28290b0*/ void set_quality(UnityEngine.SkinQuality value);
        /*0x28290f4*/ bool get_updateWhenOffscreen();
        /*0x2829130*/ void set_updateWhenOffscreen(bool value);
        /*0x2829174*/ bool get_forceMatrixRecalculationPerRender();
        /*0x28291b0*/ void set_forceMatrixRecalculationPerRender(bool value);
        /*0x28291f4*/ UnityEngine.Transform get_rootBone();
        /*0x2829230*/ void set_rootBone(UnityEngine.Transform value);
        /*0x2829274*/ UnityEngine.Transform[] get_bones();
        /*0x28292b0*/ void set_bones(UnityEngine.Transform[] value);
        /*0x28292f4*/ UnityEngine.Mesh get_sharedMesh();
        /*0x2829330*/ void set_sharedMesh(UnityEngine.Mesh value);
        /*0x2829374*/ bool get_skinnedMotionVectors();
        /*0x28293b0*/ void set_skinnedMotionVectors(bool value);
        /*0x28293f4*/ float GetBlendShapeWeight(int index);
        /*0x2829438*/ void SetBlendShapeWeight(int index, float value);
        /*0x282948c*/ void BakeMesh(UnityEngine.Mesh mesh);
        /*0x28294d4*/ void BakeMesh(UnityEngine.Mesh mesh, bool useScale);
        /*0x2829528*/ UnityEngine.GraphicsBuffer GetVertexBuffer();
        /*0x2829628*/ UnityEngine.GraphicsBuffer GetPreviousVertexBuffer();
        /*0x28295ec*/ UnityEngine.GraphicsBuffer GetVertexBufferImpl();
        /*0x28296ec*/ UnityEngine.GraphicsBuffer GetPreviousVertexBufferImpl();
        /*0x2829728*/ UnityEngine.GraphicsBuffer.Target get_vertexBufferTarget();
        /*0x2829764*/ void set_vertexBufferTarget(UnityEngine.GraphicsBuffer.Target value);
    }

    class MeshRenderer : UnityEngine.Renderer
    {
        /*0x28297f0*/ MeshRenderer();
        /*0x28297b0*/ void DontStripMeshRenderer();
        /*0x2820248*/ UnityEngine.Mesh get_additionalVertexStreams();
        /*0x2820edc*/ void set_additionalVertexStreams(UnityEngine.Mesh value);
        /*0x2820284*/ UnityEngine.Mesh get_enlightenVertexStream();
        /*0x2820f20*/ void set_enlightenVertexStream(UnityEngine.Mesh value);
        /*0x28297b4*/ int get_subMeshStartIndex();
    }

    class RendererExtensions
    {
        static /*0x28297f8*/ void UpdateGIMaterialsForRenderer(UnityEngine.Renderer renderer);
        static /*0x2829834*/ void UpdateGIMaterials(UnityEngine.Renderer renderer);
    }

    class Mesh : UnityEngine.Object
    {
        static /*0x2829870*/ void Internal_Create(UnityEngine.Mesh mono);
        static /*0x282992c*/ UnityEngine.Mesh FromInstanceID(int id);
        static /*0x282b964*/ UnityEngine.Rendering.VertexAttribute GetUVChannel(int uvIndex);
        static /*0x282b9dc*/ int DefaultDimensionForChannel(UnityEngine.Rendering.VertexAttribute channel);
        static /*0x282e0f8*/ UnityEngine.Mesh.MeshDataArray AcquireReadOnlyMeshData(UnityEngine.Mesh mesh);
        static /*0x282e36c*/ UnityEngine.Mesh.MeshDataArray AcquireReadOnlyMeshData(UnityEngine.Mesh[] meshes);
        static /*0x282e740*/ UnityEngine.Mesh.MeshDataArray AcquireReadOnlyMeshData(System.Collections.Generic.List<UnityEngine.Mesh> meshes);
        static /*0x282e820*/ UnityEngine.Mesh.MeshDataArray AllocateWritableMeshData(int meshCount);
        static /*0x282e9b0*/ void ApplyAndDisposeWritableMeshData(UnityEngine.Mesh.MeshDataArray data, UnityEngine.Mesh mesh, UnityEngine.Rendering.MeshUpdateFlags flags);
        static /*0x282ec5c*/ void ApplyAndDisposeWritableMeshData(UnityEngine.Mesh.MeshDataArray data, UnityEngine.Mesh[] meshes, UnityEngine.Rendering.MeshUpdateFlags flags);
        static /*0x282f000*/ void ApplyAndDisposeWritableMeshData(UnityEngine.Mesh.MeshDataArray data, System.Collections.Generic.List<UnityEngine.Mesh> meshes, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x28298ac*/ Mesh();
        /*0x2829968*/ UnityEngine.Rendering.IndexFormat get_indexFormat();
        /*0x28299a4*/ void set_indexFormat(UnityEngine.Rendering.IndexFormat value);
        /*0x28299e8*/ uint GetTotalIndexCount();
        /*0x2829a24*/ void SetIndexBufferParams(int indexCount, UnityEngine.Rendering.IndexFormat format);
        /*0x2829a78*/ void InternalSetIndexBufferData(nint data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x2829afc*/ void InternalSetIndexBufferDataFromArray(System.Array data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x2829b80*/ void SetVertexBufferParamsFromPtr(int vertexCount, nint attributesPtr, int attributesCount);
        /*0x2829bdc*/ void SetVertexBufferParamsFromArray(int vertexCount, UnityEngine.Rendering.VertexAttributeDescriptor[] attributes);
        /*0x2829c30*/ void InternalSetVertexBufferData(int stream, nint data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x2829cbc*/ void InternalSetVertexBufferDataFromArray(int stream, System.Array data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x2829d48*/ System.Array GetVertexAttributesAlloc();
        /*0x2829d84*/ int GetVertexAttributesArray(UnityEngine.Rendering.VertexAttributeDescriptor[] attributes);
        /*0x2829dc8*/ int GetVertexAttributesList(System.Collections.Generic.List<UnityEngine.Rendering.VertexAttributeDescriptor> attributes);
        /*0x2829e0c*/ int GetVertexAttributeCountImpl();
        /*0x281fd70*/ UnityEngine.Rendering.VertexAttributeDescriptor GetVertexAttribute(int index);
        /*0x2829e9c*/ uint GetIndexStartImpl(int submesh);
        /*0x2829ee0*/ uint GetIndexCountImpl(int submesh);
        /*0x2829f24*/ uint GetTrianglesCountImpl(int submesh);
        /*0x2829f68*/ uint GetBaseVertexImpl(int submesh);
        /*0x2829fac*/ int[] GetTrianglesImpl(int submesh, bool applyBaseVertex);
        /*0x282a000*/ int[] GetIndicesImpl(int submesh, bool applyBaseVertex);
        /*0x282a054*/ void SetIndicesImpl(int submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex);
        /*0x282a0f0*/ void SetIndicesNativeArrayImpl(int submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, nint indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex);
        /*0x282a18c*/ void GetTrianglesNonAllocImpl(int[] values, int submesh, bool applyBaseVertex);
        /*0x282a1e8*/ void GetTrianglesNonAllocImpl16(ushort[] values, int submesh, bool applyBaseVertex);
        /*0x282a244*/ void GetIndicesNonAllocImpl(int[] values, int submesh, bool applyBaseVertex);
        /*0x282a2a0*/ void GetIndicesNonAllocImpl16(ushort[] values, int submesh, bool applyBaseVertex);
        /*0x282a2fc*/ void PrintErrorCantAccessChannel(UnityEngine.Rendering.VertexAttribute ch);
        /*0x282a340*/ bool HasVertexAttribute(UnityEngine.Rendering.VertexAttribute attr);
        /*0x282a384*/ int GetVertexAttributeDimension(UnityEngine.Rendering.VertexAttribute attr);
        /*0x282a3c8*/ UnityEngine.Rendering.VertexAttributeFormat GetVertexAttributeFormat(UnityEngine.Rendering.VertexAttribute attr);
        /*0x282a40c*/ int GetVertexAttributeStream(UnityEngine.Rendering.VertexAttribute attr);
        /*0x282a450*/ int GetVertexAttributeOffset(UnityEngine.Rendering.VertexAttribute attr);
        /*0x282a494*/ void SetArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, int dim, System.Array values, int arraySize, int valuesStart, int valuesCount, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282a530*/ void SetNativeArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, int dim, nint values, int arraySize, int valuesStart, int valuesCount, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282a5cc*/ System.Array GetAllocArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, int dim);
        /*0x282a628*/ void GetArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, int dim, System.Array values);
        /*0x282a694*/ int get_vertexBufferCount();
        /*0x282a6d0*/ int GetVertexBufferStride(int stream);
        /*0x282a714*/ nint GetNativeVertexBufferPtr(int index);
        /*0x282a758*/ nint GetNativeIndexBufferPtr();
        /*0x282a794*/ UnityEngine.GraphicsBuffer GetVertexBufferImpl(int index);
        /*0x282a7d8*/ UnityEngine.GraphicsBuffer GetIndexBufferImpl();
        /*0x282a814*/ UnityEngine.GraphicsBuffer.Target get_vertexBufferTarget();
        /*0x282a850*/ void set_vertexBufferTarget(UnityEngine.GraphicsBuffer.Target value);
        /*0x282a894*/ UnityEngine.GraphicsBuffer.Target get_indexBufferTarget();
        /*0x282a8d0*/ void set_indexBufferTarget(UnityEngine.GraphicsBuffer.Target value);
        /*0x282a914*/ int get_blendShapeCount();
        /*0x282a950*/ void ClearBlendShapes();
        /*0x282a98c*/ string GetBlendShapeName(int shapeIndex);
        /*0x282a9d0*/ int GetBlendShapeIndex(string blendShapeName);
        /*0x282aa14*/ int GetBlendShapeFrameCount(int shapeIndex);
        /*0x282aa58*/ float GetBlendShapeFrameWeight(int shapeIndex, int frameIndex);
        /*0x282aaac*/ void GetBlendShapeFrameVertices(int shapeIndex, int frameIndex, UnityEngine.Vector3[] deltaVertices, UnityEngine.Vector3[] deltaNormals, UnityEngine.Vector3[] deltaTangents);
        /*0x282ab20*/ void AddBlendShapeFrame(string shapeName, float frameWeight, UnityEngine.Vector3[] deltaVertices, UnityEngine.Vector3[] deltaNormals, UnityEngine.Vector3[] deltaTangents);
        /*0x282ab9c*/ bool HasBoneWeights();
        /*0x282abd8*/ UnityEngine.BoneWeight[] GetBoneWeightsImpl();
        /*0x282ac14*/ void SetBoneWeightsImpl(UnityEngine.BoneWeight[] weights);
        /*0x282ac58*/ void SetBoneWeights(Unity.Collections.NativeArray<byte> bonesPerVertex, Unity.Collections.NativeArray<UnityEngine.BoneWeight1> weights);
        /*0x282ad40*/ void InternalSetBoneWeights(nint bonesPerVertex, int bonesPerVertexSize, nint weights, int weightsSize);
        /*0x282adac*/ Unity.Collections.NativeArray<UnityEngine.BoneWeight1> GetAllBoneWeights();
        /*0x282aed8*/ Unity.Collections.NativeArray<byte> GetBonesPerVertex();
        /*0x282ae9c*/ int GetAllBoneWeightsArraySize();
        /*0x282ae60*/ nint GetAllBoneWeightsArray();
        /*0x282afbc*/ nint GetBonesPerVertexArray();
        /*0x282aff8*/ int GetBindposeCount();
        /*0x282b034*/ UnityEngine.Matrix4x4[] get_bindposes();
        /*0x282b070*/ void set_bindposes(UnityEngine.Matrix4x4[] value);
        /*0x282b0b4*/ void GetBoneWeightsNonAllocImpl(UnityEngine.BoneWeight[] values);
        /*0x282b0f8*/ void GetBindposesNonAllocImpl(UnityEngine.Matrix4x4[] values);
        /*0x282b13c*/ bool get_isReadable();
        /*0x282011c*/ bool get_canAccess();
        /*0x282020c*/ int get_vertexCount();
        /*0x2820d80*/ int get_subMeshCount();
        /*0x282b178*/ void set_subMeshCount(int value);
        /*0x282b1bc*/ void SetSubMesh(int index, UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282b274*/ UnityEngine.Rendering.SubMeshDescriptor GetSubMesh(int index);
        /*0x282b344*/ void SetAllSubMeshesAtOnceFromArray(UnityEngine.Rendering.SubMeshDescriptor[] desc, int start, int count, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282b3b0*/ void SetAllSubMeshesAtOnceFromNativeArray(nint desc, int start, int count, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282b41c*/ UnityEngine.Bounds get_bounds();
        /*0x282b4c8*/ void set_bounds(UnityEngine.Bounds value);
        /*0x282b550*/ void ClearImpl(bool keepVertexLayout);
        /*0x282b594*/ void RecalculateBoundsImpl(UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282b5d8*/ void RecalculateNormalsImpl(UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282b61c*/ void RecalculateTangentsImpl(UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282b660*/ void MarkDynamicImpl();
        /*0x282b69c*/ void MarkModified();
        /*0x282b6d8*/ void UploadMeshDataImpl(bool markNoLongerReadable);
        /*0x282b71c*/ UnityEngine.MeshTopology GetTopologyImpl(int submesh);
        /*0x282b760*/ void RecalculateUVDistributionMetricImpl(int uvSetIndex, float uvAreaThreshold);
        /*0x282b7b4*/ void RecalculateUVDistributionMetricsImpl(float uvAreaThreshold);
        /*0x282b800*/ float GetUVDistributionMetric(int uvSetIndex);
        /*0x282b844*/ void CombineMeshesImpl(UnityEngine.CombineInstance[] combine, bool mergeSubMeshes, bool useMatrices, bool hasLightmapData);
        /*0x282b8b0*/ void OptimizeImpl();
        /*0x282b8ec*/ void OptimizeIndexBuffersImpl();
        /*0x282b928*/ void OptimizeReorderVertexBufferImpl();
        T[] GetAllocArrayFromChannel<T>(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, int dim);
        T[] GetAllocArrayFromChannel<T>(UnityEngine.Rendering.VertexAttribute channel);
        /*0x282ba7c*/ void SetSizedArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, int dim, System.Array values, int valuesArrayLength, int valuesStart, int valuesCount, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282bd20*/ void SetSizedNativeArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, int dim, nint values, int valuesArrayLength, int valuesStart, int valuesCount, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetArrayForChannel<T>(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, int dim, T[] values, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetArrayForChannel<T>(UnityEngine.Rendering.VertexAttribute channel, T[] values, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetListForChannel<T>(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, int dim, System.Collections.Generic.List<T> values, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetListForChannel<T>(UnityEngine.Rendering.VertexAttribute channel, System.Collections.Generic.List<T> values, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        void GetListForChannel<T>(System.Collections.Generic.List<T> buffer, int capacity, UnityEngine.Rendering.VertexAttribute channel, int dim);
        void GetListForChannel<T>(System.Collections.Generic.List<T> buffer, int capacity, UnityEngine.Rendering.VertexAttribute channel, int dim, UnityEngine.Rendering.VertexAttributeFormat channelType);
        /*0x282bfbc*/ UnityEngine.Vector3[] get_vertices();
        /*0x282c008*/ void set_vertices(UnityEngine.Vector3[] value);
        /*0x282c068*/ UnityEngine.Vector3[] get_normals();
        /*0x282c0b4*/ void set_normals(UnityEngine.Vector3[] value);
        /*0x282c114*/ UnityEngine.Vector4[] get_tangents();
        /*0x282c160*/ void set_tangents(UnityEngine.Vector4[] value);
        /*0x282c1c0*/ UnityEngine.Vector2[] get_uv();
        /*0x282c20c*/ void set_uv(UnityEngine.Vector2[] value);
        /*0x282c26c*/ UnityEngine.Vector2[] get_uv2();
        /*0x282c2b8*/ void set_uv2(UnityEngine.Vector2[] value);
        /*0x282c318*/ UnityEngine.Vector2[] get_uv3();
        /*0x282c364*/ void set_uv3(UnityEngine.Vector2[] value);
        /*0x282c3c4*/ UnityEngine.Vector2[] get_uv4();
        /*0x282c410*/ void set_uv4(UnityEngine.Vector2[] value);
        /*0x282c470*/ UnityEngine.Vector2[] get_uv5();
        /*0x282c4bc*/ void set_uv5(UnityEngine.Vector2[] value);
        /*0x282c51c*/ UnityEngine.Vector2[] get_uv6();
        /*0x282c568*/ void set_uv6(UnityEngine.Vector2[] value);
        /*0x282c5c8*/ UnityEngine.Vector2[] get_uv7();
        /*0x282c614*/ void set_uv7(UnityEngine.Vector2[] value);
        /*0x282c674*/ UnityEngine.Vector2[] get_uv8();
        /*0x282c6c0*/ void set_uv8(UnityEngine.Vector2[] value);
        /*0x282c720*/ UnityEngine.Color[] get_colors();
        /*0x282c76c*/ void set_colors(UnityEngine.Color[] value);
        /*0x282c7cc*/ UnityEngine.Color32[] get_colors32();
        /*0x282c820*/ void set_colors32(UnityEngine.Color32[] value);
        /*0x282c888*/ void GetVertices(System.Collections.Generic.List<UnityEngine.Vector3> vertices);
        /*0x282c978*/ void SetVertices(System.Collections.Generic.List<UnityEngine.Vector3> inVertices);
        /*0x282c9e4*/ void SetVertices(System.Collections.Generic.List<UnityEngine.Vector3> inVertices, int start, int length);
        /*0x282c9ec*/ void SetVertices(System.Collections.Generic.List<UnityEngine.Vector3> inVertices, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282ca68*/ void SetVertices(UnityEngine.Vector3[] inVertices);
        /*0x282cad0*/ void SetVertices(UnityEngine.Vector3[] inVertices, int start, int length);
        /*0x282cb38*/ void SetVertices(UnityEngine.Vector3[] inVertices, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetVertices<T>(Unity.Collections.NativeArray<T> inVertices);
        void SetVertices<T>(Unity.Collections.NativeArray<T> inVertices, int start, int length);
        void SetVertices<T>(Unity.Collections.NativeArray<T> inVertices, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282cba4*/ void GetNormals(System.Collections.Generic.List<UnityEngine.Vector3> normals);
        /*0x282cc94*/ void SetNormals(System.Collections.Generic.List<UnityEngine.Vector3> inNormals);
        /*0x282cd00*/ void SetNormals(System.Collections.Generic.List<UnityEngine.Vector3> inNormals, int start, int length);
        /*0x282cd08*/ void SetNormals(System.Collections.Generic.List<UnityEngine.Vector3> inNormals, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282cd84*/ void SetNormals(UnityEngine.Vector3[] inNormals);
        /*0x282cdec*/ void SetNormals(UnityEngine.Vector3[] inNormals, int start, int length);
        /*0x282ce54*/ void SetNormals(UnityEngine.Vector3[] inNormals, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetNormals<T>(Unity.Collections.NativeArray<T> inNormals);
        void SetNormals<T>(Unity.Collections.NativeArray<T> inNormals, int start, int length);
        void SetNormals<T>(Unity.Collections.NativeArray<T> inNormals, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282cec0*/ void GetTangents(System.Collections.Generic.List<UnityEngine.Vector4> tangents);
        /*0x282cfb0*/ void SetTangents(System.Collections.Generic.List<UnityEngine.Vector4> inTangents);
        /*0x282d01c*/ void SetTangents(System.Collections.Generic.List<UnityEngine.Vector4> inTangents, int start, int length);
        /*0x282d024*/ void SetTangents(System.Collections.Generic.List<UnityEngine.Vector4> inTangents, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282d0a0*/ void SetTangents(UnityEngine.Vector4[] inTangents);
        /*0x282d108*/ void SetTangents(UnityEngine.Vector4[] inTangents, int start, int length);
        /*0x282d170*/ void SetTangents(UnityEngine.Vector4[] inTangents, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetTangents<T>(Unity.Collections.NativeArray<T> inTangents);
        void SetTangents<T>(Unity.Collections.NativeArray<T> inTangents, int start, int length);
        void SetTangents<T>(Unity.Collections.NativeArray<T> inTangents, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282d1dc*/ void GetColors(System.Collections.Generic.List<UnityEngine.Color> colors);
        /*0x282d2cc*/ void SetColors(System.Collections.Generic.List<UnityEngine.Color> inColors);
        /*0x282d338*/ void SetColors(System.Collections.Generic.List<UnityEngine.Color> inColors, int start, int length);
        /*0x282d340*/ void SetColors(System.Collections.Generic.List<UnityEngine.Color> inColors, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282d3bc*/ void SetColors(UnityEngine.Color[] inColors);
        /*0x282d424*/ void SetColors(UnityEngine.Color[] inColors, int start, int length);
        /*0x282d48c*/ void SetColors(UnityEngine.Color[] inColors, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282d4f8*/ void GetColors(System.Collections.Generic.List<UnityEngine.Color32> colors);
        /*0x282d5ec*/ void SetColors(System.Collections.Generic.List<UnityEngine.Color32> inColors);
        /*0x282d658*/ void SetColors(System.Collections.Generic.List<UnityEngine.Color32> inColors, int start, int length);
        /*0x282d660*/ void SetColors(System.Collections.Generic.List<UnityEngine.Color32> inColors, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282d6f4*/ void SetColors(UnityEngine.Color32[] inColors);
        /*0x282d75c*/ void SetColors(UnityEngine.Color32[] inColors, int start, int length);
        /*0x282d7c4*/ void SetColors(UnityEngine.Color32[] inColors, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetColors<T>(Unity.Collections.NativeArray<T> inColors);
        void SetColors<T>(Unity.Collections.NativeArray<T> inColors, int start, int length);
        void SetColors<T>(Unity.Collections.NativeArray<T> inColors, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetUvsImpl<T>(int uvIndex, int dim, System.Collections.Generic.List<T> uvs, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282d830*/ void SetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector2> uvs);
        /*0x282d8ac*/ void SetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector3> uvs);
        /*0x282d928*/ void SetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector4> uvs);
        /*0x282d8a4*/ void SetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector2> uvs, int start, int length);
        /*0x282d9a4*/ void SetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector2> uvs, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282d920*/ void SetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector3> uvs, int start, int length);
        /*0x282da30*/ void SetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector3> uvs, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282d99c*/ void SetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector4> uvs, int start, int length);
        /*0x282dabc*/ void SetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector4> uvs, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282db48*/ void SetUvsImpl(int uvIndex, int dim, System.Array uvs, int arrayStart, int arraySize, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282dc54*/ void SetUVs(int channel, UnityEngine.Vector2[] uvs);
        /*0x282dcb4*/ void SetUVs(int channel, UnityEngine.Vector3[] uvs);
        /*0x282dd14*/ void SetUVs(int channel, UnityEngine.Vector4[] uvs);
        /*0x282dc9c*/ void SetUVs(int channel, UnityEngine.Vector2[] uvs, int start, int length);
        /*0x282dd74*/ void SetUVs(int channel, UnityEngine.Vector2[] uvs, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282dcfc*/ void SetUVs(int channel, UnityEngine.Vector3[] uvs, int start, int length);
        /*0x282dd8c*/ void SetUVs(int channel, UnityEngine.Vector3[] uvs, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282dd5c*/ void SetUVs(int channel, UnityEngine.Vector4[] uvs, int start, int length);
        /*0x282dda4*/ void SetUVs(int channel, UnityEngine.Vector4[] uvs, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetUVs<T>(int channel, Unity.Collections.NativeArray<T> uvs);
        void SetUVs<T>(int channel, Unity.Collections.NativeArray<T> uvs, int start, int length);
        void SetUVs<T>(int channel, Unity.Collections.NativeArray<T> uvs, int start, int length, UnityEngine.Rendering.MeshUpdateFlags flags);
        void GetUVsImpl<T>(int uvIndex, System.Collections.Generic.List<T> uvs, int dim);
        /*0x282ddbc*/ void GetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector2> uvs);
        /*0x282de20*/ void GetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector3> uvs);
        /*0x282de84*/ void GetUVs(int channel, System.Collections.Generic.List<UnityEngine.Vector4> uvs);
        /*0x281fd34*/ int get_vertexAttributeCount();
        /*0x282dee8*/ UnityEngine.Rendering.VertexAttributeDescriptor[] GetVertexAttributes();
        /*0x282df74*/ int GetVertexAttributes(UnityEngine.Rendering.VertexAttributeDescriptor[] attributes);
        /*0x282dfb8*/ int GetVertexAttributes(System.Collections.Generic.List<UnityEngine.Rendering.VertexAttributeDescriptor> attributes);
        /*0x282dffc*/ void SetVertexBufferParams(int vertexCount, UnityEngine.Rendering.VertexAttributeDescriptor[] attributes);
        /*0x282e050*/ void SetVertexBufferParams(int vertexCount, Unity.Collections.NativeArray<UnityEngine.Rendering.VertexAttributeDescriptor> attributes);
        void SetVertexBufferData<T>(Unity.Collections.NativeArray<T> data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetVertexBufferData<T>(T[] data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetVertexBufferData<T>(System.Collections.Generic.List<T> data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282f1bc*/ UnityEngine.GraphicsBuffer GetVertexBuffer(int index);
        /*0x282f290*/ UnityEngine.GraphicsBuffer GetIndexBuffer();
        /*0x282f354*/ void PrintErrorCantAccessIndices();
        /*0x282f3ec*/ bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles);
        /*0x282f52c*/ bool CheckCanAccessSubmeshTriangles(int submesh);
        /*0x282f534*/ bool CheckCanAccessSubmeshIndices(int submesh);
        /*0x282f53c*/ int[] get_triangles();
        /*0x282f5f0*/ void set_triangles(int[] value);
        /*0x282f738*/ int[] GetTriangles(int submesh);
        /*0x282f740*/ int[] GetTriangles(int submesh, bool applyBaseVertex);
        /*0x282f7e8*/ void GetTriangles(System.Collections.Generic.List<int> triangles, int submesh);
        /*0x282f7f0*/ void GetTriangles(System.Collections.Generic.List<int> triangles, int submesh, bool applyBaseVertex);
        /*0x282f9ac*/ void GetTriangles(System.Collections.Generic.List<ushort> triangles, int submesh, bool applyBaseVertex);
        /*0x282fb68*/ int[] GetIndices(int submesh);
        /*0x282fb70*/ int[] GetIndices(int submesh, bool applyBaseVertex);
        /*0x282fc18*/ void GetIndices(System.Collections.Generic.List<int> indices, int submesh);
        /*0x282fc20*/ void GetIndices(System.Collections.Generic.List<int> indices, int submesh, bool applyBaseVertex);
        /*0x282fe80*/ void GetIndices(System.Collections.Generic.List<ushort> indices, int submesh, bool applyBaseVertex);
        void SetIndexBufferData<T>(Unity.Collections.NativeArray<T> data, int dataStart, int meshBufferStart, int count, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetIndexBufferData<T>(T[] data, int dataStart, int meshBufferStart, int count, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetIndexBufferData<T>(System.Collections.Generic.List<T> data, int dataStart, int meshBufferStart, int count, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x283001c*/ uint GetIndexStart(int submesh);
        /*0x282fdbc*/ uint GetIndexCount(int submesh);
        /*0x28300e0*/ uint GetBaseVertex(int submesh);
        /*0x28301a4*/ void CheckIndicesArrayRange(int valuesLength, int start, int length);
        /*0x282f698*/ void SetTrianglesImpl(int submesh, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array triangles, int trianglesArrayLength, int start, int length, bool calculateBounds, int baseVertex);
        /*0x2830350*/ void SetTriangles(int[] triangles, int submesh);
        /*0x28303f0*/ void SetTriangles(int[] triangles, int submesh, bool calculateBounds);
        /*0x2830398*/ void SetTriangles(int[] triangles, int submesh, bool calculateBounds, int baseVertex);
        /*0x2830444*/ void SetTriangles(int[] triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
        /*0x28304d0*/ void SetTriangles(ushort[] triangles, int submesh, bool calculateBounds, int baseVertex);
        /*0x2830528*/ void SetTriangles(ushort[] triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
        /*0x28305b4*/ void SetTriangles(System.Collections.Generic.List<int> triangles, int submesh);
        /*0x2830648*/ void SetTriangles(System.Collections.Generic.List<int> triangles, int submesh, bool calculateBounds);
        /*0x28305c0*/ void SetTriangles(System.Collections.Generic.List<int> triangles, int submesh, bool calculateBounds, int baseVertex);
        /*0x2830654*/ void SetTriangles(System.Collections.Generic.List<int> triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
        /*0x2830724*/ void SetTriangles(System.Collections.Generic.List<ushort> triangles, int submesh, bool calculateBounds, int baseVertex);
        /*0x28307ac*/ void SetTriangles(System.Collections.Generic.List<ushort> triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
        /*0x283087c*/ void SetIndices(int[] indices, UnityEngine.MeshTopology topology, int submesh);
        /*0x2830954*/ void SetIndices(int[] indices, UnityEngine.MeshTopology topology, int submesh, bool calculateBounds);
        /*0x28308e0*/ void SetIndices(int[] indices, UnityEngine.MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
        /*0x28309bc*/ void SetIndices(int[] indices, int indicesStart, int indicesLength, UnityEngine.MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
        /*0x2830a90*/ void SetIndices(ushort[] indices, UnityEngine.MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
        /*0x2830b04*/ void SetIndices(ushort[] indices, int indicesStart, int indicesLength, UnityEngine.MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
        void SetIndices<T>(Unity.Collections.NativeArray<T> indices, UnityEngine.MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
        void SetIndices<T>(Unity.Collections.NativeArray<T> indices, int indicesStart, int indicesLength, UnityEngine.MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
        /*0x2830bd8*/ void SetIndices(System.Collections.Generic.List<int> indices, UnityEngine.MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
        /*0x2830c7c*/ void SetIndices(System.Collections.Generic.List<int> indices, int indicesStart, int indicesLength, UnityEngine.MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
        /*0x2830d8c*/ void SetIndices(System.Collections.Generic.List<ushort> indices, UnityEngine.MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
        /*0x2830e30*/ void SetIndices(System.Collections.Generic.List<ushort> indices, int indicesStart, int indicesLength, UnityEngine.MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
        /*0x2830f40*/ void SetSubMeshes(UnityEngine.Rendering.SubMeshDescriptor[] desc, int start, int count, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x283121c*/ void SetSubMeshes(UnityEngine.Rendering.SubMeshDescriptor[] desc, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x2831248*/ void SetSubMeshes(System.Collections.Generic.List<UnityEngine.Rendering.SubMeshDescriptor> desc, int start, int count, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x28312c8*/ void SetSubMeshes(System.Collections.Generic.List<UnityEngine.Rendering.SubMeshDescriptor> desc, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetSubMeshes<T>(Unity.Collections.NativeArray<T> desc, int start, int count, UnityEngine.Rendering.MeshUpdateFlags flags);
        void SetSubMeshes<T>(Unity.Collections.NativeArray<T> desc, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x2831358*/ void GetBindposes(System.Collections.Generic.List<UnityEngine.Matrix4x4> bindposes);
        /*0x283148c*/ void GetBoneWeights(System.Collections.Generic.List<UnityEngine.BoneWeight> boneWeights);
        /*0x28315ec*/ UnityEngine.BoneWeight[] get_boneWeights();
        /*0x2831628*/ void set_boneWeights(UnityEngine.BoneWeight[] value);
        /*0x283166c*/ void Clear(bool keepVertexLayout);
        /*0x28316b0*/ void Clear();
        /*0x28316f0*/ void RecalculateBounds();
        /*0x28317ec*/ void RecalculateNormals();
        /*0x28318e8*/ void RecalculateTangents();
        /*0x28316f8*/ void RecalculateBounds(UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x28317f4*/ void RecalculateNormals(UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x28318f0*/ void RecalculateTangents(UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x28319e4*/ void RecalculateUVDistributionMetric(int uvSetIndex, float uvAreaThreshold);
        /*0x2831aec*/ void RecalculateUVDistributionMetrics(float uvAreaThreshold);
        /*0x2831bec*/ void MarkDynamic();
        /*0x2831c60*/ void UploadMeshData(bool markNoLongerReadable);
        /*0x2831cdc*/ void Optimize();
        /*0x2831dc8*/ void OptimizeIndexBuffers();
        /*0x2831eb4*/ void OptimizeReorderVertexBuffer();
        /*0x2831fa0*/ UnityEngine.MeshTopology GetTopology(int submesh);
        /*0x2832080*/ void CombineMeshes(UnityEngine.CombineInstance[] combine, bool mergeSubMeshes, bool useMatrices, bool hasLightmapData);
        /*0x28320ec*/ void CombineMeshes(UnityEngine.CombineInstance[] combine, bool mergeSubMeshes, bool useMatrices);
        /*0x283214c*/ void CombineMeshes(UnityEngine.CombineInstance[] combine, bool mergeSubMeshes);
        /*0x28321a8*/ void CombineMeshes(UnityEngine.CombineInstance[] combine);
        /*0x2829e48*/ void GetVertexAttribute_Injected(int index, ref UnityEngine.Rendering.VertexAttributeDescriptor ret);
        /*0x282b218*/ void SetSubMesh_Injected(int index, ref UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags);
        /*0x282b2f0*/ void GetSubMesh_Injected(int index, ref UnityEngine.Rendering.SubMeshDescriptor ret);
        /*0x282b484*/ void get_bounds_Injected(ref UnityEngine.Bounds ret);
        /*0x282b50c*/ void set_bounds_Injected(ref UnityEngine.Bounds value);

        struct MeshDataArray : System.IDisposable
        {
            /*0x10*/ nint* m_Ptrs;
            /*0x18*/ int m_Length;

            static /*0x2832384*/ void AcquireReadOnlyMeshData(UnityEngine.Mesh mesh, nint* datas);
            static /*0x28323c8*/ void AcquireReadOnlyMeshDatas(UnityEngine.Mesh[] meshes, nint* datas, int count);
            static /*0x2832290*/ void ReleaseMeshDatas(nint* datas, int count);
            static /*0x283241c*/ void CreateNewMeshDatas(nint* datas, int count);
            static /*0x2832328*/ void ApplyToMeshesImpl(UnityEngine.Mesh[] meshes, nint* datas, int count, UnityEngine.Rendering.MeshUpdateFlags flags);
            static /*0x28322d4*/ void ApplyToMeshImpl(UnityEngine.Mesh mesh, nint data, UnityEngine.Rendering.MeshUpdateFlags flags);
            /*0x282e124*/ MeshDataArray(UnityEngine.Mesh mesh, bool checkReadWrite);
            /*0x282e408*/ MeshDataArray(UnityEngine.Mesh[] meshes, int meshesCount, bool checkReadWrite);
            /*0x282e848*/ MeshDataArray(int meshesCount);
            /*0x28321f8*/ int get_Length();
            /*0x2832200*/ void Dispose();
            /*0x282eb38*/ void ApplyToMeshAndDispose(UnityEngine.Mesh mesh, UnityEngine.Rendering.MeshUpdateFlags flags);
            /*0x282edbc*/ void ApplyToMeshesAndDispose(UnityEngine.Mesh[] meshes, UnityEngine.Rendering.MeshUpdateFlags flags);
        }

        struct MeshData
        {
            /*0x10*/ nint m_Ptr;
        }
    }

    class Texture : UnityEngine.Object
    {
        static /*0x0*/ int GenerateAllMips;

        static /*0x2833784*/ Texture();
        static /*0x28324b8*/ int get_masterTextureLimit();
        static /*0x28324e0*/ void set_masterTextureLimit(int value);
        static /*0x2832558*/ UnityEngine.AnisotropicFiltering get_anisotropicFiltering();
        static /*0x2832580*/ void set_anisotropicFiltering(UnityEngine.AnisotropicFiltering value);
        static /*0x28325bc*/ void SetGlobalAnisotropicFilteringLimits(int forcedMin, int globalMax);
        static /*0x2832e50*/ ulong get_totalTextureMemory();
        static /*0x2832e78*/ ulong get_desiredTextureMemory();
        static /*0x2832ea0*/ ulong get_targetTextureMemory();
        static /*0x2832ec8*/ ulong get_currentTextureMemory();
        static /*0x2832ef0*/ ulong get_nonStreamingTextureMemory();
        static /*0x2832f18*/ ulong get_streamingMipmapUploadCount();
        static /*0x2832f40*/ ulong get_streamingRendererCount();
        static /*0x2832f68*/ ulong get_streamingTextureCount();
        static /*0x2832f90*/ ulong get_nonStreamingTextureCount();
        static /*0x2832fb8*/ ulong get_streamingTexturePendingLoadCount();
        static /*0x2832fe0*/ ulong get_streamingTextureLoadingCount();
        static /*0x2833008*/ void SetStreamingTextureMaterialDebugProperties();
        static /*0x2833030*/ bool get_streamingTextureForceLoadAll();
        static /*0x2833058*/ void set_streamingTextureForceLoadAll(bool value);
        static /*0x2833094*/ bool get_streamingTextureDiscardUnusedMips();
        static /*0x28330bc*/ void set_streamingTextureDiscardUnusedMips(bool value);
        static /*0x28330f8*/ bool get_allowThreadedTextureCreation();
        static /*0x2833120*/ void set_allowThreadedTextureCreation(bool value);
        /*0x2832460*/ Texture();
        /*0x283251c*/ int get_mipmapCount();
        /*0x2832600*/ UnityEngine.Experimental.Rendering.GraphicsFormat get_graphicsFormat();
        /*0x2832658*/ int GetDataWidth();
        /*0x2832694*/ int GetDataHeight();
        /*0x28326d0*/ UnityEngine.Rendering.TextureDimension GetDimension();
        /*0x283270c*/ int get_width();
        /*0x2832748*/ void set_width(int value);
        /*0x2832788*/ int get_height();
        /*0x28327c4*/ void set_height(int value);
        /*0x2832804*/ UnityEngine.Rendering.TextureDimension get_dimension();
        /*0x2832840*/ void set_dimension(UnityEngine.Rendering.TextureDimension value);
        /*0x2832880*/ bool get_isReadable();
        /*0x28328bc*/ UnityEngine.TextureWrapMode get_wrapMode();
        /*0x28328f8*/ void set_wrapMode(UnityEngine.TextureWrapMode value);
        /*0x283293c*/ UnityEngine.TextureWrapMode get_wrapModeU();
        /*0x2832978*/ void set_wrapModeU(UnityEngine.TextureWrapMode value);
        /*0x28329bc*/ UnityEngine.TextureWrapMode get_wrapModeV();
        /*0x28329f8*/ void set_wrapModeV(UnityEngine.TextureWrapMode value);
        /*0x2832a3c*/ UnityEngine.TextureWrapMode get_wrapModeW();
        /*0x2832a78*/ void set_wrapModeW(UnityEngine.TextureWrapMode value);
        /*0x2832abc*/ UnityEngine.FilterMode get_filterMode();
        /*0x2832af8*/ void set_filterMode(UnityEngine.FilterMode value);
        /*0x2832b3c*/ int get_anisoLevel();
        /*0x2832b78*/ void set_anisoLevel(int value);
        /*0x2832bbc*/ float get_mipMapBias();
        /*0x2832bf8*/ void set_mipMapBias(float value);
        /*0x2832c44*/ UnityEngine.Vector2 get_texelSize();
        /*0x2832cd4*/ nint GetNativeTexturePtr();
        /*0x2832d10*/ int GetNativeTextureID();
        /*0x2832d54*/ uint get_updateCount();
        /*0x2832d90*/ void IncrementUpdateCount();
        /*0x2832dcc*/ int Internal_GetActiveTextureColorSpace();
        /*0x2832e08*/ UnityEngine.ColorSpace get_activeTextureColorSpace();
        /*0x283315c*/ ulong GetPixelDataSize(int mipLevel, int element);
        /*0x28331b0*/ ulong GetPixelDataOffset(int mipLevel, int element);
        /*0x2833204*/ bool ValidateFormat(UnityEngine.RenderTextureFormat format);
        /*0x28332f4*/ bool ValidateFormat(UnityEngine.TextureFormat format);
        /*0x28334b4*/ bool ValidateFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage);
        /*0x283366c*/ UnityEngine.UnityException CreateNonReadableException(UnityEngine.Texture t);
        /*0x2833710*/ UnityEngine.UnityException CreateNativeArrayLengthOverflowException();
        /*0x2832c90*/ void get_texelSize_Injected(ref UnityEngine.Vector2 ret);
    }

    class Texture2D : UnityEngine.Texture
    {
        static int streamingMipmapsPriorityMin = -128;
        static int streamingMipmapsPriorityMax = 127;

        static /*0x283388c*/ UnityEngine.Texture2D get_whiteTexture();
        static /*0x28338b4*/ UnityEngine.Texture2D get_blackTexture();
        static /*0x28338dc*/ UnityEngine.Texture2D get_redTexture();
        static /*0x2833904*/ UnityEngine.Texture2D get_grayTexture();
        static /*0x283392c*/ UnityEngine.Texture2D get_linearGrayTexture();
        static /*0x2833954*/ UnityEngine.Texture2D get_normalTexture();
        static /*0x28339c0*/ bool Internal_CreateImpl(UnityEngine.Texture2D mono, int w, int h, int mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, nint nativeTex);
        static /*0x2833a44*/ void Internal_Create(UnityEngine.Texture2D mono, int w, int h, int mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, nint nativeTex);
        static /*0x2834304*/ void GenerateAtlasImpl(UnityEngine.Vector2[] sizes, int padding, int atlasSize, UnityEngine.Rect[] rect);
        static /*0x283532c*/ UnityEngine.Texture2D CreateExternalTexture(int width, int height, UnityEngine.TextureFormat format, bool mipChain, bool linear, nint nativeTex);
        static /*0x2835f04*/ bool GenerateAtlas(UnityEngine.Vector2[] sizes, int padding, int atlasSize, System.Collections.Generic.List<UnityEngine.Rect> results);
        /*0x2834d3c*/ Texture2D(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, int mipCount, nint nativeTex);
        /*0x2834e10*/ Texture2D(int width, int height, UnityEngine.Experimental.Rendering.DefaultFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2834e5c*/ Texture2D(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2834f0c*/ Texture2D(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format, int mipCount, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2834f9c*/ Texture2D(int width, int height, UnityEngine.TextureFormat textureFormat, int mipCount, bool linear, nint nativeTex);
        /*0x28350d8*/ Texture2D(int width, int height, UnityEngine.TextureFormat textureFormat, int mipCount, bool linear);
        /*0x2835168*/ Texture2D(int width, int height, UnityEngine.TextureFormat textureFormat, bool mipChain, bool linear);
        /*0x2835200*/ Texture2D(int width, int height, UnityEngine.TextureFormat textureFormat, bool mipChain);
        /*0x283528c*/ Texture2D(int width, int height);
        /*0x28337d0*/ UnityEngine.TextureFormat get_format();
        /*0x283380c*/ bool get_ignoreMipmapLimit();
        /*0x2833848*/ void set_ignoreMipmapLimit(bool value);
        /*0x283397c*/ void Compress(bool highQuality);
        /*0x2833b1c*/ bool get_isReadable();
        /*0x2833b58*/ bool get_vtOnly();
        /*0x2833b94*/ void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable);
        /*0x2833be8*/ bool ReinitializeImpl(int width, int height);
        /*0x2833c3c*/ void SetPixelImpl(int image, int mip, int x, int y, UnityEngine.Color color);
        /*0x2833d34*/ UnityEngine.Color GetPixelImpl(int image, int mip, int x, int y);
        /*0x2833e30*/ UnityEngine.Color GetPixelBilinearImpl(int image, int mip, float u, float v);
        /*0x2833f2c*/ bool ReinitializeWithFormatImpl(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format, bool hasMipMap);
        /*0x2833f98*/ void ReadPixelsImpl(UnityEngine.Rect source, int destX, int destY, bool recalculateMipMaps);
        /*0x2834078*/ void SetPixelsImpl(int x, int y, int w, int h, UnityEngine.Color[] pixel, int miplevel, int frame);
        /*0x2834104*/ bool LoadRawTextureDataImpl(nint data, ulong size);
        /*0x2834158*/ bool LoadRawTextureDataImplArray(byte[] data);
        /*0x283419c*/ bool SetPixelDataImplArray(System.Array data, int mipLevel, int elementSize, int dataArraySize, int sourceDataStartIndex);
        /*0x2834210*/ bool SetPixelDataImpl(nint data, int mipLevel, int elementSize, int dataArraySize, int sourceDataStartIndex);
        /*0x2834284*/ nint GetWritableImageData(int frame);
        /*0x28342c8*/ ulong GetRawImageDataSize();
        /*0x2834360*/ bool get_isPreProcessed();
        /*0x283439c*/ bool get_streamingMipmaps();
        /*0x28343d8*/ int get_streamingMipmapsPriority();
        /*0x2834414*/ int get_requestedMipmapLevel();
        /*0x2834450*/ void set_requestedMipmapLevel(int value);
        /*0x2834494*/ int get_minimumMipmapLevel();
        /*0x28344d0*/ void set_minimumMipmapLevel(int value);
        /*0x2834514*/ bool get_loadAllMips();
        /*0x2834550*/ void set_loadAllMips(bool value);
        /*0x2834594*/ int get_calculatedMipmapLevel();
        /*0x28345d0*/ int get_desiredMipmapLevel();
        /*0x283460c*/ int get_loadingMipmapLevel();
        /*0x2834648*/ int get_loadedMipmapLevel();
        /*0x2834684*/ void ClearRequestedMipmapLevel();
        /*0x28346c0*/ bool IsRequestedMipmapLevelLoaded();
        /*0x28346fc*/ void ClearMinimumMipmapLevel();
        /*0x2834738*/ void UpdateExternalTexture(nint nativeTex);
        /*0x283477c*/ void SetAllPixels32(UnityEngine.Color32[] colors, int miplevel);
        /*0x28347d0*/ void SetBlockOfPixels32(int x, int y, int blockWidth, int blockHeight, UnityEngine.Color32[] colors, int miplevel);
        /*0x2834854*/ byte[] GetRawTextureData();
        /*0x2834890*/ UnityEngine.Color[] GetPixels(int x, int y, int blockWidth, int blockHeight, int miplevel);
        /*0x2834904*/ UnityEngine.Color[] GetPixels(int x, int y, int blockWidth, int blockHeight);
        /*0x2834974*/ UnityEngine.Color32[] GetPixels32(int miplevel);
        /*0x28349b8*/ UnityEngine.Color32[] GetPixels32();
        /*0x28349f8*/ UnityEngine.Rect[] PackTextures(UnityEngine.Texture2D[] textures, int padding, int maximumAtlasSize, bool makeNoLongerReadable);
        /*0x2834a64*/ UnityEngine.Rect[] PackTextures(UnityEngine.Texture2D[] textures, int padding, int maximumAtlasSize);
        /*0x2834ac4*/ UnityEngine.Rect[] PackTextures(UnityEngine.Texture2D[] textures, int padding);
        /*0x2834b20*/ bool ValidateFormat(UnityEngine.TextureFormat format, int width, int height);
        /*0x2834c08*/ bool ValidateFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, int width, int height);
        /*0x2835450*/ void SetPixel(int x, int y, UnityEngine.Color color);
        /*0x28354ec*/ void SetPixel(int x, int y, UnityEngine.Color color, int mipLevel);
        /*0x2835594*/ void SetPixels(int x, int y, int blockWidth, int blockHeight, UnityEngine.Color[] colors, int miplevel);
        /*0x2835654*/ void SetPixels(int x, int y, int blockWidth, int blockHeight, UnityEngine.Color[] colors);
        /*0x283565c*/ void SetPixels(UnityEngine.Color[] colors, int miplevel);
        /*0x28356d4*/ void SetPixels(UnityEngine.Color[] colors);
        /*0x2835730*/ UnityEngine.Color GetPixel(int x, int y);
        /*0x283579c*/ UnityEngine.Color GetPixel(int x, int y, int mipLevel);
        /*0x2835814*/ UnityEngine.Color GetPixelBilinear(float u, float v);
        /*0x283587c*/ UnityEngine.Color GetPixelBilinear(float u, float v, int mipLevel);
        /*0x28358f0*/ void LoadRawTextureData(nint data, int size);
        /*0x2835a5c*/ void LoadRawTextureData(byte[] data);
        void LoadRawTextureData<T>(Unity.Collections.NativeArray<T> data);
        void SetPixelData<T>(T[] data, int mipLevel, int sourceDataStartIndex);
        void SetPixelData<T>(Unity.Collections.NativeArray<T> data, int mipLevel, int sourceDataStartIndex);
        Unity.Collections.NativeArray<T> GetPixelData<T>(int mipLevel);
        Unity.Collections.NativeArray<T> GetRawTextureData<T>();
        /*0x2835b88*/ void Apply(bool updateMipmaps, bool makeNoLongerReadable);
        /*0x2835c14*/ void Apply(bool updateMipmaps);
        /*0x2835c20*/ void Apply();
        /*0x2835c2c*/ bool Reinitialize(int width, int height);
        /*0x2835cb8*/ bool Reinitialize(int width, int height, UnityEngine.TextureFormat format, bool hasMipMap);
        /*0x2835da4*/ bool Reinitialize(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format, bool hasMipMap);
        /*0x2835e48*/ bool Resize(int width, int height);
        /*0x2835e4c*/ bool Resize(int width, int height, UnityEngine.TextureFormat format, bool hasMipMap);
        /*0x2835e54*/ bool Resize(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format, bool hasMipMap);
        /*0x2835e5c*/ void ReadPixels(UnityEngine.Rect source, int destX, int destY, bool recalculateMipMaps);
        /*0x2835efc*/ void ReadPixels(UnityEngine.Rect source, int destX, int destY);
        /*0x28360d0*/ void SetPixels32(UnityEngine.Color32[] colors, int miplevel);
        /*0x2836124*/ void SetPixels32(UnityEngine.Color32[] colors);
        /*0x283616c*/ void SetPixels32(int x, int y, int blockWidth, int blockHeight, UnityEngine.Color32[] colors, int miplevel);
        /*0x28361f0*/ void SetPixels32(int x, int y, int blockWidth, int blockHeight, UnityEngine.Color32[] colors);
        /*0x2836268*/ UnityEngine.Color[] GetPixels(int miplevel);
        /*0x28362fc*/ UnityEngine.Color[] GetPixels();
        /*0x2833cc0*/ void SetPixelImpl_Injected(int image, int mip, int x, int y, ref UnityEngine.Color color);
        /*0x2833dbc*/ void GetPixelImpl_Injected(int image, int mip, int x, int y, ref UnityEngine.Color ret);
        /*0x2833eb8*/ void GetPixelBilinearImpl_Injected(int image, int mip, float u, float v, ref UnityEngine.Color ret);
        /*0x283400c*/ void ReadPixelsImpl_Injected(ref UnityEngine.Rect source, int destX, int destY, bool recalculateMipMaps);
    }

    class Cubemap : UnityEngine.Texture
    {
        static /*0x2836340*/ bool Internal_CreateImpl(UnityEngine.Cubemap mono, int ext, int mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, nint nativeTex);
        static /*0x28363b4*/ void Internal_Create(UnityEngine.Cubemap mono, int ext, int mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, nint nativeTex);
        static /*0x28373c8*/ UnityEngine.Cubemap CreateExternalTexture(int width, UnityEngine.TextureFormat format, bool mipmap, nint nativeTex);
        static /*0x28372e0*/ void ValidateIsNotCrunched(UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2836f40*/ Cubemap(int width, UnityEngine.Experimental.Rendering.DefaultFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2836f7c*/ Cubemap(int width, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2837064*/ Cubemap(int width, UnityEngine.TextureFormat format, int mipCount);
        /*0x2837204*/ Cubemap(int width, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, int mipCount);
        /*0x28370dc*/ Cubemap(int width, UnityEngine.TextureFormat textureFormat, int mipCount, nint nativeTex);
        /*0x2837338*/ Cubemap(int width, UnityEngine.TextureFormat textureFormat, bool mipChain, nint nativeTex);
        /*0x2837348*/ Cubemap(int width, UnityEngine.TextureFormat textureFormat, bool mipChain);
        /*0x2836304*/ UnityEngine.TextureFormat get_format();
        /*0x283647c*/ void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable);
        /*0x28364d0*/ void UpdateExternalTexture(nint nativeTexture);
        /*0x2836514*/ bool get_isReadable();
        /*0x2836550*/ void SetPixelImpl(int image, int mip, int x, int y, UnityEngine.Color color);
        /*0x2836648*/ UnityEngine.Color GetPixelImpl(int image, int mip, int x, int y);
        /*0x2836744*/ void SmoothEdges(int smoothRegionWidthInPixels);
        /*0x2836788*/ void SmoothEdges();
        /*0x28367c8*/ UnityEngine.Color[] GetPixels(UnityEngine.CubemapFace face, int miplevel);
        /*0x283681c*/ UnityEngine.Color[] GetPixels(UnityEngine.CubemapFace face);
        /*0x2836864*/ void SetPixels(UnityEngine.Color[] colors, UnityEngine.CubemapFace face, int miplevel);
        /*0x28368c0*/ bool SetPixelDataImplArray(System.Array data, int mipLevel, int face, int elementSize, int dataArraySize, int sourceDataStartIndex);
        /*0x2836944*/ bool SetPixelDataImpl(nint data, int mipLevel, int face, int elementSize, int dataArraySize, int sourceDataStartIndex);
        /*0x28369c8*/ void SetPixels(UnityEngine.Color[] colors, UnityEngine.CubemapFace face);
        /*0x2836a20*/ nint GetWritableImageData(int frame);
        /*0x2836a64*/ bool get_isPreProcessed();
        /*0x2836aa0*/ bool get_streamingMipmaps();
        /*0x2836adc*/ int get_streamingMipmapsPriority();
        /*0x2836b18*/ int get_requestedMipmapLevel();
        /*0x2836b54*/ void set_requestedMipmapLevel(int value);
        /*0x2836b98*/ bool get_loadAllMips();
        /*0x2836bd4*/ void set_loadAllMips(bool value);
        /*0x2836c18*/ int get_desiredMipmapLevel();
        /*0x2836c54*/ int get_loadingMipmapLevel();
        /*0x2836c90*/ int get_loadedMipmapLevel();
        /*0x2836ccc*/ void ClearRequestedMipmapLevel();
        /*0x2836d08*/ bool IsRequestedMipmapLevelLoaded();
        /*0x2836d44*/ bool ValidateFormat(UnityEngine.TextureFormat format, int width);
        /*0x2836e18*/ bool ValidateFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, int width);
        void SetPixelData<T>(T[] data, int mipLevel, UnityEngine.CubemapFace face, int sourceDataStartIndex);
        void SetPixelData<T>(Unity.Collections.NativeArray<T> data, int mipLevel, UnityEngine.CubemapFace face, int sourceDataStartIndex);
        Unity.Collections.NativeArray<T> GetPixelData<T>(int mipLevel, UnityEngine.CubemapFace face);
        /*0x28374d4*/ void SetPixel(UnityEngine.CubemapFace face, int x, int y, UnityEngine.Color color);
        /*0x28374dc*/ void SetPixel(UnityEngine.CubemapFace face, int x, int y, UnityEngine.Color color, int mip);
        /*0x2837588*/ UnityEngine.Color GetPixel(UnityEngine.CubemapFace face, int x, int y);
        /*0x2837590*/ UnityEngine.Color GetPixel(UnityEngine.CubemapFace face, int x, int y, int mip);
        /*0x283760c*/ void Apply(bool updateMipmaps, bool makeNoLongerReadable);
        /*0x2837698*/ void Apply(bool updateMipmaps);
        /*0x28376a4*/ void Apply();
        /*0x28365d4*/ void SetPixelImpl_Injected(int image, int mip, int x, int y, ref UnityEngine.Color color);
        /*0x28366d0*/ void GetPixelImpl_Injected(int image, int mip, int x, int y, ref UnityEngine.Color ret);
    }

    class Texture3D : UnityEngine.Texture
    {
        static /*0x2837a5c*/ bool Internal_CreateImpl(UnityEngine.Texture3D mono, int w, int h, int d, int mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, nint nativeTex);
        static /*0x2837ae8*/ void Internal_Create(UnityEngine.Texture3D mono, int w, int h, int d, int mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, nint nativeTex);
        static /*0x283849c*/ UnityEngine.Texture3D CreateExternalTexture(int width, int height, int depth, UnityEngine.TextureFormat format, bool mipChain, nint nativeTex);
        static /*0x28381a4*/ void ValidateIsNotCrunched(UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2837fc4*/ Texture3D(int width, int height, int depth, UnityEngine.Experimental.Rendering.DefaultFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2838018*/ Texture3D(int width, int height, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x28380b8*/ Texture3D(int width, int height, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, int mipCount);
        /*0x28381fc*/ Texture3D(int width, int height, int depth, UnityEngine.TextureFormat textureFormat, int mipCount);
        /*0x2838348*/ Texture3D(int width, int height, int depth, UnityEngine.TextureFormat textureFormat, int mipCount, nint nativeTex);
        /*0x283847c*/ Texture3D(int width, int height, int depth, UnityEngine.TextureFormat textureFormat, bool mipChain);
        /*0x283848c*/ Texture3D(int width, int height, int depth, UnityEngine.TextureFormat textureFormat, bool mipChain, nint nativeTex);
        /*0x28376b0*/ int get_depth();
        /*0x28376ec*/ UnityEngine.TextureFormat get_format();
        /*0x2837728*/ bool get_isReadable();
        /*0x2837764*/ void SetPixelImpl(int mip, int x, int y, int z, UnityEngine.Color color);
        /*0x283785c*/ UnityEngine.Color GetPixelImpl(int mip, int x, int y, int z);
        /*0x2837958*/ UnityEngine.Color GetPixelBilinearImpl(int mip, float u, float v, float w);
        /*0x2837bc8*/ void UpdateExternalTexture(nint nativeTex);
        /*0x2837c0c*/ void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable);
        /*0x2837c60*/ UnityEngine.Color[] GetPixels(int miplevel);
        /*0x2837ca4*/ UnityEngine.Color[] GetPixels();
        /*0x2837ce4*/ UnityEngine.Color32[] GetPixels32(int miplevel);
        /*0x2837d28*/ UnityEngine.Color32[] GetPixels32();
        /*0x2837d68*/ void SetPixels(UnityEngine.Color[] colors, int miplevel);
        /*0x2837dbc*/ void SetPixels(UnityEngine.Color[] colors);
        /*0x2837e04*/ void SetPixels32(UnityEngine.Color32[] colors, int miplevel);
        /*0x2837e58*/ void SetPixels32(UnityEngine.Color32[] colors);
        /*0x2837ea0*/ bool SetPixelDataImplArray(System.Array data, int mipLevel, int elementSize, int dataArraySize, int sourceDataStartIndex);
        /*0x2837f14*/ bool SetPixelDataImpl(nint data, int mipLevel, int elementSize, int dataArraySize, int sourceDataStartIndex);
        /*0x2837f88*/ nint GetImageDataPointer();
        /*0x28385c0*/ void Apply(bool updateMipmaps, bool makeNoLongerReadable);
        /*0x283864c*/ void Apply(bool updateMipmaps);
        /*0x2838658*/ void Apply();
        /*0x2838664*/ void SetPixel(int x, int y, int z, UnityEngine.Color color);
        /*0x283870c*/ void SetPixel(int x, int y, int z, UnityEngine.Color color, int mipLevel);
        /*0x28387b8*/ UnityEngine.Color GetPixel(int x, int y, int z);
        /*0x2838830*/ UnityEngine.Color GetPixel(int x, int y, int z, int mipLevel);
        /*0x28388ac*/ UnityEngine.Color GetPixelBilinear(float u, float v, float w);
        /*0x2838920*/ UnityEngine.Color GetPixelBilinear(float u, float v, float w, int mipLevel);
        void SetPixelData<T>(T[] data, int mipLevel, int sourceDataStartIndex);
        void SetPixelData<T>(Unity.Collections.NativeArray<T> data, int mipLevel, int sourceDataStartIndex);
        Unity.Collections.NativeArray<T> GetPixelData<T>(int mipLevel);
        /*0x28377e8*/ void SetPixelImpl_Injected(int mip, int x, int y, int z, ref UnityEngine.Color color);
        /*0x28378e4*/ void GetPixelImpl_Injected(int mip, int x, int y, int z, ref UnityEngine.Color ret);
        /*0x28379e0*/ void GetPixelBilinearImpl_Injected(int mip, float u, float v, float w, ref UnityEngine.Color ret);
    }

    class Texture2DArray : UnityEngine.Texture
    {
        static /*0x28389a0*/ int get_allSlices();
        static /*0x2838a7c*/ bool Internal_CreateImpl(UnityEngine.Texture2DArray mono, int w, int h, int d, int mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        static /*0x2838b00*/ void Internal_Create(UnityEngine.Texture2DArray mono, int w, int h, int d, int mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        static /*0x28393fc*/ void ValidateIsNotCrunched(UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x283922c*/ Texture2DArray(int width, int height, int depth, UnityEngine.Experimental.Rendering.DefaultFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2839280*/ Texture2DArray(int width, int height, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2839320*/ Texture2DArray(int width, int height, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, int mipCount);
        /*0x2839454*/ Texture2DArray(int width, int height, int depth, UnityEngine.TextureFormat textureFormat, int mipCount, bool linear);
        /*0x283959c*/ Texture2DArray(int width, int height, int depth, UnityEngine.TextureFormat textureFormat, bool mipChain, bool linear);
        /*0x28395b0*/ Texture2DArray(int width, int height, int depth, UnityEngine.TextureFormat textureFormat, bool mipChain);
        /*0x28389c8*/ int get_depth();
        /*0x2838a04*/ UnityEngine.TextureFormat get_format();
        /*0x2838a40*/ bool get_isReadable();
        /*0x2838bd8*/ void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable);
        /*0x2838c2c*/ UnityEngine.Color[] GetPixels(int arrayElement, int miplevel);
        /*0x2838c80*/ UnityEngine.Color[] GetPixels(int arrayElement);
        /*0x2838cc8*/ bool SetPixelDataImplArray(System.Array data, int mipLevel, int element, int elementSize, int dataArraySize, int sourceDataStartIndex);
        /*0x2838d4c*/ bool SetPixelDataImpl(nint data, int mipLevel, int element, int elementSize, int dataArraySize, int sourceDataStartIndex);
        /*0x2838dd0*/ UnityEngine.Color32[] GetPixels32(int arrayElement, int miplevel);
        /*0x2838e24*/ UnityEngine.Color32[] GetPixels32(int arrayElement);
        /*0x2838e6c*/ void SetPixels(UnityEngine.Color[] colors, int arrayElement, int miplevel);
        /*0x2838ec8*/ void SetPixels(UnityEngine.Color[] colors, int arrayElement);
        /*0x2838f20*/ void SetPixels32(UnityEngine.Color32[] colors, int arrayElement, int miplevel);
        /*0x2838f7c*/ void SetPixels32(UnityEngine.Color32[] colors, int arrayElement);
        /*0x2838fd4*/ nint GetImageDataPointer();
        /*0x2839010*/ bool ValidateFormat(UnityEngine.TextureFormat format, int width, int height);
        /*0x28390f8*/ bool ValidateFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, int width, int height);
        /*0x28395c4*/ void Apply(bool updateMipmaps, bool makeNoLongerReadable);
        /*0x2839650*/ void Apply(bool updateMipmaps);
        /*0x283965c*/ void Apply();
        void SetPixelData<T>(T[] data, int mipLevel, int element, int sourceDataStartIndex);
        void SetPixelData<T>(Unity.Collections.NativeArray<T> data, int mipLevel, int element, int sourceDataStartIndex);
        Unity.Collections.NativeArray<T> GetPixelData<T>(int mipLevel, int element);
    }

    class CubemapArray : UnityEngine.Texture
    {
        static /*0x283971c*/ bool Internal_CreateImpl(UnityEngine.CubemapArray mono, int ext, int count, int mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        static /*0x2839790*/ void Internal_Create(UnityEngine.CubemapArray mono, int ext, int count, int mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        static /*0x2839eac*/ void ValidateIsNotCrunched(UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2839d00*/ CubemapArray(int width, int cubemapCount, UnityEngine.Experimental.Rendering.DefaultFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2839d4c*/ CubemapArray(int width, int cubemapCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags);
        /*0x2839ddc*/ CubemapArray(int width, int cubemapCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, int mipCount);
        /*0x2839f04*/ CubemapArray(int width, int cubemapCount, UnityEngine.TextureFormat textureFormat, int mipCount, bool linear);
        /*0x283a03c*/ CubemapArray(int width, int cubemapCount, UnityEngine.TextureFormat textureFormat, bool mipChain, bool linear);
        /*0x283a050*/ CubemapArray(int width, int cubemapCount, UnityEngine.TextureFormat textureFormat, bool mipChain);
        /*0x2839668*/ int get_cubemapCount();
        /*0x28396a4*/ UnityEngine.TextureFormat get_format();
        /*0x28396e0*/ bool get_isReadable();
        /*0x2839858*/ void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable);
        /*0x28398ac*/ UnityEngine.Color[] GetPixels(UnityEngine.CubemapFace face, int arrayElement, int miplevel);
        /*0x2839908*/ UnityEngine.Color[] GetPixels(UnityEngine.CubemapFace face, int arrayElement);
        /*0x2839960*/ UnityEngine.Color32[] GetPixels32(UnityEngine.CubemapFace face, int arrayElement, int miplevel);
        /*0x28399bc*/ UnityEngine.Color32[] GetPixels32(UnityEngine.CubemapFace face, int arrayElement);
        /*0x2839a14*/ void SetPixels(UnityEngine.Color[] colors, UnityEngine.CubemapFace face, int arrayElement, int miplevel);
        /*0x2839a80*/ void SetPixels(UnityEngine.Color[] colors, UnityEngine.CubemapFace face, int arrayElement);
        /*0x2839ae0*/ void SetPixels32(UnityEngine.Color32[] colors, UnityEngine.CubemapFace face, int arrayElement, int miplevel);
        /*0x2839b4c*/ void SetPixels32(UnityEngine.Color32[] colors, UnityEngine.CubemapFace face, int arrayElement);
        /*0x2839bac*/ bool SetPixelDataImplArray(System.Array data, int mipLevel, int face, int element, int elementSize, int dataArraySize, int sourceDataStartIndex);
        /*0x2839c38*/ bool SetPixelDataImpl(nint data, int mipLevel, int face, int element, int elementSize, int dataArraySize, int sourceDataStartIndex);
        /*0x2839cc4*/ nint GetImageDataPointer();
        /*0x283a064*/ void Apply(bool updateMipmaps, bool makeNoLongerReadable);
        /*0x283a0f0*/ void Apply(bool updateMipmaps);
        /*0x283a0fc*/ void Apply();
        void SetPixelData<T>(T[] data, int mipLevel, UnityEngine.CubemapFace face, int element, int sourceDataStartIndex);
        void SetPixelData<T>(Unity.Collections.NativeArray<T> data, int mipLevel, UnityEngine.CubemapFace face, int element, int sourceDataStartIndex);
        Unity.Collections.NativeArray<T> GetPixelData<T>(int mipLevel, UnityEngine.CubemapFace face, int element);
    }

    class SparseTexture : UnityEngine.Texture
    {
        static /*0x283a1bc*/ void Internal_Create(UnityEngine.SparseTexture mono, int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format, int mipCount);
        static /*0x283a694*/ void ValidateIsNotCrunched(UnityEngine.TextureFormat textureFormat);
        /*0x283a740*/ SparseTexture(int width, int height, UnityEngine.Experimental.Rendering.DefaultFormat format, int mipCount);
        /*0x283a78c*/ SparseTexture(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format, int mipCount);
        /*0x283a87c*/ SparseTexture(int width, int height, UnityEngine.TextureFormat textureFormat, int mipCount);
        /*0x283a884*/ SparseTexture(int width, int height, UnityEngine.TextureFormat textureFormat, int mipCount, bool linear);
        /*0x283a108*/ int get_tileWidth();
        /*0x283a144*/ int get_tileHeight();
        /*0x283a180*/ bool get_isCreated();
        /*0x283a228*/ void UpdateTile(int tileX, int tileY, int miplevel, UnityEngine.Color32[] data);
        /*0x283a294*/ void UpdateTileRaw(int tileX, int tileY, int miplevel, byte[] data);
        /*0x283a300*/ void UnloadTile(int tileX, int tileY, int miplevel);
        /*0x283a360*/ bool ValidateFormat(UnityEngine.TextureFormat format, int width, int height);
        /*0x283a448*/ bool ValidateFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, int width, int height);
        /*0x283a57c*/ bool ValidateSize(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format);
    }

    class RenderTexture : UnityEngine.Texture
    {
        static /*0x283b4e8*/ UnityEngine.RenderTexture GetActive();
        static /*0x283b510*/ void SetActive(UnityEngine.RenderTexture rt);
        static /*0x283b54c*/ UnityEngine.RenderTexture get_active();
        static /*0x283b574*/ void set_active(UnityEngine.RenderTexture value);
        static /*0x283bb4c*/ void Internal_Create(UnityEngine.RenderTexture rt);
        static /*0x283bb88*/ bool SupportsStencil(UnityEngine.RenderTexture rt);
        static /*0x283bc90*/ UnityEngine.RenderTexture GetTemporary_Internal(UnityEngine.RenderTextureDescriptor desc);
        static /*0x283bd08*/ void ReleaseTemporary(UnityEngine.RenderTexture temp);
        static /*0x283be58*/ bool get_enabled();
        static /*0x283be60*/ void set_enabled(bool value);
        static /*0x283c918*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetDepthStencilFormatLegacy(int depthBits, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat);
        static /*0x283bff0*/ void ValidateRenderTextureDesc(UnityEngine.RenderTextureDescriptor desc);
        static /*0x283cfec*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetCompatibleFormat(UnityEngine.RenderTextureFormat renderTextureFormat, UnityEngine.RenderTextureReadWrite readWrite);
        static /*0x283d1d0*/ UnityEngine.RenderTexture GetTemporary(UnityEngine.RenderTextureDescriptor desc);
        static /*0x283d26c*/ UnityEngine.RenderTexture GetTemporaryImpl(int width, int height, int depthBuffer, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, int antiAliasing, UnityEngine.RenderTextureMemoryless memorylessMode, UnityEngine.VRTextureUsage vrUsage, bool useDynamicScale);
        static /*0x283d3fc*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer, UnityEngine.Experimental.Rendering.GraphicsFormat format, int antiAliasing, UnityEngine.RenderTextureMemoryless memorylessMode, UnityEngine.VRTextureUsage vrUsage, bool useDynamicScale);
        static /*0x283d404*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer, UnityEngine.Experimental.Rendering.GraphicsFormat format, int antiAliasing, UnityEngine.RenderTextureMemoryless memorylessMode, UnityEngine.VRTextureUsage vrUsage);
        static /*0x283d420*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer, UnityEngine.Experimental.Rendering.GraphicsFormat format, int antiAliasing, UnityEngine.RenderTextureMemoryless memorylessMode);
        static /*0x283d440*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer, UnityEngine.Experimental.Rendering.GraphicsFormat format, int antiAliasing);
        static /*0x283d464*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer, UnityEngine.Experimental.Rendering.GraphicsFormat format);
        static /*0x283d48c*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, UnityEngine.RenderTextureMemoryless memorylessMode, UnityEngine.VRTextureUsage vrUsage, bool useDynamicScale);
        static /*0x283d4f8*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, UnityEngine.RenderTextureMemoryless memorylessMode, UnityEngine.VRTextureUsage vrUsage);
        static /*0x283d560*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, UnityEngine.RenderTextureMemoryless memorylessMode);
        static /*0x283d5c8*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing);
        static /*0x283d62c*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite);
        static /*0x283d684*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer, UnityEngine.RenderTextureFormat format);
        static /*0x283d6dc*/ UnityEngine.RenderTexture GetTemporary(int width, int height, int depthBuffer);
        static /*0x283d734*/ UnityEngine.RenderTexture GetTemporary(int width, int height);
        static /*0x283bccc*/ UnityEngine.RenderTexture GetTemporary_Internal_Injected(ref UnityEngine.RenderTextureDescriptor desc);
        /*0x283bea4*/ RenderTexture();
        /*0x283bef8*/ RenderTexture(UnityEngine.RenderTextureDescriptor desc);
        /*0x283c440*/ RenderTexture(UnityEngine.RenderTexture textureToCopy);
        /*0x283c63c*/ RenderTexture(int width, int height, int depth, UnityEngine.Experimental.Rendering.DefaultFormat format);
        /*0x283c688*/ RenderTexture(int width, int height, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat format);
        /*0x283c718*/ RenderTexture(int width, int height, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat format, int mipCount);
        /*0x283c99c*/ RenderTexture(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, UnityEngine.Experimental.Rendering.GraphicsFormat depthStencilFormat, int mipCount);
        /*0x283cba0*/ RenderTexture(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, UnityEngine.Experimental.Rendering.GraphicsFormat depthStencilFormat);
        /*0x283cc30*/ RenderTexture(int width, int height, int depth, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite);
        /*0x283ceb4*/ RenderTexture(int width, int height, int depth, UnityEngine.RenderTextureFormat format);
        /*0x283cfe4*/ RenderTexture(int width, int height, int depth);
        /*0x283cf44*/ RenderTexture(int width, int height, int depth, UnityEngine.RenderTextureFormat format, int mipCount);
        /*0x283aa5c*/ int get_width();
        /*0x283aa98*/ void set_width(int value);
        /*0x283aadc*/ int get_height();
        /*0x283ab18*/ void set_height(int value);
        /*0x283ab5c*/ UnityEngine.Rendering.TextureDimension get_dimension();
        /*0x283ab98*/ void set_dimension(UnityEngine.Rendering.TextureDimension value);
        /*0x283abdc*/ UnityEngine.Experimental.Rendering.GraphicsFormat get_graphicsFormat();
        /*0x283ac18*/ void set_graphicsFormat(UnityEngine.Experimental.Rendering.GraphicsFormat value);
        /*0x283ac5c*/ bool get_useMipMap();
        /*0x283ac98*/ void set_useMipMap(bool value);
        /*0x283acdc*/ bool get_sRGB();
        /*0x283ad18*/ UnityEngine.VRTextureUsage get_vrUsage();
        /*0x283ad54*/ void set_vrUsage(UnityEngine.VRTextureUsage value);
        /*0x283ad98*/ UnityEngine.RenderTextureMemoryless get_memorylessMode();
        /*0x283add4*/ void set_memorylessMode(UnityEngine.RenderTextureMemoryless value);
        /*0x283ae18*/ UnityEngine.RenderTextureFormat get_format();
        /*0x283afa4*/ void set_format(UnityEngine.RenderTextureFormat value);
        /*0x283b06c*/ UnityEngine.Experimental.Rendering.GraphicsFormat get_stencilFormat();
        /*0x283b0a8*/ void set_stencilFormat(UnityEngine.Experimental.Rendering.GraphicsFormat value);
        /*0x283b0ec*/ UnityEngine.Experimental.Rendering.GraphicsFormat get_depthStencilFormat();
        /*0x283b128*/ void set_depthStencilFormat(UnityEngine.Experimental.Rendering.GraphicsFormat value);
        /*0x283b16c*/ bool get_autoGenerateMips();
        /*0x283b1a8*/ void set_autoGenerateMips(bool value);
        /*0x283b1ec*/ int get_volumeDepth();
        /*0x283b228*/ void set_volumeDepth(int value);
        /*0x283b26c*/ int get_antiAliasing();
        /*0x283b2a8*/ void set_antiAliasing(int value);
        /*0x283b2ec*/ bool get_bindTextureMS();
        /*0x283b328*/ void set_bindTextureMS(bool value);
        /*0x283b36c*/ bool get_enableRandomWrite();
        /*0x283b3a8*/ void set_enableRandomWrite(bool value);
        /*0x283b3ec*/ bool get_useDynamicScale();
        /*0x283b428*/ void set_useDynamicScale(bool value);
        /*0x283b46c*/ bool GetIsPowerOfTwo();
        /*0x283b4a8*/ bool get_isPowerOfTwo();
        /*0x283b4e4*/ void set_isPowerOfTwo(bool value);
        /*0x283b5b0*/ UnityEngine.RenderBuffer GetColorBuffer();
        /*0x283b648*/ UnityEngine.RenderBuffer GetDepthBuffer();
        /*0x283b6e0*/ void SetMipMapCount(int count);
        /*0x283b724*/ void SetShadowSamplingMode(UnityEngine.Rendering.ShadowSamplingMode samplingMode);
        /*0x283b768*/ UnityEngine.RenderBuffer get_colorBuffer();
        /*0x283b76c*/ UnityEngine.RenderBuffer get_depthBuffer();
        /*0x283b770*/ nint GetNativeDepthBufferPtr();
        /*0x283b7ac*/ void DiscardContents(bool discardColor, bool discardDepth);
        /*0x283b800*/ void MarkRestoreExpected();
        /*0x283b83c*/ void DiscardContents();
        /*0x283b880*/ void ResolveAA();
        /*0x283b8bc*/ void ResolveAATo(UnityEngine.RenderTexture rt);
        /*0x283b900*/ void ResolveAntiAliasedSurface();
        /*0x283b93c*/ void ResolveAntiAliasedSurface(UnityEngine.RenderTexture target);
        /*0x283b980*/ void SetGlobalShaderProperty(string propertyName);
        /*0x283b9c4*/ bool Create();
        /*0x283ba00*/ void Release();
        /*0x283ba3c*/ bool IsCreated();
        /*0x283ba78*/ void GenerateMips();
        /*0x283bab4*/ void ConvertToEquirect(UnityEngine.RenderTexture equirect, UnityEngine.Camera.MonoOrStereoscopicEye eye);
        /*0x283bb08*/ void SetSRGBReadWrite(bool srgb);
        /*0x283bbc4*/ void SetRenderTextureDescriptor(UnityEngine.RenderTextureDescriptor desc);
        /*0x283af2c*/ UnityEngine.RenderTextureDescriptor GetDescriptor();
        /*0x283bd44*/ int get_depth();
        /*0x283bd80*/ void set_depth(int value);
        /*0x283bdc4*/ bool get_isCubemap();
        /*0x283bde4*/ void set_isCubemap(bool value);
        /*0x283be10*/ bool get_isVolume();
        /*0x283be30*/ void set_isVolume(bool value);
        /*0x283be64*/ UnityEngine.Vector2 GetTexelOffset();
        /*0x283ccd8*/ void Initialize(int width, int height, int depth, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int mipCount);
        /*0x283c5ac*/ UnityEngine.RenderTextureDescriptor get_descriptor();
        /*0x283d140*/ void set_descriptor(UnityEngine.RenderTextureDescriptor value);
        /*0x283b604*/ void GetColorBuffer_Injected(ref UnityEngine.RenderBuffer ret);
        /*0x283b69c*/ void GetDepthBuffer_Injected(ref UnityEngine.RenderBuffer ret);
        /*0x283bc08*/ void SetRenderTextureDescriptor_Injected(ref UnityEngine.RenderTextureDescriptor desc);
        /*0x283bc4c*/ void GetDescriptor_Injected(ref UnityEngine.RenderTextureDescriptor ret);
    }

    struct CustomRenderTextureUpdateZone
    {
        /*0x10*/ UnityEngine.Vector3 updateZoneCenter;
        /*0x1c*/ UnityEngine.Vector3 updateZoneSize;
        /*0x28*/ float rotation;
        /*0x2c*/ int passIndex;
        /*0x30*/ bool needSwap;
    }

    class CustomRenderTexture : UnityEngine.RenderTexture
    {
        static /*0x283d788*/ void Internal_CreateCustomRenderTexture(UnityEngine.CustomRenderTexture rt);
        /*0x283e314*/ CustomRenderTexture(int width, int height, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite);
        /*0x283e494*/ CustomRenderTexture(int width, int height, UnityEngine.RenderTextureFormat format);
        /*0x283e4d0*/ CustomRenderTexture(int width, int height);
        /*0x283e50c*/ CustomRenderTexture(int width, int height, UnityEngine.Experimental.Rendering.DefaultFormat defaultFormat);
        /*0x283e350*/ CustomRenderTexture(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format);
        /*0x283d7c4*/ void TriggerUpdate(int count);
        /*0x283d808*/ void Update(int count);
        /*0x283d8d0*/ void Update();
        /*0x283d8d8*/ void TriggerInitialization();
        /*0x283d914*/ void Initialize();
        /*0x283d9c4*/ void ClearUpdateZones();
        /*0x283da00*/ UnityEngine.Material get_material();
        /*0x283da3c*/ void set_material(UnityEngine.Material value);
        /*0x283da80*/ UnityEngine.Material get_initializationMaterial();
        /*0x283dabc*/ void set_initializationMaterial(UnityEngine.Material value);
        /*0x283db00*/ UnityEngine.Texture get_initializationTexture();
        /*0x283db3c*/ void set_initializationTexture(UnityEngine.Texture value);
        /*0x283db80*/ void GetUpdateZonesInternal(object updateZones);
        /*0x283dbc4*/ void GetUpdateZones(System.Collections.Generic.List<UnityEngine.CustomRenderTextureUpdateZone> updateZones);
        /*0x283dc08*/ void SetUpdateZonesInternal(UnityEngine.CustomRenderTextureUpdateZone[] updateZones);
        /*0x283dc4c*/ UnityEngine.RenderTexture GetDoubleBufferRenderTexture();
        /*0x283dc88*/ void EnsureDoubleBufferConsistency();
        /*0x283dcc4*/ void SetUpdateZones(UnityEngine.CustomRenderTextureUpdateZone[] updateZones);
        /*0x283dd58*/ UnityEngine.CustomRenderTextureInitializationSource get_initializationSource();
        /*0x283dd94*/ void set_initializationSource(UnityEngine.CustomRenderTextureInitializationSource value);
        /*0x283ddd8*/ UnityEngine.Color get_initializationColor();
        /*0x283de74*/ void set_initializationColor(UnityEngine.Color value);
        /*0x283df0c*/ UnityEngine.CustomRenderTextureUpdateMode get_updateMode();
        /*0x283df48*/ void set_updateMode(UnityEngine.CustomRenderTextureUpdateMode value);
        /*0x283df8c*/ UnityEngine.CustomRenderTextureUpdateMode get_initializationMode();
        /*0x283dfc8*/ void set_initializationMode(UnityEngine.CustomRenderTextureUpdateMode value);
        /*0x283e00c*/ UnityEngine.CustomRenderTextureUpdateZoneSpace get_updateZoneSpace();
        /*0x283e048*/ void set_updateZoneSpace(UnityEngine.CustomRenderTextureUpdateZoneSpace value);
        /*0x283e08c*/ int get_shaderPass();
        /*0x283e0c8*/ void set_shaderPass(int value);
        /*0x283e10c*/ uint get_cubemapFaceMask();
        /*0x283e148*/ void set_cubemapFaceMask(uint value);
        /*0x283e18c*/ bool get_doubleBuffered();
        /*0x283e1c8*/ void set_doubleBuffered(bool value);
        /*0x283e20c*/ bool get_wrapUpdateZones();
        /*0x283e248*/ void set_wrapUpdateZones(bool value);
        /*0x283e28c*/ float get_updatePeriod();
        /*0x283e2c8*/ void set_updatePeriod(float value);
        /*0x283de30*/ void get_initializationColor_Injected(ref UnityEngine.Color ret);
        /*0x283dec8*/ void set_initializationColor_Injected(ref UnityEngine.Color value);
    }

    class OcclusionPortal : UnityEngine.Component
    {
        /*0x283e5c8*/ OcclusionPortal();
        /*0x283e548*/ bool get_open();
        /*0x283e584*/ void set_open(bool value);
    }

    class OcclusionArea : UnityEngine.Component
    {
        /*0x283e840*/ OcclusionArea();
        /*0x283e5d0*/ UnityEngine.Vector3 get_center();
        /*0x283e670*/ void set_center(UnityEngine.Vector3 value);
        /*0x283e708*/ UnityEngine.Vector3 get_size();
        /*0x283e7a8*/ void set_size(UnityEngine.Vector3 value);
        /*0x283e62c*/ void get_center_Injected(ref UnityEngine.Vector3 ret);
        /*0x283e6c4*/ void set_center_Injected(ref UnityEngine.Vector3 value);
        /*0x283e764*/ void get_size_Injected(ref UnityEngine.Vector3 ret);
        /*0x283e7fc*/ void set_size_Injected(ref UnityEngine.Vector3 value);
    }

    class Flare : UnityEngine.Object
    {
        static /*0x283e8c8*/ void Internal_Create(UnityEngine.Flare self);
        /*0x283e848*/ Flare();
    }

    class LensFlare : UnityEngine.Behaviour
    {
        /*0x283ebc8*/ LensFlare();
        /*0x283e904*/ float get_brightness();
        /*0x283e940*/ void set_brightness(float value);
        /*0x283e98c*/ float get_fadeSpeed();
        /*0x283e9c8*/ void set_fadeSpeed(float value);
        /*0x283ea14*/ UnityEngine.Color get_color();
        /*0x283eab0*/ void set_color(UnityEngine.Color value);
        /*0x283eb48*/ UnityEngine.Flare get_flare();
        /*0x283eb84*/ void set_flare(UnityEngine.Flare value);
        /*0x283ea6c*/ void get_color_Injected(ref UnityEngine.Color ret);
        /*0x283eb04*/ void set_color_Injected(ref UnityEngine.Color value);
    }

    class Projector : UnityEngine.Behaviour
    {
        /*0x283eff8*/ Projector();
        /*0x283ebd0*/ float get_nearClipPlane();
        /*0x283ec0c*/ void set_nearClipPlane(float value);
        /*0x283ec58*/ float get_farClipPlane();
        /*0x283ec94*/ void set_farClipPlane(float value);
        /*0x283ece0*/ float get_fieldOfView();
        /*0x283ed1c*/ void set_fieldOfView(float value);
        /*0x283ed68*/ float get_aspectRatio();
        /*0x283eda4*/ void set_aspectRatio(float value);
        /*0x283edf0*/ bool get_orthographic();
        /*0x283ee2c*/ void set_orthographic(bool value);
        /*0x283ee70*/ float get_orthographicSize();
        /*0x283eeac*/ void set_orthographicSize(float value);
        /*0x283eef8*/ int get_ignoreLayers();
        /*0x283ef34*/ void set_ignoreLayers(int value);
        /*0x283ef78*/ UnityEngine.Material get_material();
        /*0x283efb4*/ void set_material(UnityEngine.Material value);
    }

    struct LightBakingOutput
    {
        /*0x10*/ int probeOcclusionLightIndex;
        /*0x14*/ int occlusionMaskChannel;
        /*0x18*/ UnityEngine.LightmapBakeType lightmapBakeType;
        /*0x1c*/ UnityEngine.MixedLightingMode mixedLightingMode;
        /*0x20*/ bool isBaked;
    }

    enum LightShadowCasterMode
    {
        Default = 0,
        NonLightmappedOnly = 1,
        Everything = 2,
    }

    class Skybox : UnityEngine.Behaviour
    {
        /*0x283f080*/ Skybox();
        /*0x283f000*/ UnityEngine.Material get_material();
        /*0x283f03c*/ void set_material(UnityEngine.Material value);
    }

    class MeshFilter : UnityEngine.Component
    {
        /*0x283f18c*/ MeshFilter();
        /*0x283f088*/ void DontStripMeshFilter();
        /*0x283f08c*/ UnityEngine.Mesh get_sharedMesh();
        /*0x283f0c8*/ void set_sharedMesh(UnityEngine.Mesh value);
        /*0x283f10c*/ UnityEngine.Mesh get_mesh();
        /*0x283f148*/ void set_mesh(UnityEngine.Mesh value);
    }

    class Halo : UnityEngine.Behaviour
    {
        /*0x283f194*/ Halo();
    }

    class Graphics
    {
        static /*0x0*/ int kMaxDrawMeshInstanceCount;

        static /*0x284a794*/ Graphics();
        static /*0x283f19c*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, int layer);
        static /*0x283f4bc*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, int layer, UnityEngine.Camera camera);
        static /*0x283f63c*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex);
        static /*0x283f7c8*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties);
        static /*0x283f958*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, bool castShadows);
        static /*0x283fb4c*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, bool castShadows, bool receiveShadows);
        static /*0x283fd50*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows);
        static /*0x283feec*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows);
        static /*0x2840090*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, UnityEngine.Transform probeAnchor);
        static /*0x2840238*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer);
        static /*0x284030c*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera);
        static /*0x28403e4*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex);
        static /*0x28404c8*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties);
        static /*0x28405b8*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, bool castShadows);
        static /*0x2840710*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, bool castShadows, bool receiveShadows);
        static /*0x2840870*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows);
        static /*0x2840964*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows);
        static /*0x2840a60*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, UnityEngine.Transform probeAnchor);
        static /*0x2840b60*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, UnityEngine.Transform probeAnchor, bool useLightProbes);
        static /*0x2840cc4*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, UnityEngine.Transform probeAnchor, UnityEngine.Rendering.LightProbeUsage lightProbeUsage);
        static /*0x2840eb4*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices);
        static /*0x2841400*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count);
        static /*0x28414b0*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, UnityEngine.MaterialPropertyBlock properties);
        static /*0x284156c*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows);
        static /*0x284162c*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows);
        static /*0x28416f8*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x28417c8*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera);
        static /*0x284189c*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage);
        static /*0x2841970*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices);
        static /*0x2841b74*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, UnityEngine.MaterialPropertyBlock properties);
        static /*0x2841c20*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows);
        static /*0x2841cd8*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows);
        static /*0x2841d94*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x2841e5c*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera);
        static /*0x2841f28*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage);
        static /*0x2841ff4*/ void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage);
        static /*0x2842420*/ void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage);
        static /*0x284284c*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Color color, UnityEngine.Material mat);
        static /*0x2842af0*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Color color);
        static /*0x2842c34*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Material mat);
        static /*0x2842e44*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder);
        static /*0x2842f30*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Material mat);
        static /*0x28430f8*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder);
        static /*0x28431b4*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Material mat);
        static /*0x28432f8*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture);
        static /*0x2843384*/ void SetRenderTarget(UnityEngine.RenderTexture rt);
        static /*0x2843460*/ void SetRenderTarget(UnityEngine.RenderTexture rt, int mipLevel);
        static /*0x28434cc*/ void SetRenderTarget(UnityEngine.RenderTexture rt, int mipLevel, UnityEngine.CubemapFace face);
        static /*0x284353c*/ void SetRenderTarget(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer);
        static /*0x2843660*/ void SetRenderTarget(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer, int mipLevel);
        static /*0x28436ec*/ void SetRenderTarget(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer, int mipLevel, UnityEngine.CubemapFace face);
        static /*0x2843784*/ void SetRandomWriteTarget(int index, UnityEngine.ComputeBuffer uav);
        static /*0x28439d4*/ void SetRandomWriteTarget(int index, UnityEngine.GraphicsBuffer uav);
        static /*0x2843c24*/ void CheckLoadActionValid(UnityEngine.Rendering.RenderBufferLoadAction load, string bufferType);
        static /*0x2843cd0*/ void CheckStoreActionValid(UnityEngine.Rendering.RenderBufferStoreAction store, string bufferType);
        static /*0x2843d80*/ void SetRenderTargetImpl(UnityEngine.RenderTargetSetup setup);
        static /*0x2844114*/ void SetRenderTargetImpl(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer, int mipLevel, UnityEngine.CubemapFace face, int depthSlice);
        static /*0x2844258*/ void SetRenderTargetImpl(UnityEngine.RenderTexture rt, int mipLevel, UnityEngine.CubemapFace face, int depthSlice);
        static /*0x28443a4*/ void SetRenderTargetImpl(UnityEngine.RenderBuffer[] colorBuffers, UnityEngine.RenderBuffer depthBuffer, int mipLevel, UnityEngine.CubemapFace face, int depthSlice);
        static /*0x28433e4*/ void SetRenderTarget(UnityEngine.RenderTexture rt, int mipLevel, UnityEngine.CubemapFace face, int depthSlice);
        static /*0x28435c4*/ void SetRenderTarget(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer, int mipLevel, UnityEngine.CubemapFace face, int depthSlice);
        static /*0x28444e8*/ void SetRenderTarget(UnityEngine.RenderBuffer[] colorBuffers, UnityEngine.RenderBuffer depthBuffer);
        static /*0x2844560*/ void SetRenderTarget(UnityEngine.RenderTargetSetup setup);
        static /*0x28445e8*/ UnityEngine.RenderBuffer get_activeColorBuffer();
        static /*0x28446b8*/ UnityEngine.RenderBuffer get_activeDepthBuffer();
        static /*0x2844788*/ void SetRandomWriteTarget(int index, UnityEngine.RenderTexture uav);
        static /*0x28437ec*/ void SetRandomWriteTarget(int index, UnityEngine.ComputeBuffer uav, bool preserveCounterValue);
        static /*0x2843a3c*/ void SetRandomWriteTarget(int index, UnityEngine.GraphicsBuffer uav, bool preserveCounterValue);
        static /*0x284499c*/ void CopyTexture(UnityEngine.Texture src, UnityEngine.Texture dst);
        static /*0x2844a64*/ void CopyTexture(UnityEngine.Texture src, int srcElement, UnityEngine.Texture dst, int dstElement);
        static /*0x2844b5c*/ void CopyTexture(UnityEngine.Texture src, int srcElement, int srcMip, UnityEngine.Texture dst, int dstElement, int dstMip);
        static /*0x2844c84*/ void CopyTexture(UnityEngine.Texture src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, UnityEngine.Texture dst, int dstElement, int dstMip, int dstX, int dstY);
        static /*0x2844e30*/ bool ConvertTexture(UnityEngine.Texture src, UnityEngine.Texture dst);
        static /*0x2844ef8*/ bool ConvertTexture(UnityEngine.Texture src, int srcElement, UnityEngine.Texture dst, int dstElement);
        static /*0x2844ff0*/ UnityEngine.Rendering.GraphicsFence CreateAsyncGraphicsFence(UnityEngine.Rendering.SynchronisationStage stage);
        static /*0x2845114*/ UnityEngine.Rendering.GraphicsFence CreateAsyncGraphicsFence();
        static /*0x284505c*/ UnityEngine.Rendering.GraphicsFence CreateGraphicsFence(UnityEngine.Rendering.GraphicsFenceType fenceType, UnityEngine.Rendering.SynchronisationStageFlags stage);
        static /*0x28451ac*/ void WaitOnAsyncGraphicsFence(UnityEngine.Rendering.GraphicsFence fence);
        static /*0x2845214*/ void WaitOnAsyncGraphicsFence(UnityEngine.Rendering.GraphicsFence fence, UnityEngine.Rendering.SynchronisationStage stage);
        static /*0x284536c*/ void ValidateCopyBuffer(UnityEngine.GraphicsBuffer source, UnityEngine.GraphicsBuffer dest);
        static /*0x284558c*/ void CopyBuffer(UnityEngine.GraphicsBuffer source, UnityEngine.GraphicsBuffer dest);
        static /*0x2845660*/ void DrawTextureImpl(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Color color, UnityEngine.Material mat, int pass);
        static /*0x284299c*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Color color, UnityEngine.Material mat, int pass);
        static /*0x2842d2c*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Material mat, int pass);
        static /*0x2842ff8*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Material mat, int pass);
        static /*0x284324c*/ void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Material mat, int pass);
        static /*0x2845818*/ void RenderMesh(ref UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Matrix4x4 objectToWorld, System.Nullable<UnityEngine.Matrix4x4> prevObjectToWorld);
        static void RenderMeshInstanced<T>(ref UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, int submeshIndex, T[] instanceData, int instanceCount, int startInstance);
        static void RenderMeshInstanced<T>(ref UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, int submeshIndex, System.Collections.Generic.List<T> instanceData, int instanceCount, int startInstance);
        static void RenderMeshInstanced<T>(UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, int submeshIndex, Unity.Collections.NativeArray<T> instanceData, int instanceCount, int startInstance);
        static /*0x2845a60*/ void RenderMeshIndirect(ref UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, UnityEngine.GraphicsBuffer commandBuffer, int commandCount, int startCommand);
        static /*0x2845c0c*/ void RenderMeshPrimitives(ref UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, int submeshIndex, int instanceCount);
        static /*0x2845da0*/ void RenderPrimitives(ref UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount);
        static /*0x2845f34*/ void RenderPrimitivesIndexed(ref UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, int indexCount, int startIndex, int instanceCount);
        static /*0x2846100*/ void RenderPrimitivesIndirect(ref UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer commandBuffer, int commandCount, int startCommand);
        static /*0x28462ac*/ void RenderPrimitivesIndexedIndirect(ref UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.GraphicsBuffer commandBuffer, int commandCount, int startCommand);
        static /*0x2846478*/ void DrawMeshNow(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, int materialIndex);
        static /*0x2846660*/ void DrawMeshNow(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, int materialIndex);
        static /*0x2846810*/ void DrawMeshNow(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
        static /*0x28468c0*/ void DrawMeshNow(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix);
        static /*0x284695c*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, bool castShadows, bool receiveShadows, bool useLightProbes);
        static /*0x2846b9c*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, UnityEngine.Transform probeAnchor, bool useLightProbes);
        static /*0x2846da4*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, bool castShadows, bool receiveShadows, bool useLightProbes);
        static /*0x283f318*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, int submeshIndex, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, UnityEngine.Transform probeAnchor, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x2840f60*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x2841a18*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, System.Collections.Generic.List<UnityEngine.Matrix4x4> matrices, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x284703c*/ void DrawMeshInstancedProcedural(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Bounds bounds, int count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x28420f4*/ void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x2842520*/ void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x284765c*/ void DrawProceduralNow(UnityEngine.MeshTopology topology, int vertexCount, int instanceCount);
        static /*0x284773c*/ void DrawProceduralNow(UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, int indexCount, int instanceCount);
        static /*0x284787c*/ void DrawProceduralIndirectNow(UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset);
        static /*0x28479ac*/ void DrawProceduralIndirectNow(UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset);
        static /*0x2847b14*/ void DrawProceduralIndirectNow(UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset);
        static /*0x2847c44*/ void DrawProceduralIndirectNow(UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset);
        static /*0x2847dac*/ void DrawProcedural(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x2847f80*/ void DrawProcedural(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, int indexCount, int instanceCount, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x28481ac*/ void DrawProceduralIndirect(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x28483c8*/ void DrawProceduralIndirect(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x28485e4*/ void DrawProceduralIndirect(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x2848838*/ void DrawProceduralIndirect(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x2848a8c*/ void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest);
        static /*0x2848b54*/ void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, int sourceDepthSlice, int destDepthSlice);
        static /*0x2848c4c*/ void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset);
        static /*0x2848d80*/ void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset, int sourceDepthSlice, int destDepthSlice);
        static /*0x2848ee4*/ void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, int pass);
        static /*0x2848ff0*/ void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, int pass, int destDepthSlice);
        static /*0x284910c*/ void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat);
        static /*0x284917c*/ void Blit(UnityEngine.Texture source, UnityEngine.Material mat, int pass);
        static /*0x2849210*/ void Blit(UnityEngine.Texture source, UnityEngine.Material mat, int pass, int destDepthSlice);
        static /*0x28492b4*/ void Blit(UnityEngine.Texture source, UnityEngine.Material mat);
        static /*0x284931c*/ void BlitMultiTap(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, UnityEngine.Vector2[] offsets);
        static /*0x284947c*/ void BlitMultiTap(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, int destDepthSlice, UnityEngine.Vector2[] offsets);
        static /*0x28495fc*/ int Internal_GetMaxDrawMeshInstanceCount();
        static /*0x2849624*/ UnityEngine.ColorGamut GetActiveColorGamut();
        static /*0x284964c*/ UnityEngine.ColorGamut get_activeColorGamut();
        static /*0x28496b4*/ UnityEngine.Rendering.GraphicsTier get_activeTier();
        static /*0x28496dc*/ void set_activeTier(UnityEngine.Rendering.GraphicsTier value);
        static /*0x2849718*/ bool GetPreserveFramebufferAlpha();
        static /*0x2849740*/ bool get_preserveFramebufferAlpha();
        static /*0x28497a8*/ UnityEngine.Rendering.OpenGLESVersion GetMinOpenGLESVersion();
        static /*0x28497d0*/ UnityEngine.Rendering.OpenGLESVersion get_minOpenGLESVersion();
        static /*0x2844634*/ UnityEngine.RenderBuffer GetActiveColorBuffer();
        static /*0x2844704*/ UnityEngine.RenderBuffer GetActiveDepthBuffer();
        static /*0x284437c*/ void Internal_SetNullRT();
        static /*0x28441b0*/ void Internal_SetRTSimple(UnityEngine.RenderBuffer color, UnityEngine.RenderBuffer depth, int mip, UnityEngine.CubemapFace face, int depthSlice);
        static /*0x2844438*/ void Internal_SetMRTSimple(UnityEngine.RenderBuffer[] color, UnityEngine.RenderBuffer depth, int mip, UnityEngine.CubemapFace face, int depthSlice);
        static /*0x284403c*/ void Internal_SetMRTFullSetup(UnityEngine.RenderBuffer[] color, UnityEngine.RenderBuffer depth, int mip, UnityEngine.CubemapFace face, int depthSlice, UnityEngine.Rendering.RenderBufferLoadAction[] colorLA, UnityEngine.Rendering.RenderBufferStoreAction[] colorSA, UnityEngine.Rendering.RenderBufferLoadAction depthLA, UnityEngine.Rendering.RenderBufferStoreAction depthSA);
        static /*0x28448b0*/ void Internal_SetRandomWriteTargetRT(int index, UnityEngine.RenderTexture uav);
        static /*0x28448f4*/ void Internal_SetRandomWriteTargetBuffer(int index, UnityEngine.ComputeBuffer uav, bool preserveCounterValue);
        static /*0x2844948*/ void Internal_SetRandomWriteTargetGraphicsBuffer(int index, UnityEngine.GraphicsBuffer uav, bool preserveCounterValue);
        static /*0x2849a24*/ void ClearRandomWriteTargets();
        static /*0x2844a20*/ void CopyTexture_Full(UnityEngine.Texture src, UnityEngine.Texture dst);
        static /*0x2844b00*/ void CopyTexture_Slice_AllMips(UnityEngine.Texture src, int srcElement, UnityEngine.Texture dst, int dstElement);
        static /*0x2844c10*/ void CopyTexture_Slice(UnityEngine.Texture src, int srcElement, int srcMip, UnityEngine.Texture dst, int dstElement, int dstMip);
        static /*0x2844d70*/ void CopyTexture_Region(UnityEngine.Texture src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, UnityEngine.Texture dst, int dstElement, int dstMip, int dstX, int dstY);
        static /*0x2844eb4*/ bool ConvertTexture_Full(UnityEngine.Texture src, UnityEngine.Texture dst);
        static /*0x2844f94*/ bool ConvertTexture_Slice(UnityEngine.Texture src, int srcElement, UnityEngine.Texture dst, int dstElement);
        static /*0x284561c*/ void CopyBufferImpl(UnityEngine.GraphicsBuffer source, UnityEngine.GraphicsBuffer dest);
        static /*0x28465b8*/ void Internal_DrawMeshNow1(UnityEngine.Mesh mesh, int subsetIndex, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
        static /*0x2846784*/ void Internal_DrawMeshNow2(UnityEngine.Mesh mesh, int subsetIndex, UnityEngine.Matrix4x4 matrix);
        static /*0x28457dc*/ void Internal_DrawTexture(ref UnityEngine.Internal_DrawTextureArguments args);
        static /*0x28459bc*/ void Internal_RenderMesh(UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Matrix4x4 objectToWorld, UnityEngine.Matrix4x4* prevObjectToWorld);
        static /*0x2849b68*/ void Internal_RenderMeshInstanced(UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, int submeshIndex, nint instanceData, UnityEngine.RenderInstancedDataLayout layout, uint instanceCount);
        static /*0x2845b68*/ void Internal_RenderMeshIndirect(UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, UnityEngine.GraphicsBuffer commandBuffer, int commandCount, int startCommand);
        static /*0x2845d04*/ void Internal_RenderMeshPrimitives(UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, int submeshIndex, int instanceCount);
        static /*0x2845e98*/ void Internal_RenderPrimitives(UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount);
        static /*0x284604c*/ void Internal_RenderPrimitivesIndexed(UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, int indexCount, int startIndex, int instanceCount);
        static /*0x2846208*/ void Internal_RenderPrimitivesIndirect(UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer commandBuffer, int commandCount, int startCommand);
        static /*0x28463c4*/ void Internal_RenderPrimitivesIndexedIndirect(UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.GraphicsBuffer commandBuffer, int commandCount, int startCommand);
        static /*0x2840dc4*/ void Internal_DrawMesh(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, UnityEngine.Transform probeAnchor, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x2846f7c*/ void Internal_DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, int count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x2847368*/ void Internal_DrawMeshInstancedProcedural(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Bounds bounds, int count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x284745c*/ void Internal_DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x284755c*/ void Internal_DrawMeshInstancedIndirectGraphicsBuffer(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x28476e8*/ void Internal_DrawProceduralNow(UnityEngine.MeshTopology topology, int vertexCount, int instanceCount);
        static /*0x2847820*/ void Internal_DrawProceduralIndexedNow(UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, int indexCount, int instanceCount);
        static /*0x2847958*/ void Internal_DrawProceduralIndirectNow(UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset);
        static /*0x2847ab8*/ void Internal_DrawProceduralIndexedIndirectNow(UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset);
        static /*0x2847bf0*/ void Internal_DrawProceduralIndirectNowGraphicsBuffer(UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset);
        static /*0x2847d50*/ void Internal_DrawProceduralIndexedIndirectNowGraphicsBuffer(UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset);
        static /*0x2847e98*/ void Internal_DrawProcedural(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x28480c4*/ void Internal_DrawProceduralIndexed(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, int indexCount, int instanceCount, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x28482e0*/ void Internal_DrawProceduralIndirect(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x28484fc*/ void Internal_DrawProceduralIndirectGraphicsBuffer(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x2848750*/ void Internal_DrawProceduralIndexedIndirect(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x28489a4*/ void Internal_DrawProceduralIndexedIndirectGraphicsBuffer(UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x2848f84*/ void Internal_BlitMaterial5(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, int pass, bool setRT);
        static /*0x2849098*/ void Internal_BlitMaterial6(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, int pass, bool setRT, int destDepthSlice);
        static /*0x2849420*/ void Internal_BlitMultiTap4(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, UnityEngine.Vector2[] offsets);
        static /*0x2849590*/ void Internal_BlitMultiTap5(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, UnityEngine.Vector2[] offsets, int destDepthSlice);
        static /*0x2848b10*/ void Blit2(UnityEngine.Texture source, UnityEngine.RenderTexture dest);
        static /*0x2848bf0*/ void Blit3(UnityEngine.Texture source, UnityEngine.RenderTexture dest, int sourceDepthSlice, int destDepthSlice);
        static /*0x2848ce0*/ void Blit4(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset);
        static /*0x2848e2c*/ void Blit5(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset, int sourceDepthSlice, int destDepthSlice);
        static /*0x2845168*/ nint CreateGPUFenceImpl(UnityEngine.Rendering.GraphicsFenceType fenceType, UnityEngine.Rendering.SynchronisationStageFlags stage);
        static /*0x2845328*/ void WaitOnGPUFenceImpl(nint fencePtr, UnityEngine.Rendering.SynchronisationStageFlags stage);
        static /*0x284a70c*/ void ExecuteCommandBuffer(UnityEngine.Rendering.CommandBuffer buffer);
        static /*0x284a748*/ void ExecuteCommandBufferAsync(UnityEngine.Rendering.CommandBuffer buffer, UnityEngine.Rendering.ComputeQueueType queueType);
        static /*0x2849838*/ void GetActiveColorBuffer_Injected(ref UnityEngine.RenderBuffer ret);
        static /*0x2849874*/ void GetActiveDepthBuffer_Injected(ref UnityEngine.RenderBuffer ret);
        static /*0x28498b0*/ void Internal_SetRTSimple_Injected(ref UnityEngine.RenderBuffer color, ref UnityEngine.RenderBuffer depth, int mip, UnityEngine.CubemapFace face, int depthSlice);
        static /*0x284991c*/ void Internal_SetMRTSimple_Injected(UnityEngine.RenderBuffer[] color, ref UnityEngine.RenderBuffer depth, int mip, UnityEngine.CubemapFace face, int depthSlice);
        static /*0x2849988*/ void Internal_SetMRTFullSetup_Injected(UnityEngine.RenderBuffer[] color, ref UnityEngine.RenderBuffer depth, int mip, UnityEngine.CubemapFace face, int depthSlice, UnityEngine.Rendering.RenderBufferLoadAction[] colorLA, UnityEngine.Rendering.RenderBufferStoreAction[] colorSA, UnityEngine.Rendering.RenderBufferLoadAction depthLA, UnityEngine.Rendering.RenderBufferStoreAction depthSA);
        static /*0x2849a4c*/ void Internal_DrawMeshNow1_Injected(UnityEngine.Mesh mesh, int subsetIndex, ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation);
        static /*0x2849aa8*/ void Internal_DrawMeshNow2_Injected(UnityEngine.Mesh mesh, int subsetIndex, ref UnityEngine.Matrix4x4 matrix);
        static /*0x2849afc*/ void Internal_RenderMesh_Injected(ref UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, int submeshIndex, ref UnityEngine.Matrix4x4 objectToWorld, UnityEngine.Matrix4x4* prevObjectToWorld);
        static /*0x2849c20*/ void Internal_RenderMeshInstanced_Injected(ref UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, int submeshIndex, nint instanceData, ref UnityEngine.RenderInstancedDataLayout layout, uint instanceCount);
        static /*0x2849c94*/ void Internal_RenderMeshIndirect_Injected(ref UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, UnityEngine.GraphicsBuffer commandBuffer, int commandCount, int startCommand);
        static /*0x2849d00*/ void Internal_RenderMeshPrimitives_Injected(ref UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, int submeshIndex, int instanceCount);
        static /*0x2849d5c*/ void Internal_RenderPrimitives_Injected(ref UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount);
        static /*0x2849db8*/ void Internal_RenderPrimitivesIndexed_Injected(ref UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, int indexCount, int startIndex, int instanceCount);
        static /*0x2849e2c*/ void Internal_RenderPrimitivesIndirect_Injected(ref UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer commandBuffer, int commandCount, int startCommand);
        static /*0x2849e98*/ void Internal_RenderPrimitivesIndexedIndirect_Injected(ref UnityEngine.RenderParams rparams, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.GraphicsBuffer commandBuffer, int commandCount, int startCommand);
        static /*0x2849f0c*/ void Internal_DrawMesh_Injected(UnityEngine.Mesh mesh, int submeshIndex, ref UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int layer, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, UnityEngine.Transform probeAnchor, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x2849fcc*/ void Internal_DrawMeshInstancedProcedural_Injected(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, ref UnityEngine.Bounds bounds, int count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x284a08c*/ void Internal_DrawMeshInstancedIndirect_Injected(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, ref UnityEngine.Bounds bounds, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x284a154*/ void Internal_DrawMeshInstancedIndirectGraphicsBuffer_Injected(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, ref UnityEngine.Bounds bounds, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume);
        static /*0x284a21c*/ void Internal_DrawProcedural_Injected(UnityEngine.Material material, ref UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x284a2c4*/ void Internal_DrawProceduralIndexed_Injected(UnityEngine.Material material, ref UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, int indexCount, int instanceCount, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x284a37c*/ void Internal_DrawProceduralIndirect_Injected(UnityEngine.Material material, ref UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x284a424*/ void Internal_DrawProceduralIndirectGraphicsBuffer_Injected(UnityEngine.Material material, ref UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x284a4cc*/ void Internal_DrawProceduralIndexedIndirect_Injected(UnityEngine.Material material, ref UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x284a584*/ void Internal_DrawProceduralIndexedIndirectGraphicsBuffer_Injected(UnityEngine.Material material, ref UnityEngine.Bounds bounds, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, int layer);
        static /*0x284a63c*/ void Blit4_Injected(UnityEngine.Texture source, UnityEngine.RenderTexture dest, ref UnityEngine.Vector2 scale, ref UnityEngine.Vector2 offset);
        static /*0x284a698*/ void Blit5_Injected(UnityEngine.Texture source, UnityEngine.RenderTexture dest, ref UnityEngine.Vector2 scale, ref UnityEngine.Vector2 offset, int sourceDepthSlice, int destDepthSlice);
        /*0x284a78c*/ Graphics();
    }

    struct Resolution
    {
        /*0x10*/ int m_Width;
        /*0x14*/ int m_Height;
        /*0x18*/ int m_RefreshRate;

        /*0x284a800*/ int get_width();
        /*0x284a808*/ void set_width(int value);
        /*0x284a810*/ int get_height();
        /*0x284a818*/ void set_height(int value);
        /*0x284a820*/ int get_refreshRate();
        /*0x284a828*/ void set_refreshRate(int value);
        /*0x284a830*/ string ToString();
    }

    struct RenderBuffer
    {
        /*0x10*/ int m_RenderTextureInstanceID;
        /*0x18*/ nint m_BufferPtr;

        static /*0x284ab9c*/ void SetLoadAction_Injected(ref UnityEngine.RenderBuffer _unity_self, UnityEngine.Rendering.RenderBufferLoadAction action);
        static /*0x284abe0*/ void SetStoreAction_Injected(ref UnityEngine.RenderBuffer _unity_self, UnityEngine.Rendering.RenderBufferStoreAction action);
        static /*0x284ac24*/ UnityEngine.Rendering.RenderBufferLoadAction GetLoadAction_Injected(ref UnityEngine.RenderBuffer _unity_self);
        static /*0x284ac60*/ UnityEngine.Rendering.RenderBufferStoreAction GetStoreAction_Injected(ref UnityEngine.RenderBuffer _unity_self);
        static /*0x284acd8*/ nint GetNativeRenderBufferPtr_Injected(ref UnityEngine.RenderBuffer _unity_self);
        /*0x284a99c*/ UnityEngine.Rendering.RenderBufferLoadAction get_loadAction();
        /*0x284aa14*/ void set_loadAction(UnityEngine.Rendering.RenderBufferLoadAction value);
        /*0x284aa9c*/ UnityEngine.Rendering.RenderBufferStoreAction get_storeAction();
        /*0x284ab14*/ void set_storeAction(UnityEngine.Rendering.RenderBufferStoreAction value);
        /*0x284aa58*/ void SetLoadAction(UnityEngine.Rendering.RenderBufferLoadAction action);
        /*0x284ab58*/ void SetStoreAction(UnityEngine.Rendering.RenderBufferStoreAction action);
        /*0x284a9d8*/ UnityEngine.Rendering.RenderBufferLoadAction GetLoadAction();
        /*0x284aad8*/ UnityEngine.Rendering.RenderBufferStoreAction GetStoreAction();
        /*0x284ac9c*/ nint GetNativeRenderBufferPtr();
    }

    struct RenderTargetSetup
    {
        /*0x10*/ UnityEngine.RenderBuffer[] color;
        /*0x18*/ UnityEngine.RenderBuffer depth;
        /*0x28*/ int mipLevel;
        /*0x2c*/ UnityEngine.CubemapFace cubemapFace;
        /*0x30*/ int depthSlice;
        /*0x38*/ UnityEngine.Rendering.RenderBufferLoadAction[] colorLoad;
        /*0x40*/ UnityEngine.Rendering.RenderBufferStoreAction[] colorStore;
        /*0x48*/ UnityEngine.Rendering.RenderBufferLoadAction depthLoad;
        /*0x4c*/ UnityEngine.Rendering.RenderBufferStoreAction depthStore;

        static /*0x284ad38*/ UnityEngine.Rendering.RenderBufferLoadAction[] LoadActions(UnityEngine.RenderBuffer[] buf);
        static /*0x284ae64*/ UnityEngine.Rendering.RenderBufferStoreAction[] StoreActions(UnityEngine.RenderBuffer[] buf);
        /*0x284ad14*/ RenderTargetSetup(UnityEngine.RenderBuffer[] color, UnityEngine.RenderBuffer depth, int mip, UnityEngine.CubemapFace face, UnityEngine.Rendering.RenderBufferLoadAction[] colorLoad, UnityEngine.Rendering.RenderBufferStoreAction[] colorStore, UnityEngine.Rendering.RenderBufferLoadAction depthLoad, UnityEngine.Rendering.RenderBufferStoreAction depthStore);
        /*0x284af90*/ RenderTargetSetup(UnityEngine.RenderBuffer color, UnityEngine.RenderBuffer depth);
        /*0x284b038*/ RenderTargetSetup(UnityEngine.RenderBuffer color, UnityEngine.RenderBuffer depth, int mipLevel);
        /*0x284b0e8*/ RenderTargetSetup(UnityEngine.RenderBuffer color, UnityEngine.RenderBuffer depth, int mipLevel, UnityEngine.CubemapFace face);
        /*0x284b270*/ RenderTargetSetup(UnityEngine.RenderBuffer color, UnityEngine.RenderBuffer depth, int mipLevel, UnityEngine.CubemapFace face, int depthSlice);
        /*0x284b02c*/ RenderTargetSetup(UnityEngine.RenderBuffer[] color, UnityEngine.RenderBuffer depth);
        /*0x284b0e0*/ RenderTargetSetup(UnityEngine.RenderBuffer[] color, UnityEngine.RenderBuffer depth, int mipLevel);
        /*0x284b194*/ RenderTargetSetup(UnityEngine.RenderBuffer[] color, UnityEngine.RenderBuffer depth, int mip, UnityEngine.CubemapFace face);
    }

    struct RenderParams
    {
        /*0x10*/ int <layer>k__BackingField;
        /*0x14*/ uint <renderingLayerMask>k__BackingField;
        /*0x18*/ int <rendererPriority>k__BackingField;
        /*0x1c*/ UnityEngine.Bounds <worldBounds>k__BackingField;
        /*0x38*/ UnityEngine.Camera <camera>k__BackingField;
        /*0x40*/ UnityEngine.MotionVectorGenerationMode <motionVectorMode>k__BackingField;
        /*0x44*/ UnityEngine.Rendering.ReflectionProbeUsage <reflectionProbeUsage>k__BackingField;
        /*0x48*/ UnityEngine.Material <material>k__BackingField;
        /*0x50*/ UnityEngine.MaterialPropertyBlock <matProps>k__BackingField;
        /*0x58*/ UnityEngine.Rendering.ShadowCastingMode <shadowCastingMode>k__BackingField;
        /*0x5c*/ bool <receiveShadows>k__BackingField;
        /*0x60*/ UnityEngine.Rendering.LightProbeUsage <lightProbeUsage>k__BackingField;
        /*0x68*/ UnityEngine.LightProbeProxyVolume <lightProbeProxyVolume>k__BackingField;

        /*0x284b330*/ RenderParams(UnityEngine.Material mat);
        /*0x284b3e4*/ int get_layer();
        /*0x284b3ec*/ void set_layer(int value);
        /*0x284b3f4*/ uint get_renderingLayerMask();
        /*0x284b3fc*/ void set_renderingLayerMask(uint value);
        /*0x284b404*/ int get_rendererPriority();
        /*0x284b40c*/ void set_rendererPriority(int value);
        /*0x284b414*/ UnityEngine.Bounds get_worldBounds();
        /*0x284b428*/ void set_worldBounds(UnityEngine.Bounds value);
        /*0x284b43c*/ UnityEngine.Camera get_camera();
        /*0x284b444*/ void set_camera(UnityEngine.Camera value);
        /*0x284b44c*/ UnityEngine.MotionVectorGenerationMode get_motionVectorMode();
        /*0x284b454*/ void set_motionVectorMode(UnityEngine.MotionVectorGenerationMode value);
        /*0x284b45c*/ UnityEngine.Rendering.ReflectionProbeUsage get_reflectionProbeUsage();
        /*0x284b464*/ void set_reflectionProbeUsage(UnityEngine.Rendering.ReflectionProbeUsage value);
        /*0x284b46c*/ UnityEngine.Material get_material();
        /*0x284b474*/ void set_material(UnityEngine.Material value);
        /*0x284b47c*/ UnityEngine.MaterialPropertyBlock get_matProps();
        /*0x284b484*/ void set_matProps(UnityEngine.MaterialPropertyBlock value);
        /*0x284b48c*/ UnityEngine.Rendering.ShadowCastingMode get_shadowCastingMode();
        /*0x284b494*/ void set_shadowCastingMode(UnityEngine.Rendering.ShadowCastingMode value);
        /*0x284b49c*/ bool get_receiveShadows();
        /*0x284b4a4*/ void set_receiveShadows(bool value);
        /*0x284b4b0*/ UnityEngine.Rendering.LightProbeUsage get_lightProbeUsage();
        /*0x284b4b8*/ void set_lightProbeUsage(UnityEngine.Rendering.LightProbeUsage value);
        /*0x284b4c0*/ UnityEngine.LightProbeProxyVolume get_lightProbeProxyVolume();
        /*0x284b4c8*/ void set_lightProbeProxyVolume(UnityEngine.LightProbeProxyVolume value);
    }

    struct RenderInstancedDataLayout
    {
        /*0x10*/ int <size>k__BackingField;
        /*0x14*/ int <offsetObjectToWorld>k__BackingField;
        /*0x18*/ int <offsetPrevObjectToWorld>k__BackingField;
        /*0x1c*/ int <offsetRenderingLayerMask>k__BackingField;

        /*0x284b4d0*/ RenderInstancedDataLayout(System.Type t);
        /*0x284b76c*/ int get_size();
        /*0x284b774*/ int get_offsetObjectToWorld();
        /*0x284b77c*/ int get_offsetPrevObjectToWorld();
        /*0x284b784*/ int get_offsetRenderingLayerMask();
    }

    struct Internal_DrawTextureArguments
    {
        /*0x10*/ UnityEngine.Rect screenRect;
        /*0x20*/ UnityEngine.Rect sourceRect;
        /*0x30*/ int leftBorder;
        /*0x34*/ int rightBorder;
        /*0x38*/ int topBorder;
        /*0x3c*/ int bottomBorder;
        /*0x40*/ UnityEngine.Color leftBorderColor;
        /*0x50*/ UnityEngine.Color rightBorderColor;
        /*0x60*/ UnityEngine.Color topBorderColor;
        /*0x70*/ UnityEngine.Color bottomBorderColor;
        /*0x80*/ UnityEngine.Color color;
        /*0x90*/ UnityEngine.Vector4 borderWidths;
        /*0xa0*/ UnityEngine.Vector4 cornerRadiuses;
        /*0xb0*/ bool smoothCorners;
        /*0xb4*/ int pass;
        /*0xb8*/ UnityEngine.Texture texture;
        /*0xc0*/ UnityEngine.Material mat;
    }

    class QualitySettings : UnityEngine.Object
    {
        static /*0x284b78c*/ void IncreaseLevel(bool applyExpensiveChanges);
        static /*0x284b860*/ void DecreaseLevel(bool applyExpensiveChanges);
        static /*0x284b8c8*/ void SetQualityLevel(int index);
        static /*0x284b908*/ void IncreaseLevel();
        static /*0x284b910*/ void DecreaseLevel();
        static /*0x284b970*/ int get_pixelLightCount();
        static /*0x284b998*/ void set_pixelLightCount(int value);
        static /*0x284b9d4*/ UnityEngine.ShadowQuality get_shadows();
        static /*0x284b9fc*/ void set_shadows(UnityEngine.ShadowQuality value);
        static /*0x284ba38*/ UnityEngine.ShadowProjection get_shadowProjection();
        static /*0x284ba60*/ void set_shadowProjection(UnityEngine.ShadowProjection value);
        static /*0x284ba9c*/ int get_shadowCascades();
        static /*0x284bac4*/ void set_shadowCascades(int value);
        static /*0x284bb00*/ float get_shadowDistance();
        static /*0x284bb28*/ void set_shadowDistance(float value);
        static /*0x284bb60*/ UnityEngine.ShadowResolution get_shadowResolution();
        static /*0x284bb88*/ void set_shadowResolution(UnityEngine.ShadowResolution value);
        static /*0x284bbc4*/ UnityEngine.ShadowmaskMode get_shadowmaskMode();
        static /*0x284bbec*/ void set_shadowmaskMode(UnityEngine.ShadowmaskMode value);
        static /*0x284bc28*/ float get_shadowNearPlaneOffset();
        static /*0x284bc50*/ void set_shadowNearPlaneOffset(float value);
        static /*0x284bc88*/ float get_shadowCascade2Split();
        static /*0x284bcb0*/ void set_shadowCascade2Split(float value);
        static /*0x284bce8*/ UnityEngine.Vector3 get_shadowCascade4Split();
        static /*0x284bd70*/ void set_shadowCascade4Split(UnityEngine.Vector3 value);
        static /*0x284bdf0*/ float get_lodBias();
        static /*0x284be18*/ void set_lodBias(float value);
        static /*0x284be50*/ UnityEngine.AnisotropicFiltering get_anisotropicFiltering();
        static /*0x284be78*/ void set_anisotropicFiltering(UnityEngine.AnisotropicFiltering value);
        static /*0x284beb4*/ int get_masterTextureLimit();
        static /*0x284bedc*/ void set_masterTextureLimit(int value);
        static /*0x284bf18*/ int get_maximumLODLevel();
        static /*0x284bf40*/ void set_maximumLODLevel(int value);
        static /*0x284bf7c*/ int get_particleRaycastBudget();
        static /*0x284bfa4*/ void set_particleRaycastBudget(int value);
        static /*0x284bfe0*/ bool get_softParticles();
        static /*0x284c008*/ void set_softParticles(bool value);
        static /*0x284c044*/ bool get_softVegetation();
        static /*0x284c06c*/ void set_softVegetation(bool value);
        static /*0x284c0a8*/ int get_vSyncCount();
        static /*0x284c0d0*/ void set_vSyncCount(int value);
        static /*0x284c10c*/ int get_antiAliasing();
        static /*0x284c134*/ void set_antiAliasing(int value);
        static /*0x284c170*/ int get_asyncUploadTimeSlice();
        static /*0x284c198*/ void set_asyncUploadTimeSlice(int value);
        static /*0x284c1d4*/ int get_asyncUploadBufferSize();
        static /*0x284c1fc*/ void set_asyncUploadBufferSize(int value);
        static /*0x284c238*/ bool get_asyncUploadPersistentBuffer();
        static /*0x284c260*/ void set_asyncUploadPersistentBuffer(bool value);
        static /*0x284c29c*/ void SetLODSettings(float lodBias, int maximumLODLevel, bool setDirty);
        static /*0x284c2f0*/ bool get_realtimeReflectionProbes();
        static /*0x284c318*/ void set_realtimeReflectionProbes(bool value);
        static /*0x284c354*/ bool get_billboardsFaceCameraPosition();
        static /*0x284c37c*/ void set_billboardsFaceCameraPosition(bool value);
        static /*0x284c3b8*/ float get_resolutionScalingFixedDPIFactor();
        static /*0x284c3e0*/ void set_resolutionScalingFixedDPIFactor(float value);
        static /*0x284c418*/ UnityEngine.ScriptableObject get_INTERNAL_renderPipeline();
        static /*0x284c440*/ void set_INTERNAL_renderPipeline(UnityEngine.ScriptableObject value);
        static /*0x284c47c*/ UnityEngine.Rendering.RenderPipelineAsset get_renderPipeline();
        static /*0x284c50c*/ void set_renderPipeline(UnityEngine.Rendering.RenderPipelineAsset value);
        static /*0x284c548*/ UnityEngine.ScriptableObject InternalGetRenderPipelineAssetAt(int index);
        static /*0x284c584*/ UnityEngine.Rendering.RenderPipelineAsset GetRenderPipelineAssetAt(int index);
        static /*0x284c728*/ UnityEngine.BlendWeights get_blendWeights();
        static /*0x284c750*/ void set_blendWeights(UnityEngine.BlendWeights value);
        static /*0x284c78c*/ UnityEngine.SkinWeights get_skinWeights();
        static /*0x284c7b4*/ void set_skinWeights(UnityEngine.SkinWeights value);
        static /*0x284c7f0*/ bool get_streamingMipmapsActive();
        static /*0x284c818*/ void set_streamingMipmapsActive(bool value);
        static /*0x284c854*/ float get_streamingMipmapsMemoryBudget();
        static /*0x284c87c*/ void set_streamingMipmapsMemoryBudget(float value);
        static /*0x284c8b4*/ int get_streamingMipmapsRenderersPerFrame();
        static /*0x284c8dc*/ void set_streamingMipmapsRenderersPerFrame(int value);
        static /*0x284c918*/ int get_streamingMipmapsMaxLevelReduction();
        static /*0x284c940*/ void set_streamingMipmapsMaxLevelReduction(int value);
        static /*0x284c97c*/ bool get_streamingMipmapsAddAllCameras();
        static /*0x284c9a4*/ void set_streamingMipmapsAddAllCameras(bool value);
        static /*0x284c9e0*/ int get_streamingMipmapsMaxFileIORequests();
        static /*0x284ca08*/ void set_streamingMipmapsMaxFileIORequests(int value);
        static /*0x284ca44*/ int get_maxQueuedFrames();
        static /*0x284ca6c*/ void set_maxQueuedFrames(int value);
        static /*0x284b7f4*/ int GetQualityLevel();
        static /*0x284caa8*/ UnityEngine.Object GetQualitySettings();
        static /*0x284b81c*/ void SetQualityLevel(int index, bool applyExpensiveChanges);
        static /*0x284c700*/ string[] get_names();
        static /*0x284cad0*/ UnityEngine.ColorSpace get_desiredColorSpace();
        static /*0x284caf8*/ UnityEngine.ColorSpace get_activeColorSpace();
        static /*0x284cb20*/ UnityEngine.QualityLevel get_currentLevel();
        static /*0x284cb48*/ void set_currentLevel(UnityEngine.QualityLevel value);
        static /*0x284bd34*/ void get_shadowCascade4Split_Injected(ref UnityEngine.Vector3 ret);
        static /*0x284bdb4*/ void set_shadowCascade4Split_Injected(ref UnityEngine.Vector3 value);
        /*0x284b918*/ QualitySettings();
    }

    class ImageEffectTransformsToLDR : System.Attribute
    {
        /*0x284cb88*/ ImageEffectTransformsToLDR();
    }

    class ImageEffectAllowedInSceneView : System.Attribute
    {
        /*0x284cb90*/ ImageEffectAllowedInSceneView();
    }

    class ImageEffectOpaque : System.Attribute
    {
        /*0x284cb98*/ ImageEffectOpaque();
    }

    class ImageEffectAfterScale : System.Attribute
    {
        /*0x284cba0*/ ImageEffectAfterScale();
    }

    class ImageEffectUsesCommandBuffer : System.Attribute
    {
        /*0x284cba8*/ ImageEffectUsesCommandBuffer();
    }

    struct StaticBatchingHelper
    {
        static /*0x284cbb0*/ UnityEngine.Mesh InternalCombineVertices(UnityEngine.MeshSubsetCombineUtility.MeshInstance[] meshes, string meshName);
        static /*0x284cbf4*/ void InternalCombineIndices(UnityEngine.MeshSubsetCombineUtility.SubMeshInstance[] submeshes, UnityEngine.Mesh combinedMesh);
        static /*0x284cc38*/ bool IsMeshBatchable(UnityEngine.Mesh mesh);
    }

    class RenderSettings : UnityEngine.Object
    {
        static /*0x284cccc*/ bool get_fog();
        static /*0x284ccf4*/ void set_fog(bool value);
        static /*0x284cd30*/ float get_fogStartDistance();
        static /*0x284cd58*/ void set_fogStartDistance(float value);
        static /*0x284cd90*/ float get_fogEndDistance();
        static /*0x284cdb8*/ void set_fogEndDistance(float value);
        static /*0x284cdf0*/ UnityEngine.FogMode get_fogMode();
        static /*0x284ce18*/ void set_fogMode(UnityEngine.FogMode value);
        static /*0x284ce54*/ UnityEngine.Color get_fogColor();
        static /*0x284ced8*/ void set_fogColor(UnityEngine.Color value);
        static /*0x284cf58*/ float get_fogDensity();
        static /*0x284cf80*/ void set_fogDensity(float value);
        static /*0x284cfb8*/ UnityEngine.Rendering.AmbientMode get_ambientMode();
        static /*0x284cfe0*/ void set_ambientMode(UnityEngine.Rendering.AmbientMode value);
        static /*0x284d01c*/ UnityEngine.Color get_ambientSkyColor();
        static /*0x284d0a0*/ void set_ambientSkyColor(UnityEngine.Color value);
        static /*0x284d120*/ UnityEngine.Color get_ambientEquatorColor();
        static /*0x284d1a4*/ void set_ambientEquatorColor(UnityEngine.Color value);
        static /*0x284d224*/ UnityEngine.Color get_ambientGroundColor();
        static /*0x284d2a8*/ void set_ambientGroundColor(UnityEngine.Color value);
        static /*0x284d328*/ float get_ambientIntensity();
        static /*0x284d350*/ void set_ambientIntensity(float value);
        static /*0x284d388*/ UnityEngine.Color get_ambientLight();
        static /*0x284d40c*/ void set_ambientLight(UnityEngine.Color value);
        static /*0x284d48c*/ UnityEngine.Color get_subtractiveShadowColor();
        static /*0x284d510*/ void set_subtractiveShadowColor(UnityEngine.Color value);
        static /*0x284d590*/ UnityEngine.Material get_skybox();
        static /*0x284d5b8*/ void set_skybox(UnityEngine.Material value);
        static /*0x284d5f4*/ UnityEngine.Light get_sun();
        static /*0x284d61c*/ void set_sun(UnityEngine.Light value);
        static /*0x284d658*/ UnityEngine.Rendering.SphericalHarmonicsL2 get_ambientProbe();
        static /*0x284d700*/ void set_ambientProbe(UnityEngine.Rendering.SphericalHarmonicsL2 value);
        static /*0x284d778*/ UnityEngine.Texture get_customReflection();
        static /*0x284d7a0*/ void set_customReflection(UnityEngine.Texture value);
        static /*0x284d7dc*/ float get_reflectionIntensity();
        static /*0x284d804*/ void set_reflectionIntensity(float value);
        static /*0x284d83c*/ int get_reflectionBounces();
        static /*0x284d864*/ void set_reflectionBounces(int value);
        static /*0x284d8a0*/ UnityEngine.Cubemap get_defaultReflection();
        static /*0x284d8c8*/ UnityEngine.Rendering.DefaultReflectionMode get_defaultReflectionMode();
        static /*0x284d8f0*/ void set_defaultReflectionMode(UnityEngine.Rendering.DefaultReflectionMode value);
        static /*0x284d92c*/ int get_defaultReflectionResolution();
        static /*0x284d954*/ void set_defaultReflectionResolution(int value);
        static /*0x284d990*/ float get_haloStrength();
        static /*0x284d9b8*/ void set_haloStrength(float value);
        static /*0x284d9f0*/ float get_flareStrength();
        static /*0x284da18*/ void set_flareStrength(float value);
        static /*0x284da50*/ float get_flareFadeSpeed();
        static /*0x284da78*/ void set_flareFadeSpeed(float value);
        static /*0x284dab0*/ UnityEngine.Object GetRenderSettings();
        static /*0x284dad8*/ void Reset();
        static /*0x284db00*/ float get_ambientSkyboxAmount();
        static /*0x284db28*/ void set_ambientSkyboxAmount(float value);
        static /*0x284ce9c*/ void get_fogColor_Injected(ref UnityEngine.Color ret);
        static /*0x284cf1c*/ void set_fogColor_Injected(ref UnityEngine.Color value);
        static /*0x284d064*/ void get_ambientSkyColor_Injected(ref UnityEngine.Color ret);
        static /*0x284d0e4*/ void set_ambientSkyColor_Injected(ref UnityEngine.Color value);
        static /*0x284d168*/ void get_ambientEquatorColor_Injected(ref UnityEngine.Color ret);
        static /*0x284d1e8*/ void set_ambientEquatorColor_Injected(ref UnityEngine.Color value);
        static /*0x284d26c*/ void get_ambientGroundColor_Injected(ref UnityEngine.Color ret);
        static /*0x284d2ec*/ void set_ambientGroundColor_Injected(ref UnityEngine.Color value);
        static /*0x284d3d0*/ void get_ambientLight_Injected(ref UnityEngine.Color ret);
        static /*0x284d450*/ void set_ambientLight_Injected(ref UnityEngine.Color value);
        static /*0x284d4d4*/ void get_subtractiveShadowColor_Injected(ref UnityEngine.Color ret);
        static /*0x284d554*/ void set_subtractiveShadowColor_Injected(ref UnityEngine.Color value);
        static /*0x284d6c4*/ void get_ambientProbe_Injected(ref UnityEngine.Rendering.SphericalHarmonicsL2 ret);
        static /*0x284d73c*/ void set_ambientProbe_Injected(ref UnityEngine.Rendering.SphericalHarmonicsL2 value);
        /*0x284cc74*/ RenderSettings();
    }

    class CustomRenderTextureManager
    {
        static /*0x0*/ System.Action<UnityEngine.CustomRenderTexture> textureLoaded;
        static /*0x8*/ System.Action<UnityEngine.CustomRenderTexture> textureUnloaded;
        static /*0x10*/ System.Action<UnityEngine.CustomRenderTexture, int> updateTriggered;
        static /*0x18*/ System.Action<UnityEngine.CustomRenderTexture> initializeTriggered;

        static /*0x284db60*/ void add_textureLoaded(System.Action<UnityEngine.CustomRenderTexture> value);
        static /*0x284dc2c*/ void remove_textureLoaded(System.Action<UnityEngine.CustomRenderTexture> value);
        static /*0x284dcf8*/ void InvokeOnTextureLoaded_Internal(UnityEngine.CustomRenderTexture source);
        static /*0x284dd64*/ void add_textureUnloaded(System.Action<UnityEngine.CustomRenderTexture> value);
        static /*0x284de34*/ void remove_textureUnloaded(System.Action<UnityEngine.CustomRenderTexture> value);
        static /*0x284df04*/ void InvokeOnTextureUnloaded_Internal(UnityEngine.CustomRenderTexture source);
        static /*0x284df70*/ void GetAllCustomRenderTextures(System.Collections.Generic.List<UnityEngine.CustomRenderTexture> currentCustomRenderTextures);
        static /*0x284dfac*/ void add_updateTriggered(System.Action<UnityEngine.CustomRenderTexture, int> value);
        static /*0x284e07c*/ void remove_updateTriggered(System.Action<UnityEngine.CustomRenderTexture, int> value);
        static /*0x283d850*/ void InvokeTriggerUpdate(UnityEngine.CustomRenderTexture crt, int updateCount);
        static /*0x284e14c*/ void add_initializeTriggered(System.Action<UnityEngine.CustomRenderTexture> value);
        static /*0x284e21c*/ void remove_initializeTriggered(System.Action<UnityEngine.CustomRenderTexture> value);
        static /*0x283d958*/ void InvokeTriggerInitialize(UnityEngine.CustomRenderTexture crt);
    }

    class LightProbeGroup : UnityEngine.Behaviour
    {
        /*0x284e2f4*/ LightProbeGroup();
        /*0x284e2ec*/ UnityEngine.Vector3[] get_probePositions();
    }

    class BillboardAsset : UnityEngine.Object
    {
        static /*0x284e37c*/ void Internal_Create(UnityEngine.BillboardAsset obj);
        /*0x284e2fc*/ BillboardAsset();
        /*0x284e3b8*/ float get_width();
        /*0x284e3f4*/ void set_width(float value);
        /*0x284e440*/ float get_height();
        /*0x284e47c*/ void set_height(float value);
        /*0x284e4c8*/ float get_bottom();
        /*0x284e504*/ void set_bottom(float value);
        /*0x284e550*/ int get_imageCount();
        /*0x284e58c*/ int get_vertexCount();
        /*0x284e5c8*/ int get_indexCount();
        /*0x284e604*/ UnityEngine.Material get_material();
        /*0x284e640*/ void set_material(UnityEngine.Material value);
        /*0x284e684*/ void GetImageTexCoords(System.Collections.Generic.List<UnityEngine.Vector4> imageTexCoords);
        /*0x284e75c*/ UnityEngine.Vector4[] GetImageTexCoords();
        /*0x284e718*/ void GetImageTexCoordsInternal(object list);
        /*0x284e798*/ void SetImageTexCoords(System.Collections.Generic.List<UnityEngine.Vector4> imageTexCoords);
        /*0x284e870*/ void SetImageTexCoords(UnityEngine.Vector4[] imageTexCoords);
        /*0x284e82c*/ void SetImageTexCoordsInternalList(object list);
        /*0x284e8b4*/ void GetVertices(System.Collections.Generic.List<UnityEngine.Vector2> vertices);
        /*0x284e98c*/ UnityEngine.Vector2[] GetVertices();
        /*0x284e948*/ void GetVerticesInternal(object list);
        /*0x284e9c8*/ void SetVertices(System.Collections.Generic.List<UnityEngine.Vector2> vertices);
        /*0x284eaa0*/ void SetVertices(UnityEngine.Vector2[] vertices);
        /*0x284ea5c*/ void SetVerticesInternalList(object list);
        /*0x284eae4*/ void GetIndices(System.Collections.Generic.List<ushort> indices);
        /*0x284ebbc*/ ushort[] GetIndices();
        /*0x284eb78*/ void GetIndicesInternal(object list);
        /*0x284ebf8*/ void SetIndices(System.Collections.Generic.List<ushort> indices);
        /*0x284ecd0*/ void SetIndices(ushort[] indices);
        /*0x284ec8c*/ void SetIndicesInternalList(object list);
        /*0x284ed14*/ void MakeMaterialProperties(UnityEngine.MaterialPropertyBlock properties, UnityEngine.Camera camera);
    }

    class BillboardRenderer : UnityEngine.Renderer
    {
        /*0x284ede8*/ BillboardRenderer();
        /*0x284ed68*/ UnityEngine.BillboardAsset get_billboard();
        /*0x284eda4*/ void set_billboard(UnityEngine.BillboardAsset value);
    }

    struct RenderTextureDescriptor
    {
        /*0x10*/ int <width>k__BackingField;
        /*0x14*/ int <height>k__BackingField;
        /*0x18*/ int <msaaSamples>k__BackingField;
        /*0x1c*/ int <volumeDepth>k__BackingField;
        /*0x20*/ int <mipCount>k__BackingField;
        /*0x24*/ UnityEngine.Experimental.Rendering.GraphicsFormat _graphicsFormat;
        /*0x28*/ UnityEngine.Experimental.Rendering.GraphicsFormat <stencilFormat>k__BackingField;
        /*0x2c*/ UnityEngine.Experimental.Rendering.GraphicsFormat <depthStencilFormat>k__BackingField;
        /*0x30*/ UnityEngine.Rendering.TextureDimension <dimension>k__BackingField;
        /*0x34*/ UnityEngine.Rendering.ShadowSamplingMode <shadowSamplingMode>k__BackingField;
        /*0x38*/ UnityEngine.VRTextureUsage <vrUsage>k__BackingField;
        /*0x3c*/ UnityEngine.RenderTextureCreationFlags _flags;
        /*0x40*/ UnityEngine.RenderTextureMemoryless <memoryless>k__BackingField;

        /*0x284f1a8*/ RenderTextureDescriptor(int width, int height);
        /*0x284f1b4*/ RenderTextureDescriptor(int width, int height, UnityEngine.RenderTextureFormat colorFormat);
        /*0x284f1bc*/ RenderTextureDescriptor(int width, int height, UnityEngine.RenderTextureFormat colorFormat, int depthBufferBits);
        /*0x284f330*/ RenderTextureDescriptor(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, int depthBufferBits);
        /*0x284f24c*/ RenderTextureDescriptor(int width, int height, UnityEngine.RenderTextureFormat colorFormat, int depthBufferBits, int mipCount);
        /*0x284f3c0*/ RenderTextureDescriptor(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, int depthBufferBits, int mipCount);
        /*0x283d324*/ RenderTextureDescriptor(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, UnityEngine.Experimental.Rendering.GraphicsFormat depthStencilFormat);
        /*0x284f434*/ RenderTextureDescriptor(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, UnityEngine.Experimental.Rendering.GraphicsFormat depthStencilFormat, int mipCount);
        /*0x284edf0*/ int get_width();
        /*0x284edf8*/ void set_width(int value);
        /*0x284ee00*/ int get_height();
        /*0x284ee08*/ void set_height(int value);
        /*0x284ee10*/ int get_msaaSamples();
        /*0x284ee18*/ void set_msaaSamples(int value);
        /*0x284ee20*/ int get_volumeDepth();
        /*0x284ee28*/ void set_volumeDepth(int value);
        /*0x284ee30*/ int get_mipCount();
        /*0x284ee38*/ void set_mipCount(int value);
        /*0x283d1c8*/ UnityEngine.Experimental.Rendering.GraphicsFormat get_graphicsFormat();
        /*0x284ee40*/ void set_graphicsFormat(UnityEngine.Experimental.Rendering.GraphicsFormat value);
        /*0x284ef74*/ UnityEngine.Experimental.Rendering.GraphicsFormat get_stencilFormat();
        /*0x284ef7c*/ void set_stencilFormat(UnityEngine.Experimental.Rendering.GraphicsFormat value);
        /*0x284ef84*/ UnityEngine.Experimental.Rendering.GraphicsFormat get_depthStencilFormat();
        /*0x284ef8c*/ void set_depthStencilFormat(UnityEngine.Experimental.Rendering.GraphicsFormat value);
        /*0x284ef94*/ UnityEngine.RenderTextureFormat get_colorFormat();
        /*0x284eff0*/ void set_colorFormat(UnityEngine.RenderTextureFormat value);
        /*0x284f080*/ bool get_sRGB();
        /*0x284f0dc*/ void set_sRGB(bool value);
        /*0x284eef4*/ int get_depthBufferBits();
        /*0x284ef50*/ void set_depthBufferBits(int value);
        /*0x284f160*/ UnityEngine.Rendering.TextureDimension get_dimension();
        /*0x284f168*/ void set_dimension(UnityEngine.Rendering.TextureDimension value);
        /*0x284f170*/ UnityEngine.Rendering.ShadowSamplingMode get_shadowSamplingMode();
        /*0x284f178*/ void set_shadowSamplingMode(UnityEngine.Rendering.ShadowSamplingMode value);
        /*0x284f180*/ UnityEngine.VRTextureUsage get_vrUsage();
        /*0x284f188*/ void set_vrUsage(UnityEngine.VRTextureUsage value);
        /*0x284f190*/ UnityEngine.RenderTextureCreationFlags get_flags();
        /*0x284f198*/ UnityEngine.RenderTextureMemoryless get_memoryless();
        /*0x284f1a0*/ void set_memoryless(UnityEngine.RenderTextureMemoryless value);
        /*0x284eed8*/ void SetOrClearRenderTextureCreationFlag(bool value, UnityEngine.RenderTextureCreationFlags flag);
        /*0x284f490*/ bool get_useMipMap();
        /*0x284f49c*/ void set_useMipMap(bool value);
        /*0x284f4b8*/ bool get_autoGenerateMips();
        /*0x284f4c4*/ void set_autoGenerateMips(bool value);
        /*0x284f4e0*/ bool get_enableRandomWrite();
        /*0x284f4ec*/ void set_enableRandomWrite(bool value);
        /*0x284f508*/ bool get_bindMS();
        /*0x284f514*/ void set_bindMS(bool value);
        /*0x284f530*/ bool get_createdFromScript();
        /*0x283d250*/ void set_createdFromScript(bool value);
        /*0x284f53c*/ bool get_useDynamicScale();
        /*0x283d3e0*/ void set_useDynamicScale(bool value);
    }

    enum LODFadeMode
    {
        None = 0,
        CrossFade = 1,
        SpeedTree = 2,
    }

    struct LOD
    {
        /*0x10*/ float screenRelativeTransitionHeight;
        /*0x14*/ float fadeTransitionWidth;
        /*0x18*/ UnityEngine.Renderer[] renderers;

        /*0x284f548*/ LOD(float screenRelativeTransitionHeight, UnityEngine.Renderer[] renderers);
    }

    class LODGroup : UnityEngine.Component
    {
        static /*0x284fa18*/ float get_crossFadeAnimationDuration();
        static /*0x284fa40*/ void set_crossFadeAnimationDuration(float value);
        /*0x284fb18*/ LODGroup();
        /*0x284f558*/ UnityEngine.Vector3 get_localReferencePoint();
        /*0x284f5f8*/ void set_localReferencePoint(UnityEngine.Vector3 value);
        /*0x284f690*/ float get_size();
        /*0x284f6cc*/ void set_size(float value);
        /*0x284f718*/ int get_lodCount();
        /*0x284f754*/ UnityEngine.LODFadeMode get_fadeMode();
        /*0x284f790*/ void set_fadeMode(UnityEngine.LODFadeMode value);
        /*0x284f7d4*/ bool get_animateCrossFading();
        /*0x284f810*/ void set_animateCrossFading(bool value);
        /*0x284f854*/ bool get_enabled();
        /*0x284f890*/ void set_enabled(bool value);
        /*0x284f8d4*/ void RecalculateBounds();
        /*0x284f910*/ UnityEngine.LOD[] GetLODs();
        /*0x284f94c*/ void SetLODS(UnityEngine.LOD[] lods);
        /*0x284f990*/ void SetLODs(UnityEngine.LOD[] lods);
        /*0x284f9d4*/ void ForceLOD(int index);
        /*0x284fa78*/ UnityEngine.Vector3 get_worldReferencePoint();
        /*0x284f5b4*/ void get_localReferencePoint_Injected(ref UnityEngine.Vector3 ret);
        /*0x284f64c*/ void set_localReferencePoint_Injected(ref UnityEngine.Vector3 value);
        /*0x284fad4*/ void get_worldReferencePoint_Injected(ref UnityEngine.Vector3 ret);
    }

    enum LightmapsModeLegacy
    {
        Single = 0,
        Dual = 1,
        Directional = 2,
    }

    class LightmapSettings : UnityEngine.Object
    {
        static /*0x284fb20*/ UnityEngine.LightmapsModeLegacy get_lightmapsModeLegacy();
        static /*0x284fb28*/ void set_lightmapsModeLegacy(UnityEngine.LightmapsModeLegacy value);
        static /*0x284fb2c*/ UnityEngine.ColorSpace get_bakedColorSpace();
        static /*0x284fb54*/ void set_bakedColorSpace(UnityEngine.ColorSpace value);
        static /*0x284fbb0*/ UnityEngine.LightmapData[] get_lightmaps();
        static /*0x284fbd8*/ void set_lightmaps(UnityEngine.LightmapData[] value);
        static /*0x284fc14*/ UnityEngine.LightmapsMode get_lightmapsMode();
        static /*0x284fc3c*/ void set_lightmapsMode(UnityEngine.LightmapsMode value);
        static /*0x284fc78*/ UnityEngine.LightProbes get_lightProbes();
        static /*0x284fca0*/ void set_lightProbes(UnityEngine.LightProbes value);
        static /*0x284fcdc*/ void Reset();
        /*0x284fb58*/ LightmapSettings();
    }

    class LightProbes : UnityEngine.Object
    {
        static /*0x0*/ System.Action tetrahedralizationCompleted;
        static /*0x8*/ System.Action needsRetetrahedralization;

        static /*0x284fda8*/ void add_tetrahedralizationCompleted(System.Action value);
        static /*0x284fe60*/ void remove_tetrahedralizationCompleted(System.Action value);
        static /*0x284ff18*/ void Internal_CallTetrahedralizationCompletedFunction();
        static /*0x284ff7c*/ void add_needsRetetrahedralization(System.Action value);
        static /*0x2850038*/ void remove_needsRetetrahedralization(System.Action value);
        static /*0x28500f4*/ void Internal_CallNeedsRetetrahedralizationFunction();
        static /*0x2850158*/ void Tetrahedralize();
        static /*0x2850180*/ void TetrahedralizeAsync();
        static /*0x28501a8*/ void GetInterpolatedProbe(UnityEngine.Vector3 position, UnityEngine.Renderer renderer, ref UnityEngine.Rendering.SphericalHarmonicsL2 probe);
        static /*0x2850258*/ bool AreLightProbesAllowed(UnityEngine.Renderer renderer);
        static /*0x2850294*/ void CalculateInterpolatedLightAndOcclusionProbes(UnityEngine.Vector3[] positions, UnityEngine.Rendering.SphericalHarmonicsL2[] lightProbes, UnityEngine.Vector4[] occlusionProbes);
        static /*0x2850484*/ void CalculateInterpolatedLightAndOcclusionProbes(System.Collections.Generic.List<UnityEngine.Vector3> positions, System.Collections.Generic.List<UnityEngine.Rendering.SphericalHarmonicsL2> lightProbes, System.Collections.Generic.List<UnityEngine.Vector4> occlusionProbes);
        static /*0x2850428*/ void CalculateInterpolatedLightAndOcclusionProbes_Internal(UnityEngine.Vector3[] positions, int positionsCount, UnityEngine.Rendering.SphericalHarmonicsL2[] lightProbes, UnityEngine.Vector4[] occlusionProbes);
        static /*0x2850850*/ int GetCount();
        static /*0x2850204*/ void GetInterpolatedProbe_Injected(ref UnityEngine.Vector3 position, UnityEngine.Renderer renderer, ref UnityEngine.Rendering.SphericalHarmonicsL2 probe);
        /*0x284fd50*/ LightProbes();
        /*0x284fd04*/ void GetInterpolatedLightProbe(UnityEngine.Vector3 position, UnityEngine.Renderer renderer, float[] coefficients);
        /*0x284fd08*/ float[] get_coefficients();
        /*0x284fd4c*/ void set_coefficients(float[] value);
        /*0x285071c*/ UnityEngine.Vector3[] get_positions();
        /*0x2850758*/ UnityEngine.Rendering.SphericalHarmonicsL2[] get_bakedProbes();
        /*0x2850794*/ void set_bakedProbes(UnityEngine.Rendering.SphericalHarmonicsL2[] value);
        /*0x28507d8*/ int get_count();
        /*0x2850814*/ int get_cellCount();
    }

    class MaterialPropertyBlock
    {
        /*0x10*/ nint m_Ptr;

        static /*0x28543d8*/ void Internal_CopySHCoefficientArraysFrom(UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.SphericalHarmonicsL2[] lightProbes, int sourceStart, int destStart, int count);
        static /*0x28547b0*/ void Internal_CopyProbeOcclusionArrayFrom(UnityEngine.MaterialPropertyBlock properties, UnityEngine.Vector4[] occlusionProbes, int sourceStart, int destStart, int count);
        static /*0x2851868*/ nint CreateImpl();
        static /*0x28519f0*/ void DestroyImpl(nint mpb);
        /*0x2851820*/ MaterialPropertyBlock();
        /*0x2850878*/ void AddFloat(string name, float value);
        /*0x2850988*/ void AddFloat(int nameID, float value);
        /*0x28509dc*/ void AddVector(string name, UnityEngine.Vector4 value);
        /*0x2850a5c*/ void AddVector(int nameID, UnityEngine.Vector4 value);
        /*0x2850a60*/ void AddColor(string name, UnityEngine.Color value);
        /*0x2850ae0*/ void AddColor(int nameID, UnityEngine.Color value);
        /*0x2850ae4*/ void AddMatrix(string name, UnityEngine.Matrix4x4 value);
        /*0x2850be4*/ void AddMatrix(int nameID, UnityEngine.Matrix4x4 value);
        /*0x2850c48*/ void AddTexture(string name, UnityEngine.Texture value);
        /*0x2850d1c*/ void AddTexture(int nameID, UnityEngine.Texture value);
        /*0x2850d70*/ void SetFloatArray(int name, float[] values, int count);
        /*0x2850ee4*/ void SetVectorArray(int name, UnityEngine.Vector4[] values, int count);
        /*0x2851058*/ void SetMatrixArray(int name, UnityEngine.Matrix4x4[] values, int count);
        /*0x28511cc*/ void ExtractFloatArray(int name, System.Collections.Generic.List<float> values);
        /*0x28513e8*/ void ExtractVectorArray(int name, System.Collections.Generic.List<UnityEngine.Vector4> values);
        /*0x2851604*/ void ExtractMatrixArray(int name, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        /*0x2851890*/ void Finalize();
        /*0x2851924*/ void Dispose();
        /*0x2851a2c*/ void SetInt(string name, int value);
        /*0x2851b0c*/ void SetInt(int nameID, int value);
        /*0x2851b60*/ void SetFloat(string name, float value);
        /*0x2850934*/ void SetFloat(int nameID, float value);
        /*0x2851be0*/ void SetInteger(string name, int value);
        /*0x2851cb4*/ void SetInteger(int nameID, int value);
        /*0x2851d08*/ void SetVector(string name, UnityEngine.Vector4 value);
        /*0x2850a58*/ void SetVector(int nameID, UnityEngine.Vector4 value);
        /*0x2851de0*/ void SetColor(string name, UnityEngine.Color value);
        /*0x2850adc*/ void SetColor(int nameID, UnityEngine.Color value);
        /*0x2851eb8*/ void SetMatrix(string name, UnityEngine.Matrix4x4 value);
        /*0x2850b80*/ void SetMatrix(int nameID, UnityEngine.Matrix4x4 value);
        /*0x2851fa8*/ void SetBuffer(string name, UnityEngine.ComputeBuffer value);
        /*0x285207c*/ void SetBuffer(int nameID, UnityEngine.ComputeBuffer value);
        /*0x28520d0*/ void SetBuffer(string name, UnityEngine.GraphicsBuffer value);
        /*0x28521a4*/ void SetBuffer(int nameID, UnityEngine.GraphicsBuffer value);
        /*0x28521f8*/ void SetTexture(string name, UnityEngine.Texture value);
        /*0x2850cc8*/ void SetTexture(int nameID, UnityEngine.Texture value);
        /*0x28522cc*/ void SetTexture(string name, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element);
        /*0x28523b0*/ void SetTexture(int nameID, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element);
        /*0x285240c*/ void SetConstantBuffer(string name, UnityEngine.ComputeBuffer value, int offset, int size);
        /*0x2852510*/ void SetConstantBuffer(int nameID, UnityEngine.ComputeBuffer value, int offset, int size);
        /*0x285257c*/ void SetConstantBuffer(string name, UnityEngine.GraphicsBuffer value, int offset, int size);
        /*0x2852680*/ void SetConstantBuffer(int nameID, UnityEngine.GraphicsBuffer value, int offset, int size);
        /*0x28526ec*/ void SetFloatArray(string name, System.Collections.Generic.List<float> values);
        /*0x2852798*/ void SetFloatArray(int nameID, System.Collections.Generic.List<float> values);
        /*0x2852818*/ void SetFloatArray(string name, float[] values);
        /*0x2852880*/ void SetFloatArray(int nameID, float[] values);
        /*0x2852898*/ void SetVectorArray(string name, System.Collections.Generic.List<UnityEngine.Vector4> values);
        /*0x2852944*/ void SetVectorArray(int nameID, System.Collections.Generic.List<UnityEngine.Vector4> values);
        /*0x28529c4*/ void SetVectorArray(string name, UnityEngine.Vector4[] values);
        /*0x2852a2c*/ void SetVectorArray(int nameID, UnityEngine.Vector4[] values);
        /*0x2852a44*/ void SetMatrixArray(string name, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        /*0x2852af0*/ void SetMatrixArray(int nameID, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        /*0x2852b70*/ void SetMatrixArray(string name, UnityEngine.Matrix4x4[] values);
        /*0x2852bd8*/ void SetMatrixArray(int nameID, UnityEngine.Matrix4x4[] values);
        /*0x2852bf0*/ bool HasProperty(string name);
        /*0x2852ca4*/ bool HasProperty(int nameID);
        /*0x2852ce8*/ bool HasInt(string name);
        /*0x2852d9c*/ bool HasInt(int nameID);
        /*0x2852de0*/ bool HasFloat(string name);
        /*0x2852e50*/ bool HasFloat(int nameID);
        /*0x2852e94*/ bool HasInteger(string name);
        /*0x2852f48*/ bool HasInteger(int nameID);
        /*0x2852f8c*/ bool HasTexture(string name);
        /*0x2853040*/ bool HasTexture(int nameID);
        /*0x2853084*/ bool HasMatrix(string name);
        /*0x2853138*/ bool HasMatrix(int nameID);
        /*0x285317c*/ bool HasVector(string name);
        /*0x2853230*/ bool HasVector(int nameID);
        /*0x2853274*/ bool HasColor(string name);
        /*0x28532e4*/ bool HasColor(int nameID);
        /*0x2853328*/ bool HasBuffer(string name);
        /*0x28533dc*/ bool HasBuffer(int nameID);
        /*0x2853420*/ bool HasConstantBuffer(string name);
        /*0x28534d4*/ bool HasConstantBuffer(int nameID);
        /*0x2853518*/ float GetFloat(string name);
        /*0x28535cc*/ float GetFloat(int nameID);
        /*0x2853610*/ int GetInt(string name);
        /*0x285369c*/ int GetInt(int nameID);
        /*0x28536fc*/ int GetInteger(string name);
        /*0x28537b0*/ int GetInteger(int nameID);
        /*0x28537f4*/ UnityEngine.Vector4 GetVector(string name);
        /*0x28538a0*/ UnityEngine.Vector4 GetVector(int nameID);
        /*0x28538a4*/ UnityEngine.Color GetColor(string name);
        /*0x2853950*/ UnityEngine.Color GetColor(int nameID);
        /*0x2853954*/ UnityEngine.Matrix4x4 GetMatrix(string name);
        /*0x2853a8c*/ UnityEngine.Matrix4x4 GetMatrix(int nameID);
        /*0x2853b18*/ UnityEngine.Texture GetTexture(string name);
        /*0x2853bcc*/ UnityEngine.Texture GetTexture(int nameID);
        /*0x2853c10*/ float[] GetFloatArray(string name);
        /*0x2853c5c*/ float[] GetFloatArray(int nameID);
        /*0x2853d24*/ UnityEngine.Vector4[] GetVectorArray(string name);
        /*0x2853d70*/ UnityEngine.Vector4[] GetVectorArray(int nameID);
        /*0x2853e38*/ UnityEngine.Matrix4x4[] GetMatrixArray(string name);
        /*0x2853e84*/ UnityEngine.Matrix4x4[] GetMatrixArray(int nameID);
        /*0x2853f4c*/ void GetFloatArray(string name, System.Collections.Generic.List<float> values);
        /*0x2853fa8*/ void GetFloatArray(int nameID, System.Collections.Generic.List<float> values);
        /*0x2853fac*/ void GetVectorArray(string name, System.Collections.Generic.List<UnityEngine.Vector4> values);
        /*0x2854008*/ void GetVectorArray(int nameID, System.Collections.Generic.List<UnityEngine.Vector4> values);
        /*0x285400c*/ void GetMatrixArray(string name, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        /*0x2854068*/ void GetMatrixArray(int nameID, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        /*0x285406c*/ void CopySHCoefficientArraysFrom(System.Collections.Generic.List<UnityEngine.Rendering.SphericalHarmonicsL2> lightProbes);
        /*0x28542f0*/ void CopySHCoefficientArraysFrom(UnityEngine.Rendering.SphericalHarmonicsL2[] lightProbes);
        /*0x2854358*/ void CopySHCoefficientArraysFrom(System.Collections.Generic.List<UnityEngine.Rendering.SphericalHarmonicsL2> lightProbes, int sourceStart, int destStart, int count);
        /*0x285412c*/ void CopySHCoefficientArraysFrom(UnityEngine.Rendering.SphericalHarmonicsL2[] lightProbes, int sourceStart, int destStart, int count);
        /*0x2854444*/ void CopyProbeOcclusionArrayFrom(System.Collections.Generic.List<UnityEngine.Vector4> occlusionProbes);
        /*0x28546c8*/ void CopyProbeOcclusionArrayFrom(UnityEngine.Vector4[] occlusionProbes);
        /*0x2854730*/ void CopyProbeOcclusionArrayFrom(System.Collections.Generic.List<UnityEngine.Vector4> occlusionProbes, int sourceStart, int destStart, int count);
        /*0x2854504*/ void CopyProbeOcclusionArrayFrom(UnityEngine.Vector4[] occlusionProbes, int sourceStart, int destStart, int count);
        /*0x285376c*/ int GetIntImpl(int name);
        /*0x2853588*/ float GetFloatImpl(int name);
        /*0x2853840*/ UnityEngine.Vector4 GetVectorImpl(int name);
        /*0x28538f0*/ UnityEngine.Color GetColorImpl(int name);
        /*0x2853a10*/ UnityEngine.Matrix4x4 GetMatrixImpl(int name);
        /*0x2853b88*/ UnityEngine.Texture GetTextureImpl(int name);
        /*0x2852c60*/ bool HasPropertyImpl(int name);
        /*0x2852d58*/ bool HasFloatImpl(int name);
        /*0x2852f04*/ bool HasIntImpl(int name);
        /*0x2852ffc*/ bool HasTextureImpl(int name);
        /*0x28530f4*/ bool HasMatrixImpl(int name);
        /*0x28531ec*/ bool HasVectorImpl(int name);
        /*0x2853398*/ bool HasBufferImpl(int name);
        /*0x2853490*/ bool HasConstantBufferImpl(int name);
        /*0x2851c60*/ void SetIntImpl(int name, int value);
        /*0x2851ab8*/ void SetFloatImpl(int name, float value);
        /*0x2851d84*/ void SetVectorImpl(int name, UnityEngine.Vector4 value);
        /*0x2851e5c*/ void SetColorImpl(int name, UnityEngine.Color value);
        /*0x2851f54*/ void SetMatrixImpl(int name, UnityEngine.Matrix4x4 value);
        /*0x2852278*/ void SetTextureImpl(int name, UnityEngine.Texture value);
        /*0x2852354*/ void SetRenderTextureImpl(int name, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element);
        /*0x2852028*/ void SetBufferImpl(int name, UnityEngine.ComputeBuffer value);
        /*0x2852150*/ void SetGraphicsBufferImpl(int name, UnityEngine.GraphicsBuffer value);
        /*0x28524a4*/ void SetConstantBufferImpl(int name, UnityEngine.ComputeBuffer value, int offset, int size);
        /*0x2852614*/ void SetConstantGraphicsBufferImpl(int name, UnityEngine.GraphicsBuffer value, int offset, int size);
        /*0x2850e88*/ void SetFloatArrayImpl(int name, float[] values, int count);
        /*0x2850ffc*/ void SetVectorArrayImpl(int name, UnityEngine.Vector4[] values, int count);
        /*0x2851170*/ void SetMatrixArrayImpl(int name, UnityEngine.Matrix4x4[] values, int count);
        /*0x2853ce0*/ float[] GetFloatArrayImpl(int name);
        /*0x2853df4*/ UnityEngine.Vector4[] GetVectorArrayImpl(int name);
        /*0x2853f08*/ UnityEngine.Matrix4x4[] GetMatrixArrayImpl(int name);
        /*0x2851350*/ int GetFloatArrayCountImpl(int name);
        /*0x285156c*/ int GetVectorArrayCountImpl(int name);
        /*0x2851788*/ int GetMatrixArrayCountImpl(int name);
        /*0x2851394*/ void ExtractFloatArrayImpl(int name, float[] val);
        /*0x28515b0*/ void ExtractVectorArrayImpl(int name, UnityEngine.Vector4[] val);
        /*0x28517cc*/ void ExtractMatrixArrayImpl(int name, UnityEngine.Matrix4x4[] val);
        /*0x2854a14*/ bool get_isEmpty();
        /*0x2854a50*/ void Clear(bool keepMemory);
        /*0x2854a94*/ void Clear();
        /*0x285481c*/ void GetVectorImpl_Injected(int name, ref UnityEngine.Vector4 ret);
        /*0x2854870*/ void GetColorImpl_Injected(int name, ref UnityEngine.Color ret);
        /*0x28548c4*/ void GetMatrixImpl_Injected(int name, ref UnityEngine.Matrix4x4 ret);
        /*0x2854918*/ void SetVectorImpl_Injected(int name, ref UnityEngine.Vector4 value);
        /*0x285496c*/ void SetColorImpl_Injected(int name, ref UnityEngine.Color value);
        /*0x28549c0*/ void SetMatrixImpl_Injected(int name, ref UnityEngine.Matrix4x4 value);
    }

    class Screen
    {
        static /*0x2854ad4*/ bool get_lockCursor();
        static /*0x2854af0*/ void set_lockCursor(bool value);
        static /*0x2854b30*/ int get_width();
        static /*0x2854b58*/ int get_height();
        static /*0x2854b80*/ float get_dpi();
        static /*0x2854ba8*/ void RequestOrientation(UnityEngine.ScreenOrientation orient);
        static /*0x2854be4*/ UnityEngine.ScreenOrientation GetScreenOrientation();
        static /*0x2854c0c*/ UnityEngine.ScreenOrientation get_orientation();
        static /*0x2854c34*/ void set_orientation(UnityEngine.ScreenOrientation value);
        static /*0x2854cd0*/ int get_sleepTimeout();
        static /*0x2854cf8*/ void set_sleepTimeout(int value);
        static /*0x2854d34*/ bool IsOrientationEnabled(UnityEngine.EnabledOrientation orient);
        static /*0x2854d70*/ void SetOrientationEnabled(UnityEngine.EnabledOrientation orient, bool enabled);
        static /*0x2854db4*/ bool get_autorotateToPortrait();
        static /*0x2854de4*/ void set_autorotateToPortrait(bool value);
        static /*0x2854e24*/ bool get_autorotateToPortraitUpsideDown();
        static /*0x2854e54*/ void set_autorotateToPortraitUpsideDown(bool value);
        static /*0x2854e94*/ bool get_autorotateToLandscapeLeft();
        static /*0x2854ec4*/ void set_autorotateToLandscapeLeft(bool value);
        static /*0x2854f04*/ bool get_autorotateToLandscapeRight();
        static /*0x2854f34*/ void set_autorotateToLandscapeRight(bool value);
        static /*0x2854f74*/ UnityEngine.Resolution get_currentResolution();
        static /*0x2854ffc*/ bool get_fullScreen();
        static /*0x2855024*/ void set_fullScreen(bool value);
        static /*0x2855060*/ UnityEngine.FullScreenMode get_fullScreenMode();
        static /*0x2855088*/ void set_fullScreenMode(UnityEngine.FullScreenMode value);
        static /*0x28550c4*/ UnityEngine.Rect get_safeArea();
        static /*0x2855148*/ UnityEngine.Rect[] get_cutouts();
        static /*0x2855170*/ void SetResolution(int width, int height, UnityEngine.FullScreenMode fullscreenMode, int preferredRefreshRate);
        static /*0x28551cc*/ void SetResolution(int width, int height, UnityEngine.FullScreenMode fullscreenMode);
        static /*0x2855224*/ void SetResolution(int width, int height, bool fullscreen, int preferredRefreshRate);
        static /*0x2855288*/ void SetResolution(int width, int height, bool fullscreen);
        static /*0x28552e8*/ UnityEngine.Vector2Int get_mainWindowPosition();
        static /*0x2855328*/ UnityEngine.DisplayInfo get_mainWindowDisplayInfo();
        static /*0x2855378*/ void GetDisplayLayout(System.Collections.Generic.List<UnityEngine.DisplayInfo> displayLayout);
        static /*0x28553f4*/ UnityEngine.AsyncOperation MoveMainWindowTo(ref UnityEngine.DisplayInfo display, UnityEngine.Vector2Int position);
        static /*0x2855444*/ UnityEngine.Resolution[] get_resolutions();
        static /*0x285546c*/ float get_brightness();
        static /*0x2855494*/ void set_brightness(float value);
        static /*0x2854fc0*/ void get_currentResolution_Injected(ref UnityEngine.Resolution ret);
        static /*0x285510c*/ void get_safeArea_Injected(ref UnityEngine.Rect ret);
        /*0x28554cc*/ Screen();
    }

    class Shader : UnityEngine.Object
    {
        static /*0x28554d4*/ UnityEngine.Rendering.ShaderHardwareTier get_globalShaderHardwareTier();
        static /*0x285553c*/ void set_globalShaderHardwareTier(UnityEngine.Rendering.ShaderHardwareTier value);
        static /*0x28555b0*/ UnityEngine.Shader Find(string name);
        static /*0x285561c*/ UnityEngine.Shader FindBuiltin(string name);
        static /*0x2855658*/ int get_maximumChunksOverride();
        static /*0x2855680*/ void set_maximumChunksOverride(int value);
        static /*0x285573c*/ int get_globalMaximumLOD();
        static /*0x2855764*/ void set_globalMaximumLOD(int value);
        static /*0x28557dc*/ string get_globalRenderPipeline();
        static /*0x2855804*/ void set_globalRenderPipeline(string value);
        static /*0x2855840*/ UnityEngine.Rendering.GlobalKeyword[] get_enabledGlobalKeywords();
        static /*0x2855890*/ UnityEngine.Rendering.GlobalKeyword[] get_globalKeywords();
        static /*0x2855868*/ UnityEngine.Rendering.GlobalKeyword[] GetEnabledGlobalKeywords();
        static /*0x28558b8*/ UnityEngine.Rendering.GlobalKeyword[] GetAllGlobalKeywords();
        static /*0x2855970*/ void EnableKeyword(string keyword);
        static /*0x28559ac*/ void DisableKeyword(string keyword);
        static /*0x28559e8*/ bool IsKeywordEnabled(string keyword);
        static /*0x2855a24*/ void EnableKeywordFast(UnityEngine.Rendering.GlobalKeyword keyword);
        static /*0x2855aa0*/ void DisableKeywordFast(UnityEngine.Rendering.GlobalKeyword keyword);
        static /*0x2855b1c*/ void SetKeywordFast(UnityEngine.Rendering.GlobalKeyword keyword, bool value);
        static /*0x2855bb0*/ bool IsKeywordEnabledFast(UnityEngine.Rendering.GlobalKeyword keyword);
        static /*0x2855c30*/ void EnableKeyword(ref UnityEngine.Rendering.GlobalKeyword keyword);
        static /*0x2855c3c*/ void DisableKeyword(ref UnityEngine.Rendering.GlobalKeyword keyword);
        static /*0x2855c48*/ void SetKeyword(ref UnityEngine.Rendering.GlobalKeyword keyword, bool value);
        static /*0x2855c5c*/ bool IsKeywordEnabled(ref UnityEngine.Rendering.GlobalKeyword keyword);
        static /*0x2855ce0*/ void WarmupAllShaders();
        static /*0x2855d08*/ int TagToID(string name);
        static /*0x2855d44*/ string IDToTag(int name);
        static /*0x28508f8*/ int PropertyToID(string name);
        static /*0x2856360*/ void SetGlobalIntImpl(int name, int value);
        static /*0x28563a4*/ void SetGlobalFloatImpl(int name, float value);
        static /*0x28563f0*/ void SetGlobalVectorImpl(int name, UnityEngine.Vector4 value);
        static /*0x2856488*/ void SetGlobalMatrixImpl(int name, UnityEngine.Matrix4x4 value);
        static /*0x2856510*/ void SetGlobalTextureImpl(int name, UnityEngine.Texture value);
        static /*0x2856554*/ void SetGlobalRenderTextureImpl(int name, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element);
        static /*0x28565a8*/ void SetGlobalBufferImpl(int name, UnityEngine.ComputeBuffer value);
        static /*0x28565ec*/ void SetGlobalGraphicsBufferImpl(int name, UnityEngine.GraphicsBuffer value);
        static /*0x2856630*/ void SetGlobalConstantBufferImpl(int name, UnityEngine.ComputeBuffer value, int offset, int size);
        static /*0x285668c*/ void SetGlobalConstantGraphicsBufferImpl(int name, UnityEngine.GraphicsBuffer value, int offset, int size);
        static /*0x28566e8*/ int GetGlobalIntImpl(int name);
        static /*0x2856724*/ float GetGlobalFloatImpl(int name);
        static /*0x2856760*/ UnityEngine.Vector4 GetGlobalVectorImpl(int name);
        static /*0x28567fc*/ UnityEngine.Matrix4x4 GetGlobalMatrixImpl(int name);
        static /*0x28568ac*/ UnityEngine.Texture GetGlobalTextureImpl(int name);
        static /*0x28568e8*/ void SetGlobalFloatArrayImpl(int name, float[] values, int count);
        static /*0x285693c*/ void SetGlobalVectorArrayImpl(int name, UnityEngine.Vector4[] values, int count);
        static /*0x2856990*/ void SetGlobalMatrixArrayImpl(int name, UnityEngine.Matrix4x4[] values, int count);
        static /*0x28569e4*/ float[] GetGlobalFloatArrayImpl(int name);
        static /*0x2856a20*/ UnityEngine.Vector4[] GetGlobalVectorArrayImpl(int name);
        static /*0x2856a5c*/ UnityEngine.Matrix4x4[] GetGlobalMatrixArrayImpl(int name);
        static /*0x2856a98*/ int GetGlobalFloatArrayCountImpl(int name);
        static /*0x2856ad4*/ int GetGlobalVectorArrayCountImpl(int name);
        static /*0x2856b10*/ int GetGlobalMatrixArrayCountImpl(int name);
        static /*0x2856b4c*/ void ExtractGlobalFloatArrayImpl(int name, float[] val);
        static /*0x2856b90*/ void ExtractGlobalVectorArrayImpl(int name, UnityEngine.Vector4[] val);
        static /*0x2856bd4*/ void ExtractGlobalMatrixArrayImpl(int name, UnityEngine.Matrix4x4[] val);
        static /*0x2856c18*/ void SetGlobalFloatArray(int name, float[] values, int count);
        static /*0x2856d28*/ void SetGlobalVectorArray(int name, UnityEngine.Vector4[] values, int count);
        static /*0x2856e38*/ void SetGlobalMatrixArray(int name, UnityEngine.Matrix4x4[] values, int count);
        static /*0x2856f48*/ void ExtractGlobalFloatArray(int name, System.Collections.Generic.List<float> values);
        static /*0x28570c0*/ void ExtractGlobalVectorArray(int name, System.Collections.Generic.List<UnityEngine.Vector4> values);
        static /*0x2857238*/ void ExtractGlobalMatrixArray(int name, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        static /*0x28573b0*/ void SetGlobalInt(string name, int value);
        static /*0x285742c*/ void SetGlobalInt(int nameID, int value);
        static /*0x2857478*/ void SetGlobalFloat(string name, float value);
        static /*0x28574f0*/ void SetGlobalFloat(int nameID, float value);
        static /*0x285753c*/ void SetGlobalInteger(string name, int value);
        static /*0x28575ac*/ void SetGlobalInteger(int nameID, int value);
        static /*0x28575f0*/ void SetGlobalVector(string name, UnityEngine.Vector4 value);
        static /*0x2857660*/ void SetGlobalVector(int nameID, UnityEngine.Vector4 value);
        static /*0x2857664*/ void SetGlobalColor(string name, UnityEngine.Color value);
        static /*0x28576d4*/ void SetGlobalColor(int nameID, UnityEngine.Color value);
        static /*0x28576d8*/ void SetGlobalMatrix(string name, UnityEngine.Matrix4x4 value);
        static /*0x2857764*/ void SetGlobalMatrix(int nameID, UnityEngine.Matrix4x4 value);
        static /*0x28577c0*/ void SetGlobalTexture(string name, UnityEngine.Texture value);
        static /*0x2857830*/ void SetGlobalTexture(int nameID, UnityEngine.Texture value);
        static /*0x2857874*/ void SetGlobalTexture(string name, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element);
        static /*0x28578f4*/ void SetGlobalTexture(int nameID, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element);
        static /*0x2857948*/ void SetGlobalBuffer(string name, UnityEngine.ComputeBuffer value);
        static /*0x28579b8*/ void SetGlobalBuffer(int nameID, UnityEngine.ComputeBuffer value);
        static /*0x28579fc*/ void SetGlobalBuffer(string name, UnityEngine.GraphicsBuffer value);
        static /*0x2857a6c*/ void SetGlobalBuffer(int nameID, UnityEngine.GraphicsBuffer value);
        static /*0x2857ab0*/ void SetGlobalConstantBuffer(string name, UnityEngine.ComputeBuffer value, int offset, int size);
        static /*0x2857b38*/ void SetGlobalConstantBuffer(int nameID, UnityEngine.ComputeBuffer value, int offset, int size);
        static /*0x2857b94*/ void SetGlobalConstantBuffer(string name, UnityEngine.GraphicsBuffer value, int offset, int size);
        static /*0x2857c1c*/ void SetGlobalConstantBuffer(int nameID, UnityEngine.GraphicsBuffer value, int offset, int size);
        static /*0x2857c78*/ void SetGlobalFloatArray(string name, System.Collections.Generic.List<float> values);
        static /*0x2857d1c*/ void SetGlobalFloatArray(int nameID, System.Collections.Generic.List<float> values);
        static /*0x2857d94*/ void SetGlobalFloatArray(string name, float[] values);
        static /*0x2857de8*/ void SetGlobalFloatArray(int nameID, float[] values);
        static /*0x2857e00*/ void SetGlobalVectorArray(string name, System.Collections.Generic.List<UnityEngine.Vector4> values);
        static /*0x2857ea4*/ void SetGlobalVectorArray(int nameID, System.Collections.Generic.List<UnityEngine.Vector4> values);
        static /*0x2857f1c*/ void SetGlobalVectorArray(string name, UnityEngine.Vector4[] values);
        static /*0x2857f70*/ void SetGlobalVectorArray(int nameID, UnityEngine.Vector4[] values);
        static /*0x2857f88*/ void SetGlobalMatrixArray(string name, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        static /*0x285802c*/ void SetGlobalMatrixArray(int nameID, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        static /*0x28580a4*/ void SetGlobalMatrixArray(string name, UnityEngine.Matrix4x4[] values);
        static /*0x28580f8*/ void SetGlobalMatrixArray(int nameID, UnityEngine.Matrix4x4[] values);
        static /*0x2858110*/ int GetGlobalInt(string name);
        static /*0x2858194*/ int GetGlobalInt(int nameID);
        static /*0x28581ec*/ float GetGlobalFloat(string name);
        static /*0x2858254*/ float GetGlobalFloat(int nameID);
        static /*0x2858290*/ int GetGlobalInteger(string name);
        static /*0x28582f8*/ int GetGlobalInteger(int nameID);
        static /*0x2858334*/ UnityEngine.Vector4 GetGlobalVector(string name);
        static /*0x2858374*/ UnityEngine.Vector4 GetGlobalVector(int nameID);
        static /*0x2858378*/ UnityEngine.Color GetGlobalColor(string name);
        static /*0x28583b8*/ UnityEngine.Color GetGlobalColor(int nameID);
        static /*0x28583bc*/ UnityEngine.Matrix4x4 GetGlobalMatrix(string name);
        static /*0x2858468*/ UnityEngine.Matrix4x4 GetGlobalMatrix(int nameID);
        static /*0x28584e4*/ UnityEngine.Texture GetGlobalTexture(string name);
        static /*0x285854c*/ UnityEngine.Texture GetGlobalTexture(int nameID);
        static /*0x2858588*/ float[] GetGlobalFloatArray(string name);
        static /*0x28585c8*/ float[] GetGlobalFloatArray(int nameID);
        static /*0x2858640*/ UnityEngine.Vector4[] GetGlobalVectorArray(string name);
        static /*0x2858680*/ UnityEngine.Vector4[] GetGlobalVectorArray(int nameID);
        static /*0x28586f8*/ UnityEngine.Matrix4x4[] GetGlobalMatrixArray(string name);
        static /*0x2858738*/ UnityEngine.Matrix4x4[] GetGlobalMatrixArray(int nameID);
        static /*0x28587b0*/ void GetGlobalFloatArray(string name, System.Collections.Generic.List<float> values);
        static /*0x28587f8*/ void GetGlobalFloatArray(int nameID, System.Collections.Generic.List<float> values);
        static /*0x28587fc*/ void GetGlobalVectorArray(string name, System.Collections.Generic.List<UnityEngine.Vector4> values);
        static /*0x2858844*/ void GetGlobalVectorArray(int nameID, System.Collections.Generic.List<UnityEngine.Vector4> values);
        static /*0x2858848*/ void GetGlobalMatrixArray(string name, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        static /*0x2858890*/ void GetGlobalMatrixArray(int nameID, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        static /*0x28588ec*/ string GetPropertyName(UnityEngine.Shader shader, int propertyIndex);
        static /*0x2858930*/ int GetPropertyNameId(UnityEngine.Shader shader, int propertyIndex);
        static /*0x2858974*/ UnityEngine.Rendering.ShaderPropertyType GetPropertyType(UnityEngine.Shader shader, int propertyIndex);
        static /*0x28589b8*/ string GetPropertyDescription(UnityEngine.Shader shader, int propertyIndex);
        static /*0x28589fc*/ UnityEngine.Rendering.ShaderPropertyFlags GetPropertyFlags(UnityEngine.Shader shader, int propertyIndex);
        static /*0x2858a40*/ string[] GetPropertyAttributes(UnityEngine.Shader shader, int propertyIndex);
        static /*0x2858a84*/ int GetPropertyDefaultIntValue(UnityEngine.Shader shader, int propertyIndex);
        static /*0x2858ac8*/ UnityEngine.Vector4 GetPropertyDefaultValue(UnityEngine.Shader shader, int propertyIndex);
        static /*0x2858b7c*/ UnityEngine.Rendering.TextureDimension GetPropertyTextureDimension(UnityEngine.Shader shader, int propertyIndex);
        static /*0x2858bc0*/ string GetPropertyTextureDefaultName(UnityEngine.Shader shader, int propertyIndex);
        static /*0x2858c04*/ bool FindTextureStackImpl(UnityEngine.Shader s, int propertyIdx, ref string stackName, ref int layerIndex);
        static /*0x2858c60*/ void CheckPropertyIndex(UnityEngine.Shader s, int propertyIndex);
        static /*0x2855a64*/ void EnableKeywordFast_Injected(ref UnityEngine.Rendering.GlobalKeyword keyword);
        static /*0x2855ae0*/ void DisableKeywordFast_Injected(ref UnityEngine.Rendering.GlobalKeyword keyword);
        static /*0x2855b6c*/ void SetKeywordFast_Injected(ref UnityEngine.Rendering.GlobalKeyword keyword, bool value);
        static /*0x2855bf4*/ bool IsKeywordEnabledFast_Injected(ref UnityEngine.Rendering.GlobalKeyword keyword);
        static /*0x2856444*/ void SetGlobalVectorImpl_Injected(int name, ref UnityEngine.Vector4 value);
        static /*0x28564cc*/ void SetGlobalMatrixImpl_Injected(int name, ref UnityEngine.Matrix4x4 value);
        static /*0x28567b8*/ void GetGlobalVectorImpl_Injected(int name, ref UnityEngine.Vector4 ret);
        static /*0x2856868*/ void GetGlobalMatrixImpl_Injected(int name, ref UnityEngine.Matrix4x4 ret);
        static /*0x2858b28*/ void GetPropertyDefaultValue_Injected(UnityEngine.Shader shader, int propertyIndex, ref UnityEngine.Vector4 ret);
        /*0x2858894*/ Shader();
        /*0x28556bc*/ int get_maximumLOD();
        /*0x28556f8*/ void set_maximumLOD(int value);
        /*0x28557a0*/ bool get_isSupported();
        /*0x28558e0*/ UnityEngine.Rendering.LocalKeywordSpace get_keywordSpace();
        /*0x2855c68*/ int get_renderQueue();
        /*0x2855ca4*/ UnityEngine.DisableBatchingType get_disableBatching();
        /*0x2855d80*/ UnityEngine.Shader GetDependency(string name);
        /*0x2855dc4*/ int get_passCount();
        /*0x2855e00*/ int get_subshaderCount();
        /*0x2855e3c*/ int GetPassCountInSubshader(int subshaderIndex);
        /*0x2855e80*/ UnityEngine.Rendering.ShaderTagId FindPassTagValue(int passIndex, UnityEngine.Rendering.ShaderTagId tagName);
        /*0x2855fe0*/ UnityEngine.Rendering.ShaderTagId FindPassTagValue(int subshaderIndex, int passIndex, UnityEngine.Rendering.ShaderTagId tagName);
        /*0x28561ac*/ UnityEngine.Rendering.ShaderTagId FindSubshaderTagValue(int subshaderIndex, UnityEngine.Rendering.ShaderTagId tagName);
        /*0x2855f8c*/ int Internal_FindPassTagValue(int passIndex, int tagName);
        /*0x2856150*/ int Internal_FindPassTagValueInSubShader(int subShaderIndex, int passIndex, int tagName);
        /*0x285630c*/ int Internal_FindSubshaderTagValue(int subShaderIndex, int tagName);
        /*0x2858d04*/ int GetPropertyCount();
        /*0x2858d40*/ int FindPropertyIndex(string propertyName);
        /*0x2858d84*/ string GetPropertyName(int propertyIndex);
        /*0x2858dcc*/ int GetPropertyNameId(int propertyIndex);
        /*0x2858e14*/ UnityEngine.Rendering.ShaderPropertyType GetPropertyType(int propertyIndex);
        /*0x2858e5c*/ string GetPropertyDescription(int propertyIndex);
        /*0x2858ea4*/ UnityEngine.Rendering.ShaderPropertyFlags GetPropertyFlags(int propertyIndex);
        /*0x2858eec*/ string[] GetPropertyAttributes(int propertyIndex);
        /*0x2858f34*/ float GetPropertyDefaultFloatValue(int propertyIndex);
        /*0x2858fc0*/ UnityEngine.Vector4 GetPropertyDefaultVectorValue(int propertyIndex);
        /*0x2859048*/ UnityEngine.Vector2 GetPropertyRangeLimits(int propertyIndex);
        /*0x28590dc*/ UnityEngine.Rendering.TextureDimension GetPropertyTextureDimension(int propertyIndex);
        /*0x2859184*/ string GetPropertyTextureDefaultName(int propertyIndex);
        /*0x285922c*/ bool FindTextureStack(int propertyIndex, ref string stackName, ref int layerIndex);
        /*0x285592c*/ void get_keywordSpace_Injected(ref UnityEngine.Rendering.LocalKeywordSpace ret);
    }

    class Material : UnityEngine.Object
    {
        static /*0x28592ec*/ UnityEngine.Material Create(string scriptContents);
        static /*0x28593c4*/ void CreateWithShader(UnityEngine.Material self, UnityEngine.Shader shader);
        static /*0x2859408*/ void CreateWithMaterial(UnityEngine.Material self, UnityEngine.Material source);
        static /*0x285944c*/ void CreateWithString(UnityEngine.Material self);
        static /*0x28595a8*/ UnityEngine.Material GetDefaultMaterial();
        static /*0x28595d0*/ UnityEngine.Material GetDefaultParticleMaterial();
        static /*0x28595f8*/ UnityEngine.Material GetDefaultLineMaterial();
        /*0x2859488*/ Material(UnityEngine.Shader shader);
        /*0x2859518*/ Material(UnityEngine.Material source);
        /*0x2859344*/ Material(string contents);
        /*0x2859620*/ UnityEngine.Shader get_shader();
        /*0x285965c*/ void set_shader(UnityEngine.Shader value);
        /*0x28596a0*/ UnityEngine.Color get_color();
        /*0x28597c0*/ void set_color(UnityEngine.Color value);
        /*0x2859914*/ UnityEngine.Texture get_mainTexture();
        /*0x2859a78*/ void set_mainTexture(UnityEngine.Texture value);
        /*0x2859c14*/ UnityEngine.Vector2 get_mainTextureOffset();
        /*0x2859d18*/ void set_mainTextureOffset(UnityEngine.Vector2 value);
        /*0x2859e30*/ UnityEngine.Vector2 get_mainTextureScale();
        /*0x2859f0c*/ void set_mainTextureScale(UnityEngine.Vector2 value);
        /*0x285972c*/ int GetFirstPropertyNameIdByAttribute(UnityEngine.Rendering.ShaderPropertyFlags attributeFlag);
        /*0x285a024*/ bool HasProperty(int nameID);
        /*0x285a068*/ bool HasProperty(string name);
        /*0x285a0d8*/ bool HasFloatImpl(int name);
        /*0x285a11c*/ bool HasFloat(string name);
        /*0x285a18c*/ bool HasFloat(int nameID);
        /*0x285a1d0*/ bool HasInt(string name);
        /*0x285a240*/ bool HasInt(int nameID);
        /*0x285a284*/ bool HasIntImpl(int name);
        /*0x285a2c8*/ bool HasInteger(string name);
        /*0x285a338*/ bool HasInteger(int nameID);
        /*0x285a37c*/ bool HasTextureImpl(int name);
        /*0x285a3c0*/ bool HasTexture(string name);
        /*0x285a430*/ bool HasTexture(int nameID);
        /*0x285a474*/ bool HasMatrixImpl(int name);
        /*0x285a4b8*/ bool HasMatrix(string name);
        /*0x285a528*/ bool HasMatrix(int nameID);
        /*0x285a56c*/ bool HasVectorImpl(int name);
        /*0x285a5b0*/ bool HasVector(string name);
        /*0x285a620*/ bool HasVector(int nameID);
        /*0x285a664*/ bool HasColor(string name);
        /*0x285a6d4*/ bool HasColor(int nameID);
        /*0x285a718*/ bool HasBufferImpl(int name);
        /*0x285a75c*/ bool HasBuffer(string name);
        /*0x285a7cc*/ bool HasBuffer(int nameID);
        /*0x285a810*/ bool HasConstantBufferImpl(int name);
        /*0x285a854*/ bool HasConstantBuffer(string name);
        /*0x285a8c4*/ bool HasConstantBuffer(int nameID);
        /*0x285a908*/ int get_renderQueue();
        /*0x285a944*/ void set_renderQueue(int value);
        /*0x285a988*/ int get_rawRenderQueue();
        /*0x285a9c4*/ void EnableKeyword(string keyword);
        /*0x285aa08*/ void DisableKeyword(string keyword);
        /*0x285aa4c*/ bool IsKeywordEnabled(string keyword);
        /*0x285aa90*/ void EnableLocalKeyword(UnityEngine.Rendering.LocalKeyword keyword);
        /*0x285ab18*/ void DisableLocalKeyword(UnityEngine.Rendering.LocalKeyword keyword);
        /*0x285aba0*/ void SetLocalKeyword(UnityEngine.Rendering.LocalKeyword keyword, bool value);
        /*0x285ac48*/ bool IsLocalKeywordEnabled(UnityEngine.Rendering.LocalKeyword keyword);
        /*0x285acd0*/ void EnableKeyword(ref UnityEngine.Rendering.LocalKeyword keyword);
        /*0x285ad2c*/ void DisableKeyword(ref UnityEngine.Rendering.LocalKeyword keyword);
        /*0x285ad88*/ void SetKeyword(ref UnityEngine.Rendering.LocalKeyword keyword, bool value);
        /*0x285adec*/ bool IsKeywordEnabled(ref UnityEngine.Rendering.LocalKeyword keyword);
        /*0x285ae4c*/ UnityEngine.Rendering.LocalKeyword[] GetEnabledKeywords();
        /*0x285ae88*/ void SetEnabledKeywords(UnityEngine.Rendering.LocalKeyword[] keywords);
        /*0x285aecc*/ UnityEngine.Rendering.LocalKeyword[] get_enabledKeywords();
        /*0x285af08*/ void set_enabledKeywords(UnityEngine.Rendering.LocalKeyword[] value);
        /*0x285af4c*/ UnityEngine.MaterialGlobalIlluminationFlags get_globalIlluminationFlags();
        /*0x285af88*/ void set_globalIlluminationFlags(UnityEngine.MaterialGlobalIlluminationFlags value);
        /*0x285afcc*/ bool get_doubleSidedGI();
        /*0x285b008*/ void set_doubleSidedGI(bool value);
        /*0x2846f40*/ bool get_enableInstancing();
        /*0x285b04c*/ void set_enableInstancing(bool value);
        /*0x285b090*/ int get_passCount();
        /*0x285b0cc*/ void SetShaderPassEnabled(string passName, bool enabled);
        /*0x285b120*/ bool GetShaderPassEnabled(string passName);
        /*0x285b164*/ string GetPassName(int pass);
        /*0x285b1a8*/ int FindPass(string passName);
        /*0x285b1ec*/ void SetOverrideTag(string tag, string val);
        /*0x285b240*/ string GetTagImpl(string tag, bool currentSubShaderOnly, string defaultValue);
        /*0x285b29c*/ string GetTag(string tag, bool searchFallbacks, string defaultValue);
        /*0x285b2f8*/ string GetTag(string tag, bool searchFallbacks);
        /*0x285b380*/ void Lerp(UnityEngine.Material start, UnityEngine.Material end, float t);
        /*0x285b3e4*/ bool SetPass(int pass);
        /*0x285b428*/ void CopyPropertiesFromMaterial(UnityEngine.Material mat);
        /*0x285b46c*/ string[] GetShaderKeywords();
        /*0x285b4a8*/ void SetShaderKeywords(string[] names);
        /*0x285b4ec*/ string[] get_shaderKeywords();
        /*0x285b528*/ void set_shaderKeywords(string[] value);
        /*0x285b56c*/ int ComputeCRC();
        /*0x285b5a8*/ string[] GetTexturePropertyNames();
        /*0x285b5e4*/ int[] GetTexturePropertyNameIDs();
        /*0x285b620*/ void GetTexturePropertyNamesInternal(object outNames);
        /*0x285b664*/ void GetTexturePropertyNameIDsInternal(object outNames);
        /*0x285b6a8*/ void GetTexturePropertyNames(System.Collections.Generic.List<string> outNames);
        /*0x285b73c*/ void GetTexturePropertyNameIDs(System.Collections.Generic.List<int> outNames);
        /*0x285b7d0*/ void SetIntImpl(int name, int value);
        /*0x285b824*/ void SetFloatImpl(int name, float value);
        /*0x285b878*/ void SetColorImpl(int name, UnityEngine.Color value);
        /*0x285b928*/ void SetMatrixImpl(int name, UnityEngine.Matrix4x4 value);
        /*0x285b9d0*/ void SetTextureImpl(int name, UnityEngine.Texture value);
        /*0x285ba24*/ void SetRenderTextureImpl(int name, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element);
        /*0x285ba80*/ void SetBufferImpl(int name, UnityEngine.ComputeBuffer value);
        /*0x285bad4*/ void SetGraphicsBufferImpl(int name, UnityEngine.GraphicsBuffer value);
        /*0x285bb28*/ void SetConstantBufferImpl(int name, UnityEngine.ComputeBuffer value, int offset, int size);
        /*0x285bb94*/ void SetConstantGraphicsBufferImpl(int name, UnityEngine.GraphicsBuffer value, int offset, int size);
        /*0x285bc00*/ int GetIntImpl(int name);
        /*0x285bc44*/ float GetFloatImpl(int name);
        /*0x285bc88*/ UnityEngine.Color GetColorImpl(int name);
        /*0x285bd3c*/ UnityEngine.Matrix4x4 GetMatrixImpl(int name);
        /*0x285be0c*/ UnityEngine.Texture GetTextureImpl(int name);
        /*0x285be50*/ void SetFloatArrayImpl(int name, float[] values, int count);
        /*0x285beac*/ void SetVectorArrayImpl(int name, UnityEngine.Vector4[] values, int count);
        /*0x285bf08*/ void SetColorArrayImpl(int name, UnityEngine.Color[] values, int count);
        /*0x285bf64*/ void SetMatrixArrayImpl(int name, UnityEngine.Matrix4x4[] values, int count);
        /*0x285bfc0*/ float[] GetFloatArrayImpl(int name);
        /*0x285c004*/ UnityEngine.Vector4[] GetVectorArrayImpl(int name);
        /*0x285c048*/ UnityEngine.Color[] GetColorArrayImpl(int name);
        /*0x285c08c*/ UnityEngine.Matrix4x4[] GetMatrixArrayImpl(int name);
        /*0x285c0d0*/ int GetFloatArrayCountImpl(int name);
        /*0x285c114*/ int GetVectorArrayCountImpl(int name);
        /*0x285c158*/ int GetColorArrayCountImpl(int name);
        /*0x285c19c*/ int GetMatrixArrayCountImpl(int name);
        /*0x285c1e0*/ void ExtractFloatArrayImpl(int name, float[] val);
        /*0x285c234*/ void ExtractVectorArrayImpl(int name, UnityEngine.Vector4[] val);
        /*0x285c288*/ void ExtractColorArrayImpl(int name, UnityEngine.Color[] val);
        /*0x285c2dc*/ void ExtractMatrixArrayImpl(int name, UnityEngine.Matrix4x4[] val);
        /*0x285c330*/ UnityEngine.Vector4 GetTextureScaleAndOffsetImpl(int name);
        /*0x285c3e4*/ void SetTextureOffsetImpl(int name, UnityEngine.Vector2 offset);
        /*0x285c490*/ void SetTextureScaleImpl(int name, UnityEngine.Vector2 scale);
        /*0x285c53c*/ void SetFloatArray(int name, float[] values, int count);
        /*0x285c654*/ void SetVectorArray(int name, UnityEngine.Vector4[] values, int count);
        /*0x285c76c*/ void SetColorArray(int name, UnityEngine.Color[] values, int count);
        /*0x285c884*/ void SetMatrixArray(int name, UnityEngine.Matrix4x4[] values, int count);
        /*0x285c99c*/ void ExtractFloatArray(int name, System.Collections.Generic.List<float> values);
        /*0x285cb20*/ void ExtractVectorArray(int name, System.Collections.Generic.List<UnityEngine.Vector4> values);
        /*0x285cca4*/ void ExtractColorArray(int name, System.Collections.Generic.List<UnityEngine.Color> values);
        /*0x285ce28*/ void ExtractMatrixArray(int name, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        /*0x285cfac*/ void SetInt(string name, int value);
        /*0x285d038*/ void SetInt(int nameID, int value);
        /*0x285d08c*/ void SetFloat(string name, float value);
        /*0x285d10c*/ void SetFloat(int nameID, float value);
        /*0x285d160*/ void SetInteger(string name, int value);
        /*0x285d1e0*/ void SetInteger(int nameID, int value);
        /*0x2859898*/ void SetColor(string name, UnityEngine.Color value);
        /*0x2859894*/ void SetColor(int nameID, UnityEngine.Color value);
        /*0x285d234*/ void SetVector(string name, UnityEngine.Vector4 value);
        /*0x285d2b0*/ void SetVector(int nameID, UnityEngine.Vector4 value);
        /*0x285d2b4*/ void SetMatrix(string name, UnityEngine.Matrix4x4 value);
        /*0x285d350*/ void SetMatrix(int nameID, UnityEngine.Matrix4x4 value);
        /*0x2859b94*/ void SetTexture(string name, UnityEngine.Texture value);
        /*0x2859b40*/ void SetTexture(int nameID, UnityEngine.Texture value);
        /*0x285d3b4*/ void SetTexture(string name, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element);
        /*0x285d43c*/ void SetTexture(int nameID, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element);
        /*0x285d498*/ void SetBuffer(string name, UnityEngine.ComputeBuffer value);
        /*0x285d518*/ void SetBuffer(int nameID, UnityEngine.ComputeBuffer value);
        /*0x285d56c*/ void SetBuffer(string name, UnityEngine.GraphicsBuffer value);
        /*0x285d5ec*/ void SetBuffer(int nameID, UnityEngine.GraphicsBuffer value);
        /*0x285d640*/ void SetConstantBuffer(string name, UnityEngine.ComputeBuffer value, int offset, int size);
        /*0x285d6d8*/ void SetConstantBuffer(int nameID, UnityEngine.ComputeBuffer value, int offset, int size);
        /*0x285d744*/ void SetConstantBuffer(string name, UnityEngine.GraphicsBuffer value, int offset, int size);
        /*0x285d7dc*/ void SetConstantBuffer(int nameID, UnityEngine.GraphicsBuffer value, int offset, int size);
        /*0x285d848*/ void SetFloatArray(string name, System.Collections.Generic.List<float> values);
        /*0x285d8f4*/ void SetFloatArray(int nameID, System.Collections.Generic.List<float> values);
        /*0x285d974*/ void SetFloatArray(string name, float[] values);
        /*0x285d9dc*/ void SetFloatArray(int nameID, float[] values);
        /*0x285d9f4*/ void SetColorArray(string name, System.Collections.Generic.List<UnityEngine.Color> values);
        /*0x285daa0*/ void SetColorArray(int nameID, System.Collections.Generic.List<UnityEngine.Color> values);
        /*0x285db20*/ void SetColorArray(string name, UnityEngine.Color[] values);
        /*0x285db88*/ void SetColorArray(int nameID, UnityEngine.Color[] values);
        /*0x285dba0*/ void SetVectorArray(string name, System.Collections.Generic.List<UnityEngine.Vector4> values);
        /*0x285dc4c*/ void SetVectorArray(int nameID, System.Collections.Generic.List<UnityEngine.Vector4> values);
        /*0x285dccc*/ void SetVectorArray(string name, UnityEngine.Vector4[] values);
        /*0x285dd34*/ void SetVectorArray(int nameID, UnityEngine.Vector4[] values);
        /*0x285dd4c*/ void SetMatrixArray(string name, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        /*0x285ddf8*/ void SetMatrixArray(int nameID, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        /*0x285de78*/ void SetMatrixArray(string name, UnityEngine.Matrix4x4[] values);
        /*0x285dee0*/ void SetMatrixArray(int nameID, UnityEngine.Matrix4x4[] values);
        /*0x285def8*/ int GetInt(string name);
        /*0x285df84*/ int GetInt(int nameID);
        /*0x285dfe4*/ float GetFloat(string name);
        /*0x285e054*/ float GetFloat(int nameID);
        /*0x285e098*/ int GetInteger(string name);
        /*0x285e108*/ int GetInteger(int nameID);
        /*0x2859774*/ UnityEngine.Color GetColor(string name);
        /*0x2859770*/ UnityEngine.Color GetColor(int nameID);
        /*0x285e14c*/ UnityEngine.Vector4 GetVector(string name);
        /*0x285e198*/ UnityEngine.Vector4 GetVector(int nameID);
        /*0x285e19c*/ UnityEngine.Matrix4x4 GetMatrix(string name);
        /*0x285e258*/ UnityEngine.Matrix4x4 GetMatrix(int nameID);
        /*0x2859a08*/ UnityEngine.Texture GetTexture(string name);
        /*0x28599c4*/ UnityEngine.Texture GetTexture(int nameID);
        /*0x285e2e4*/ float[] GetFloatArray(string name);
        /*0x285e330*/ float[] GetFloatArray(int nameID);
        /*0x285e3b4*/ UnityEngine.Color[] GetColorArray(string name);
        /*0x285e400*/ UnityEngine.Color[] GetColorArray(int nameID);
        /*0x285e484*/ UnityEngine.Vector4[] GetVectorArray(string name);
        /*0x285e4d0*/ UnityEngine.Vector4[] GetVectorArray(int nameID);
        /*0x285e554*/ UnityEngine.Matrix4x4[] GetMatrixArray(string name);
        /*0x285e5a0*/ UnityEngine.Matrix4x4[] GetMatrixArray(int nameID);
        /*0x285e624*/ void GetFloatArray(string name, System.Collections.Generic.List<float> values);
        /*0x285e680*/ void GetFloatArray(int nameID, System.Collections.Generic.List<float> values);
        /*0x285e684*/ void GetColorArray(string name, System.Collections.Generic.List<UnityEngine.Color> values);
        /*0x285e6e0*/ void GetColorArray(int nameID, System.Collections.Generic.List<UnityEngine.Color> values);
        /*0x285e6e4*/ void GetVectorArray(string name, System.Collections.Generic.List<UnityEngine.Vector4> values);
        /*0x285e740*/ void GetVectorArray(int nameID, System.Collections.Generic.List<UnityEngine.Vector4> values);
        /*0x285e744*/ void GetMatrixArray(string name, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        /*0x285e7a0*/ void GetMatrixArray(int nameID, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
        /*0x2859dcc*/ void SetTextureOffset(string name, UnityEngine.Vector2 value);
        /*0x2859dc8*/ void SetTextureOffset(int nameID, UnityEngine.Vector2 value);
        /*0x2859fc0*/ void SetTextureScale(string name, UnityEngine.Vector2 value);
        /*0x2859fbc*/ void SetTextureScale(int nameID, UnityEngine.Vector2 value);
        /*0x2859cc0*/ UnityEngine.Vector2 GetTextureOffset(string name);
        /*0x2859ca8*/ UnityEngine.Vector2 GetTextureOffset(int nameID);
        /*0x2859ec0*/ UnityEngine.Vector2 GetTextureScale(string name);
        /*0x2859ebc*/ UnityEngine.Vector2 GetTextureScale(int nameID);
        /*0x285aad4*/ void EnableLocalKeyword_Injected(ref UnityEngine.Rendering.LocalKeyword keyword);
        /*0x285ab5c*/ void DisableLocalKeyword_Injected(ref UnityEngine.Rendering.LocalKeyword keyword);
        /*0x285abf4*/ void SetLocalKeyword_Injected(ref UnityEngine.Rendering.LocalKeyword keyword, bool value);
        /*0x285ac8c*/ bool IsLocalKeywordEnabled_Injected(ref UnityEngine.Rendering.LocalKeyword keyword);
        /*0x285b8d4*/ void SetColorImpl_Injected(int name, ref UnityEngine.Color value);
        /*0x285b97c*/ void SetMatrixImpl_Injected(int name, ref UnityEngine.Matrix4x4 value);
        /*0x285bce8*/ void GetColorImpl_Injected(int name, ref UnityEngine.Color ret);
        /*0x285bdb8*/ void GetMatrixImpl_Injected(int name, ref UnityEngine.Matrix4x4 ret);
        /*0x285c390*/ void GetTextureScaleAndOffsetImpl_Injected(int name, ref UnityEngine.Vector4 ret);
        /*0x285c43c*/ void SetTextureOffsetImpl_Injected(int name, ref UnityEngine.Vector2 offset);
        /*0x285c4e8*/ void SetTextureScaleImpl_Injected(int name, ref UnityEngine.Vector2 scale);
    }

    class BeforeRenderOrderAttribute : System.Attribute
    {
        /*0x10*/ int <order>k__BackingField;

        /*0x285f7b4*/ BeforeRenderOrderAttribute(int order);
        /*0x285f7a4*/ int get_order();
        /*0x285f7ac*/ void set_order(int value);
    }

    class BeforeRenderHelper
    {
        static /*0x0*/ System.Collections.Generic.List<UnityEngine.BeforeRenderHelper.OrderBlock> s_OrderBlocks;

        static /*0x28600e8*/ BeforeRenderHelper();
        static /*0x285f7dc*/ int GetUpdateOrder(UnityEngine.Events.UnityAction callback);
        static /*0x285f8f4*/ void RegisterCallback(UnityEngine.Events.UnityAction callback);
        static /*0x285fc3c*/ void UnregisterCallback(UnityEngine.Events.UnityAction callback);
        static /*0x285ff4c*/ void Invoke();

        struct OrderBlock
        {
            /*0x10*/ int order;
            /*0x18*/ UnityEngine.Events.UnityAction callback;
        }
    }

    enum RenderingPath
    {
        UsePlayerSettings = -1,
        VertexLit = 0,
        Forward = 1,
        DeferredLighting = 2,
        DeferredShading = 3,
    }

    enum TransparencySortMode
    {
        Default = 0,
        Perspective = 1,
        Orthographic = 2,
        CustomAxis = 3,
    }

    enum StereoTargetEyeMask
    {
        None = 0,
        Left = 1,
        Right = 2,
        Both = 3,
    }

    enum CameraType
    {
        Game = 1,
        SceneView = 2,
        Preview = 4,
        VR = 8,
        Reflection = 16,
    }

    enum ComputeBufferType
    {
        Default = 0,
        Raw = 1,
        Append = 2,
        Counter = 4,
        Constant = 8,
        Structured = 16,
        DrawIndirect = 256,
        IndirectArguments = 256,
        GPUMemory = 512,
    }

    enum LightType
    {
        Spot = 0,
        Directional = 1,
        Point = 2,
        Area = 3,
        Rectangle = 3,
        Disc = 4,
    }

    enum LightShape
    {
        Cone = 0,
        Pyramid = 1,
        Box = 2,
    }

    enum LightRenderMode
    {
        Auto = 0,
        ForcePixel = 1,
        ForceVertex = 2,
    }

    enum LightShadows
    {
        None = 0,
        Hard = 1,
        Soft = 2,
    }

    enum FogMode
    {
        Linear = 1,
        Exponential = 2,
        ExponentialSquared = 3,
    }

    enum LightmapBakeType
    {
        Realtime = 4,
        Baked = 2,
        Mixed = 1,
    }

    enum MixedLightingMode
    {
        IndirectOnly = 0,
        Shadowmask = 2,
        Subtractive = 1,
    }

    enum ReceiveGI
    {
        Lightmaps = 1,
        LightProbes = 2,
    }

    enum LightmapCompression
    {
        None = 0,
        LowQuality = 1,
        NormalQuality = 2,
        HighQuality = 3,
    }

    enum QualityLevel
    {
        Fastest = 0,
        Fast = 1,
        Simple = 2,
        Good = 3,
        Beautiful = 4,
        Fantastic = 5,
    }

    enum ShadowProjection
    {
        CloseFit = 0,
        StableFit = 1,
    }

    enum ShadowQuality
    {
        Disable = 0,
        HardOnly = 1,
        All = 2,
    }

    enum ShadowResolution
    {
        Low = 0,
        Medium = 1,
        High = 2,
        VeryHigh = 3,
    }

    enum ShadowmaskMode
    {
        Shadowmask = 0,
        DistanceShadowmask = 1,
    }

    enum ShadowObjectsFilter
    {
        AllObjects = 0,
        DynamicOnly = 1,
        StaticOnly = 2,
    }

    enum CameraClearFlags
    {
        Skybox = 1,
        Color = 2,
        SolidColor = 2,
        Depth = 3,
        Nothing = 4,
    }

    enum DepthTextureMode
    {
        None = 0,
        Depth = 1,
        DepthNormals = 2,
        MotionVectors = 4,
    }

    enum TexGenMode
    {
        None = 0,
        SphereMap = 1,
        Object = 2,
        EyeLinear = 3,
        CubeReflect = 4,
        CubeNormal = 5,
    }

    enum AnisotropicFiltering
    {
        Disable = 0,
        Enable = 1,
        ForceEnable = 2,
    }

    enum BlendWeights
    {
        OneBone = 1,
        TwoBones = 2,
        FourBones = 4,
    }

    enum SkinWeights
    {
        OneBone = 1,
        TwoBones = 2,
        FourBones = 4,
        Unlimited = 255,
    }

    enum MeshTopology
    {
        Triangles = 0,
        Quads = 2,
        Lines = 3,
        LineStrip = 4,
        Points = 5,
    }

    enum SkinQuality
    {
        Auto = 0,
        Bone1 = 1,
        Bone2 = 2,
        Bone4 = 4,
    }

    enum ColorSpace
    {
        Uninitialized = -1,
        Gamma = 0,
        Linear = 1,
    }

    enum ColorGamut
    {
        sRGB = 0,
        Rec709 = 1,
        Rec2020 = 2,
        DisplayP3 = 3,
        HDR10 = 4,
        DolbyHDR = 5,
    }

    enum ScreenOrientation
    {
        Unknown = 0,
        Landscape = 3,
        Portrait = 1,
        PortraitUpsideDown = 2,
        LandscapeLeft = 3,
        LandscapeRight = 4,
        AutoRotation = 5,
    }

    enum FilterMode
    {
        Point = 0,
        Bilinear = 1,
        Trilinear = 2,
    }

    enum TextureWrapMode
    {
        Repeat = 0,
        Clamp = 1,
        Mirror = 2,
        MirrorOnce = 3,
    }

    enum NPOTSupport
    {
        None = 0,
        Restricted = 1,
        Full = 2,
    }

    enum TextureFormat
    {
        Alpha8 = 1,
        ARGB4444 = 2,
        RGB24 = 3,
        RGBA32 = 4,
        ARGB32 = 5,
        RGB565 = 7,
        R16 = 9,
        DXT1 = 10,
        DXT5 = 12,
        RGBA4444 = 13,
        BGRA32 = 14,
        RHalf = 15,
        RGHalf = 16,
        RGBAHalf = 17,
        RFloat = 18,
        RGFloat = 19,
        RGBAFloat = 20,
        YUY2 = 21,
        RGB9e5Float = 22,
        BC4 = 26,
        BC5 = 27,
        BC6H = 24,
        BC7 = 25,
        DXT1Crunched = 28,
        DXT5Crunched = 29,
        PVRTC_RGB2 = 30,
        PVRTC_RGBA2 = 31,
        PVRTC_RGB4 = 32,
        PVRTC_RGBA4 = 33,
        ETC_RGB4 = 34,
        EAC_R = 41,
        EAC_R_SIGNED = 42,
        EAC_RG = 43,
        EAC_RG_SIGNED = 44,
        ETC2_RGB = 45,
        ETC2_RGBA1 = 46,
        ETC2_RGBA8 = 47,
        ASTC_4x4 = 48,
        ASTC_5x5 = 49,
        ASTC_6x6 = 50,
        ASTC_8x8 = 51,
        ASTC_10x10 = 52,
        ASTC_12x12 = 53,
        ETC_RGB4_3DS = 60,
        ETC_RGBA8_3DS = 61,
        RG16 = 62,
        R8 = 63,
        ETC_RGB4Crunched = 64,
        ETC2_RGBA8Crunched = 65,
        ASTC_HDR_4x4 = 66,
        ASTC_HDR_5x5 = 67,
        ASTC_HDR_6x6 = 68,
        ASTC_HDR_8x8 = 69,
        ASTC_HDR_10x10 = 70,
        ASTC_HDR_12x12 = 71,
        RG32 = 72,
        RGB48 = 73,
        RGBA64 = 74,
        ASTC_RGB_4x4 = 48,
        ASTC_RGB_5x5 = 49,
        ASTC_RGB_6x6 = 50,
        ASTC_RGB_8x8 = 51,
        ASTC_RGB_10x10 = 52,
        ASTC_RGB_12x12 = 53,
        ASTC_RGBA_4x4 = 54,
        ASTC_RGBA_5x5 = 55,
        ASTC_RGBA_6x6 = 56,
        ASTC_RGBA_8x8 = 57,
        ASTC_RGBA_10x10 = 58,
        ASTC_RGBA_12x12 = 59,
    }

    enum CubemapFace
    {
        Unknown = -1,
        PositiveX = 0,
        NegativeX = 1,
        PositiveY = 2,
        NegativeY = 3,
        PositiveZ = 4,
        NegativeZ = 5,
    }

    enum RenderTextureFormat
    {
        ARGB32 = 0,
        Depth = 1,
        ARGBHalf = 2,
        Shadowmap = 3,
        RGB565 = 4,
        ARGB4444 = 5,
        ARGB1555 = 6,
        Default = 7,
        ARGB2101010 = 8,
        DefaultHDR = 9,
        ARGB64 = 10,
        ARGBFloat = 11,
        RGFloat = 12,
        RGHalf = 13,
        RFloat = 14,
        RHalf = 15,
        R8 = 16,
        ARGBInt = 17,
        RGInt = 18,
        RInt = 19,
        BGRA32 = 20,
        RGB111110Float = 22,
        RG32 = 23,
        RGBAUShort = 24,
        RG16 = 25,
        BGRA10101010_XR = 26,
        BGR101010_XR = 27,
        R16 = 28,
    }

    enum VRTextureUsage
    {
        None = 0,
        OneEye = 1,
        TwoEyes = 2,
        DeviceSpecific = 3,
    }

    enum RenderTextureCreationFlags
    {
        MipMap = 1,
        AutoGenerateMips = 2,
        SRGB = 4,
        EyeTexture = 8,
        EnableRandomWrite = 16,
        CreatedFromScript = 32,
        AllowVerticalFlip = 128,
        NoResolvedColorSurface = 256,
        DynamicallyScalable = 1024,
        BindMS = 2048,
    }

    enum RenderTextureReadWrite
    {
        Default = 0,
        Linear = 1,
        sRGB = 2,
    }

    enum RenderTextureMemoryless
    {
        None = 0,
        Color = 1,
        Depth = 2,
        MSAA = 4,
    }

    enum HDRDisplaySupportFlags
    {
        None = 0,
        Supported = 1,
        RuntimeSwitchable = 2,
        AutomaticTonemapping = 4,
    }

    enum LightmapsMode
    {
        NonDirectional = 0,
        CombinedDirectional = 1,
    }

    enum MaterialGlobalIlluminationFlags
    {
        None = 0,
        RealtimeEmissive = 1,
        BakedEmissive = 2,
        EmissiveIsBlack = 4,
        AnyEmissive = 3,
    }

    class LightProbeProxyVolume : UnityEngine.Behaviour
    {
        static /*0x2860174*/ bool get_isFeatureSupported();
        /*0x2860a44*/ LightProbeProxyVolume();
        /*0x286019c*/ UnityEngine.Bounds get_boundsGlobal();
        /*0x2860248*/ UnityEngine.Vector3 get_sizeCustom();
        /*0x28602e8*/ void set_sizeCustom(UnityEngine.Vector3 value);
        /*0x2860380*/ UnityEngine.Vector3 get_originCustom();
        /*0x2860420*/ void set_originCustom(UnityEngine.Vector3 value);
        /*0x28604b8*/ float get_probeDensity();
        /*0x28604f4*/ void set_probeDensity(float value);
        /*0x2860540*/ int get_gridResolutionX();
        /*0x286057c*/ void set_gridResolutionX(int value);
        /*0x28605c0*/ int get_gridResolutionY();
        /*0x28605fc*/ void set_gridResolutionY(int value);
        /*0x2860640*/ int get_gridResolutionZ();
        /*0x286067c*/ void set_gridResolutionZ(int value);
        /*0x28606c0*/ UnityEngine.LightProbeProxyVolume.BoundingBoxMode get_boundingBoxMode();
        /*0x28606fc*/ void set_boundingBoxMode(UnityEngine.LightProbeProxyVolume.BoundingBoxMode value);
        /*0x2860740*/ UnityEngine.LightProbeProxyVolume.ResolutionMode get_resolutionMode();
        /*0x286077c*/ void set_resolutionMode(UnityEngine.LightProbeProxyVolume.ResolutionMode value);
        /*0x28607c0*/ UnityEngine.LightProbeProxyVolume.ProbePositionMode get_probePositionMode();
        /*0x28607fc*/ void set_probePositionMode(UnityEngine.LightProbeProxyVolume.ProbePositionMode value);
        /*0x2860840*/ UnityEngine.LightProbeProxyVolume.RefreshMode get_refreshMode();
        /*0x286087c*/ void set_refreshMode(UnityEngine.LightProbeProxyVolume.RefreshMode value);
        /*0x28608c0*/ UnityEngine.LightProbeProxyVolume.QualityMode get_qualityMode();
        /*0x28608fc*/ void set_qualityMode(UnityEngine.LightProbeProxyVolume.QualityMode value);
        /*0x2860940*/ UnityEngine.LightProbeProxyVolume.DataFormat get_dataFormat();
        /*0x286097c*/ void set_dataFormat(UnityEngine.LightProbeProxyVolume.DataFormat value);
        /*0x28609c0*/ void Update();
        /*0x2860a00*/ void SetDirtyFlag(bool flag);
        /*0x2860204*/ void get_boundsGlobal_Injected(ref UnityEngine.Bounds ret);
        /*0x28602a4*/ void get_sizeCustom_Injected(ref UnityEngine.Vector3 ret);
        /*0x286033c*/ void set_sizeCustom_Injected(ref UnityEngine.Vector3 value);
        /*0x28603dc*/ void get_originCustom_Injected(ref UnityEngine.Vector3 ret);
        /*0x2860474*/ void set_originCustom_Injected(ref UnityEngine.Vector3 value);

        enum ResolutionMode
        {
            Automatic = 0,
            Custom = 1,
        }

        enum BoundingBoxMode
        {
            AutomaticLocal = 0,
            AutomaticWorld = 1,
            Custom = 2,
        }

        enum ProbePositionMode
        {
            CellCorner = 0,
            CellCenter = 1,
        }

        enum RefreshMode
        {
            Automatic = 0,
            EveryFrame = 1,
            ViaScripting = 2,
        }

        enum QualityMode
        {
            Low = 0,
            Normal = 1,
        }

        enum DataFormat
        {
            HalfFloat = 0,
            Float = 1,
        }
    }

    enum CustomRenderTextureInitializationSource
    {
        TextureAndColor = 0,
        Material = 1,
    }

    enum CustomRenderTextureUpdateMode
    {
        OnLoad = 0,
        Realtime = 1,
        OnDemand = 2,
    }

    enum CustomRenderTextureUpdateZoneSpace
    {
        Normalized = 0,
        Pixel = 1,
    }

    enum MotionVectorGenerationMode
    {
        Camera = 0,
        Object = 1,
        ForceNoMotion = 2,
    }

    enum LineTextureMode
    {
        Stretch = 0,
        Tile = 1,
        DistributePerSegment = 2,
        RepeatPerSegment = 3,
    }

    enum LineAlignment
    {
        View = 0,
        Local = 1,
        TransformZ = 1,
    }

    class GraphicsBuffer : System.IDisposable
    {
        /*0x10*/ nint m_Ptr;

        static /*0x2860c70*/ bool RequiresCompute(UnityEngine.GraphicsBuffer.Target target);
        static /*0x2860c7c*/ bool IsVertexIndexOrCopyOnly(UnityEngine.GraphicsBuffer.Target target);
        static /*0x2860c88*/ nint InitBuffer(UnityEngine.GraphicsBuffer.Target target, int count, int stride);
        static /*0x2860c34*/ void DestroyBuffer(UnityEngine.GraphicsBuffer buf);
        static /*0x2861040*/ bool IsValidBuffer(UnityEngine.GraphicsBuffer buf);
        static /*0x2861c30*/ void CopyCountCC(UnityEngine.ComputeBuffer src, UnityEngine.ComputeBuffer dst, int dstOffsetBytes);
        static /*0x2861c84*/ void CopyCountGC(UnityEngine.GraphicsBuffer src, UnityEngine.ComputeBuffer dst, int dstOffsetBytes);
        static /*0x2861cd8*/ void CopyCountCG(UnityEngine.ComputeBuffer src, UnityEngine.GraphicsBuffer dst, int dstOffsetBytes);
        static /*0x2861d2c*/ void CopyCountGG(UnityEngine.GraphicsBuffer src, UnityEngine.GraphicsBuffer dst, int dstOffsetBytes);
        static /*0x2861d80*/ void CopyCount(UnityEngine.ComputeBuffer src, UnityEngine.ComputeBuffer dst, int dstOffsetBytes);
        static /*0x2861dd4*/ void CopyCount(UnityEngine.GraphicsBuffer src, UnityEngine.ComputeBuffer dst, int dstOffsetBytes);
        static /*0x2861e28*/ void CopyCount(UnityEngine.ComputeBuffer src, UnityEngine.GraphicsBuffer dst, int dstOffsetBytes);
        static /*0x2861e7c*/ void CopyCount(UnityEngine.GraphicsBuffer src, UnityEngine.GraphicsBuffer dst, int dstOffsetBytes);
        /*0x2860cdc*/ GraphicsBuffer(UnityEngine.GraphicsBuffer.Target target, int count, int stride);
        /*0x2860a54*/ void Finalize();
        /*0x2860bd0*/ void Dispose();
        /*0x2860aec*/ void Dispose(bool disposing);
        /*0x286103c*/ void Release();
        /*0x286107c*/ bool IsValid();
        /*0x286110c*/ int get_count();
        /*0x2861148*/ int get_stride();
        /*0x2861184*/ UnityEngine.GraphicsBuffer.Target get_target();
        /*0x28611c0*/ void SetData(System.Array data);
        void SetData<T>(System.Collections.Generic.List<T> data);
        void SetData<T>(Unity.Collections.NativeArray<T> data);
        /*0x286139c*/ void SetData(System.Array data, int managedBufferStartIndex, int graphicsBufferStartIndex, int count);
        void SetData<T>(System.Collections.Generic.List<T> data, int managedBufferStartIndex, int graphicsBufferStartIndex, int count);
        void SetData<T>(Unity.Collections.NativeArray<T> data, int nativeBufferStartIndex, int graphicsBufferStartIndex, int count);
        /*0x2861618*/ void InternalSetNativeData(nint data, int nativeBufferStartIndex, int graphicsBufferStartIndex, int count, int elemSize);
        /*0x2861328*/ void InternalSetData(System.Array data, int managedBufferStartIndex, int graphicsBufferStartIndex, int count, int elemSize);
        /*0x286168c*/ void GetData(System.Array data);
        /*0x28618ac*/ void GetData(System.Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count);
        /*0x2861838*/ void InternalGetData(System.Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count, int elemSize);
        /*0x2861b28*/ nint GetNativeBufferPtr();
        /*0x2861b64*/ void set_name(string value);
        /*0x2861ba8*/ void SetName(string name);
        /*0x2861bec*/ void SetCounterValue(uint counterValue);

        enum Target
        {
            Vertex = 1,
            Index = 2,
            CopySource = 4,
            CopyDestination = 8,
            Structured = 16,
            Raw = 32,
            Append = 64,
            Counter = 128,
            IndirectArguments = 256,
            Constant = 512,
        }
    }

    class Display
    {
        static /*0x0*/ UnityEngine.Display[] displays;
        static /*0x8*/ UnityEngine.Display _mainDisplay;
        static /*0x10*/ int m_ActiveEditorGameViewTarget;
        static /*0x18*/ UnityEngine.Display.DisplaysUpdatedDelegate onDisplaysUpdated;
        /*0x10*/ nint nativeDisplay;

        static /*0x286310c*/ Display();
        static /*0x2862b34*/ bool MultiDisplayLicense();
        static /*0x2862b3c*/ UnityEngine.Vector3 RelativeMouseAt(UnityEngine.Vector3 inputMouseCoordinates);
        static /*0x2862c68*/ UnityEngine.Display get_main();
        static /*0x2862cc0*/ int get_activeEditorGameViewTarget();
        static /*0x2862d18*/ void set_activeEditorGameViewTarget(int value);
        static /*0x2862d74*/ void RecreateDisplayList(nint[] nativeDisplay);
        static /*0x2862ec0*/ void FireDisplaysUpdated();
        static /*0x2862f54*/ void add_onDisplaysUpdated(UnityEngine.Display.DisplaysUpdatedDelegate value);
        static /*0x2863030*/ void remove_onDisplaysUpdated(UnityEngine.Display.DisplaysUpdatedDelegate value);
        static /*0x2862144*/ void GetSystemExtImpl(nint nativeDisplay, ref int w, ref int h);
        static /*0x2861fc8*/ void GetRenderingExtImpl(nint nativeDisplay, ref int w, ref int h);
        static /*0x28622c4*/ void GetRenderingBuffersImpl(nint nativeDisplay, ref UnityEngine.RenderBuffer color, ref UnityEngine.RenderBuffer depth);
        static /*0x2862ae0*/ void SetRenderingResolutionImpl(nint nativeDisplay, int w, int h);
        static /*0x2862840*/ void ActivateDisplayImpl(nint nativeDisplay, int width, int height, int refreshRate);
        static /*0x28629e4*/ void SetParamsImpl(nint nativeDisplay, int width, int height, int x, int y);
        static /*0x2862c0c*/ int RelativeMouseAtImpl(int x, int y, ref int rx, ref int ry);
        static /*0x2862428*/ bool GetActiveImpl(nint nativeDisplay);
        static /*0x28626cc*/ bool RequiresBlitToBackbufferImpl(nint nativeDisplay);
        static /*0x2862780*/ bool RequiresSrgbBlitToBackbufferImpl(nint nativeDisplay);
        /*0x2861ed0*/ Display();
        /*0x2861f0c*/ Display(nint nativeDisplay);
        /*0x2861f34*/ int get_renderingWidth();
        /*0x286201c*/ int get_renderingHeight();
        /*0x28620b0*/ int get_systemWidth();
        /*0x2862198*/ int get_systemHeight();
        /*0x286222c*/ UnityEngine.RenderBuffer get_colorBuffer();
        /*0x2862318*/ UnityEngine.RenderBuffer get_depthBuffer();
        /*0x28623b0*/ bool get_active();
        /*0x2862464*/ bool get_requiresBlitToBackbuffer();
        /*0x2862708*/ bool get_requiresSrgbBlitToBackbuffer();
        /*0x28627bc*/ void Activate();
        /*0x286289c*/ void Activate(int width, int height, int refreshRate);
        /*0x286293c*/ void SetParams(int width, int height, int x, int y);
        /*0x2862a50*/ void SetRenderingResolution(int w, int h);

        class DisplaysUpdatedDelegate : System.MulticastDelegate
        {
            /*0x286321c*/ DisplaysUpdatedDelegate(object object, nint method);
            /*0x28632d8*/ void Invoke();
        }
    }

    enum EnabledOrientation
    {
        kAutorotateToPortrait = 1,
        kAutorotateToPortraitUpsideDown = 2,
        kAutorotateToLandscapeLeft = 4,
        kAutorotateToLandscapeRight = 8,
    }

    enum FullScreenMode
    {
        ExclusiveFullScreen = 0,
        FullScreenWindow = 1,
        MaximizedWindow = 2,
        Windowed = 3,
    }

    struct RefreshRate : System.IEquatable<UnityEngine.RefreshRate>
    {
        /*0x10*/ uint numerator;
        /*0x14*/ uint denominator;

        /*0x28632ec*/ double get_value();
        /*0x2863300*/ bool Equals(UnityEngine.RefreshRate other);
    }

    struct DisplayInfo : System.IEquatable<UnityEngine.DisplayInfo>
    {
        /*0x10*/ ulong handle;
        /*0x18*/ int width;
        /*0x1c*/ int height;
        /*0x20*/ UnityEngine.RefreshRate refreshRate;
        /*0x28*/ UnityEngine.RectInt workArea;
        /*0x38*/ string name;

        /*0x2863328*/ bool Equals(UnityEngine.DisplayInfo other);
    }

    class SleepTimeout
    {
        static int NeverSleep = -1;
        static int SystemSetting = -2;

        /*0x2863414*/ SleepTimeout();
    }

    enum ComputeBufferMode
    {
        Immutable = 0,
        Dynamic = 1,
        Circular = 2,
        StreamOut = 3,
        SubUpdates = 4,
    }

    class GL
    {
        static int TRIANGLES = 4;
        static int TRIANGLE_STRIP = 5;
        static int QUADS = 7;
        static int LINES = 1;
        static int LINE_STRIP = 2;

        static /*0x286341c*/ void Vertex3(float x, float y, float z);
        static /*0x286346c*/ void Vertex(UnityEngine.Vector3 v);
        static /*0x28634bc*/ void Vertices(UnityEngine.Vector3* v, UnityEngine.Vector3* coords, UnityEngine.Vector4* colors, int length);
        static /*0x2863518*/ void TexCoord3(float x, float y, float z);
        static /*0x2863568*/ void TexCoord(UnityEngine.Vector3 v);
        static /*0x28635b8*/ void TexCoord2(float x, float y);
        static /*0x28635fc*/ void MultiTexCoord3(int unit, float x, float y, float z);
        static /*0x2863660*/ void MultiTexCoord(int unit, UnityEngine.Vector3 v);
        static /*0x28636c4*/ void MultiTexCoord2(int unit, float x, float y);
        static /*0x286371c*/ void ImmediateColor(float r, float g, float b, float a);
        static /*0x2863774*/ void Color(UnityEngine.Color c);
        static /*0x28637cc*/ bool get_wireframe();
        static /*0x28637f4*/ void set_wireframe(bool value);
        static /*0x2863830*/ bool get_sRGBWrite();
        static /*0x2863858*/ void set_sRGBWrite(bool value);
        static /*0x2863894*/ bool get_invertCulling();
        static /*0x28638bc*/ void set_invertCulling(bool value);
        static /*0x28638f8*/ void Flush();
        static /*0x2863920*/ void RenderTargetBarrier();
        static /*0x2863948*/ UnityEngine.Matrix4x4 GetWorldViewMatrix();
        static /*0x28639e8*/ void SetViewMatrix(UnityEngine.Matrix4x4 m);
        static /*0x2863a60*/ UnityEngine.Matrix4x4 get_modelview();
        static /*0x2863ad4*/ void set_modelview(UnityEngine.Matrix4x4 value);
        static /*0x2863b20*/ void MultMatrix(UnityEngine.Matrix4x4 m);
        static /*0x2863b98*/ void IssuePluginEvent(int eventID);
        static /*0x2863bd4*/ void SetRevertBackfacing(bool revertBackFaces);
        static /*0x2863c10*/ void PushMatrix();
        static /*0x2863c38*/ void PopMatrix();
        static /*0x2863c60*/ void LoadIdentity();
        static /*0x2863c88*/ void LoadOrtho();
        static /*0x2863cb0*/ void LoadPixelMatrix();
        static /*0x2863cd8*/ void LoadProjectionMatrix(UnityEngine.Matrix4x4 mat);
        static /*0x2863d50*/ void InvalidateState();
        static /*0x2863d78*/ UnityEngine.Matrix4x4 GetGPUProjectionMatrix(UnityEngine.Matrix4x4 proj, bool renderIntoTexture);
        static /*0x2863e48*/ void GLLoadPixelMatrixScript(float left, float right, float bottom, float top);
        static /*0x2863ea0*/ void LoadPixelMatrix(float left, float right, float bottom, float top);
        static /*0x2863ef8*/ void GLIssuePluginEvent(nint callback, int eventID);
        static /*0x2863f3c*/ void IssuePluginEvent(nint callback, int eventID);
        static /*0x286402c*/ void Begin(int mode);
        static /*0x2864068*/ void End();
        static /*0x2864090*/ void GLClear(bool clearDepth, bool clearColor, UnityEngine.Color backgroundColor, float depth);
        static /*0x2864160*/ void Clear(bool clearDepth, bool clearColor, UnityEngine.Color backgroundColor, float depth);
        static /*0x286416c*/ void Clear(bool clearDepth, bool clearColor, UnityEngine.Color backgroundColor);
        static /*0x286417c*/ void Viewport(UnityEngine.Rect pixelRect);
        static /*0x28641fc*/ void ClearWithSkybox(bool clearDepth, UnityEngine.Camera camera);
        static /*0x28639ac*/ void GetWorldViewMatrix_Injected(ref UnityEngine.Matrix4x4 ret);
        static /*0x2863a24*/ void SetViewMatrix_Injected(ref UnityEngine.Matrix4x4 m);
        static /*0x2863b5c*/ void MultMatrix_Injected(ref UnityEngine.Matrix4x4 m);
        static /*0x2863d14*/ void LoadProjectionMatrix_Injected(ref UnityEngine.Matrix4x4 mat);
        static /*0x2863df4*/ void GetGPUProjectionMatrix_Injected(ref UnityEngine.Matrix4x4 proj, bool renderIntoTexture, ref UnityEngine.Matrix4x4 ret);
        static /*0x28640fc*/ void GLClear_Injected(bool clearDepth, bool clearColor, ref UnityEngine.Color backgroundColor, float depth);
        static /*0x28641c0*/ void Viewport_Injected(ref UnityEngine.Rect pixelRect);
        /*0x2864240*/ GL();
    }

    class ScalableBufferManager
    {
        static /*0x2864248*/ float get_widthScaleFactor();
        static /*0x2864270*/ float get_heightScaleFactor();
        static /*0x2864298*/ void ResizeBuffers(float widthScale, float heightScale);
    }

    struct FrameTiming
    {
        /*0x10*/ ulong cpuTimePresentCalled;
        /*0x18*/ double cpuFrameTime;
        /*0x20*/ ulong cpuTimeFrameComplete;
        /*0x28*/ double gpuFrameTime;
        /*0x30*/ float heightScale;
        /*0x34*/ float widthScale;
        /*0x38*/ uint syncInterval;
    }

    class FrameTimingManager
    {
        static /*0x28642d8*/ void CaptureFrameTimings();
        static /*0x2864300*/ uint GetLatestTimings(uint numFrames, UnityEngine.FrameTiming[] timings);
        static /*0x2864344*/ float GetVSyncsPerSecond();
        static /*0x286436c*/ ulong GetGpuTimerFrequency();
        static /*0x2864394*/ ulong GetCpuTimerFrequency();
    }

    class GeometryUtility
    {
        static /*0x28643bc*/ bool TestPlanesAABB(UnityEngine.Plane[] planes, UnityEngine.Bounds bounds);
        static /*0x2864444*/ void Internal_ExtractPlanes(UnityEngine.Plane[] planes, UnityEngine.Matrix4x4 worldToProjectionMatrix);
        static /*0x28644cc*/ UnityEngine.Bounds Internal_CalculateBounds(UnityEngine.Vector3[] positions, UnityEngine.Matrix4x4 transform);
        static /*0x2864590*/ UnityEngine.Plane[] CalculateFrustumPlanes(UnityEngine.Camera camera);
        static /*0x2864704*/ UnityEngine.Plane[] CalculateFrustumPlanes(UnityEngine.Matrix4x4 worldToProjectionMatrix);
        static /*0x28645f0*/ void CalculateFrustumPlanes(UnityEngine.Camera camera, UnityEngine.Plane[] planes);
        static /*0x286477c*/ void CalculateFrustumPlanes(UnityEngine.Matrix4x4 worldToProjectionMatrix, UnityEngine.Plane[] planes);
        static /*0x2864958*/ UnityEngine.Bounds CalculateBounds(UnityEngine.Vector3[] positions, UnityEngine.Matrix4x4 transform);
        static /*0x2864a88*/ bool TryCreatePlaneFromPolygon(UnityEngine.Vector3[] vertices, ref UnityEngine.Plane plane);
        static /*0x2864400*/ bool TestPlanesAABB_Injected(UnityEngine.Plane[] planes, ref UnityEngine.Bounds bounds);
        static /*0x2864488*/ void Internal_ExtractPlanes_Injected(UnityEngine.Plane[] planes, ref UnityEngine.Matrix4x4 worldToProjectionMatrix);
        static /*0x286453c*/ void Internal_CalculateBounds_Injected(UnityEngine.Vector3[] positions, ref UnityEngine.Matrix4x4 transform, ref UnityEngine.Bounds ret);
        /*0x2864fc0*/ GeometryUtility();
    }

    class LightmapData
    {
        /*0x10*/ UnityEngine.Texture2D m_Light;
        /*0x18*/ UnityEngine.Texture2D m_Dir;
        /*0x20*/ UnityEngine.Texture2D m_ShadowMask;

        /*0x2865008*/ LightmapData();
        /*0x2864fc8*/ UnityEngine.Texture2D get_lightmapLight();
        /*0x2864fd0*/ void set_lightmapLight(UnityEngine.Texture2D value);
        /*0x2864fd8*/ UnityEngine.Texture2D get_lightmapColor();
        /*0x2864fe0*/ void set_lightmapColor(UnityEngine.Texture2D value);
        /*0x2864fe8*/ UnityEngine.Texture2D get_lightmapDir();
        /*0x2864ff0*/ void set_lightmapDir(UnityEngine.Texture2D value);
        /*0x2864ff8*/ UnityEngine.Texture2D get_shadowMask();
        /*0x2865000*/ void set_shadowMask(UnityEngine.Texture2D value);
    }

    enum D3DHDRDisplayBitDepth
    {
        D3DHDRDisplayBitDepth10 = 0,
        D3DHDRDisplayBitDepth16 = 1,
    }

    class HDROutputSettings
    {
        static /*0x0*/ UnityEngine.HDROutputSettings[] displays;
        static /*0x8*/ UnityEngine.HDROutputSettings _mainDisplay;
        /*0x10*/ int m_DisplayIndex;

        static /*0x2865aac*/ HDROutputSettings();
        static /*0x2865054*/ UnityEngine.HDROutputSettings get_main();
        static /*0x28659e0*/ void SetPaperWhiteInNits(float paperWhite);
        static /*0x28650ac*/ bool GetActive(int displayIndex);
        static /*0x28650e8*/ bool GetAvailable(int displayIndex);
        static /*0x286519c*/ bool GetAutomaticHDRTonemapping(int displayIndex);
        static /*0x2865260*/ void SetAutomaticHDRTonemapping(int displayIndex, bool scripted);
        static /*0x286531c*/ UnityEngine.ColorGamut GetDisplayColorGamut(int displayIndex);
        static /*0x2865408*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetGraphicsFormat(int displayIndex);
        static /*0x2865534*/ float GetPaperWhiteNits(int displayIndex);
        static /*0x28655f8*/ void SetPaperWhiteNits(int displayIndex, float paperWhite);
        static /*0x28656bc*/ int GetMaxFullFrameToneMapLuminance(int displayIndex);
        static /*0x2865770*/ int GetMaxToneMapLuminance(int displayIndex);
        static /*0x2865824*/ int GetMinToneMapLuminance(int displayIndex);
        static /*0x28658d8*/ bool GetHDRModeChangeRequested(int displayIndex);
        static /*0x286599c*/ void RequestHDRModeChangeInternal(int displayIndex, bool enabled);
        /*0x2865010*/ HDROutputSettings();
        /*0x286502c*/ HDROutputSettings(int displayIndex);
        /*0x2862654*/ bool get_active();
        /*0x28625dc*/ bool get_available();
        /*0x2865124*/ bool get_automaticHDRTonemapping();
        /*0x28651d8*/ void set_automaticHDRTonemapping(bool value);
        /*0x28652a4*/ UnityEngine.ColorGamut get_displayColorGamut();
        /*0x2865358*/ UnityEngine.RenderTextureFormat get_format();
        /*0x2865444*/ UnityEngine.Experimental.Rendering.GraphicsFormat get_graphicsFormat();
        /*0x28654bc*/ float get_paperWhiteNits();
        /*0x2865570*/ void set_paperWhiteNits(float value);
        /*0x2865644*/ int get_maxFullFrameToneMapLuminance();
        /*0x28656f8*/ int get_maxToneMapLuminance();
        /*0x28657ac*/ int get_minToneMapLuminance();
        /*0x2865860*/ bool get_HDRModeChangeRequested();
        /*0x2865914*/ void RequestHDRModeChange(bool enabled);
    }

    struct BoneWeight : System.IEquatable<UnityEngine.BoneWeight>
    {
        /*0x10*/ float m_Weight0;
        /*0x14*/ float m_Weight1;
        /*0x18*/ float m_Weight2;
        /*0x1c*/ float m_Weight3;
        /*0x20*/ int m_BoneIndex0;
        /*0x24*/ int m_BoneIndex1;
        /*0x28*/ int m_BoneIndex2;
        /*0x2c*/ int m_BoneIndex3;

        static /*0x2865e78*/ bool op_Equality(UnityEngine.BoneWeight lhs, UnityEngine.BoneWeight rhs);
        static /*0x2865f0c*/ bool op_Inequality(UnityEngine.BoneWeight lhs, UnityEngine.BoneWeight rhs);
        /*0x2865b90*/ float get_weight0();
        /*0x2865b98*/ void set_weight0(float value);
        /*0x2865ba0*/ float get_weight1();
        /*0x2865ba8*/ void set_weight1(float value);
        /*0x2865bb0*/ float get_weight2();
        /*0x2865bb8*/ void set_weight2(float value);
        /*0x2865bc0*/ float get_weight3();
        /*0x2865bc8*/ void set_weight3(float value);
        /*0x2865bd0*/ int get_boneIndex0();
        /*0x2865bd8*/ void set_boneIndex0(int value);
        /*0x2865be0*/ int get_boneIndex1();
        /*0x2865be8*/ void set_boneIndex1(int value);
        /*0x2865bf0*/ int get_boneIndex2();
        /*0x2865bf8*/ void set_boneIndex2(int value);
        /*0x2865c00*/ int get_boneIndex3();
        /*0x2865c08*/ void set_boneIndex3(int value);
        /*0x2865c10*/ int GetHashCode();
        /*0x2865d18*/ bool Equals(object other);
        /*0x2865da0*/ bool Equals(UnityEngine.BoneWeight other);
    }

    struct BoneWeight1 : System.IEquatable<UnityEngine.BoneWeight1>
    {
        /*0x10*/ float m_Weight;
        /*0x14*/ int m_BoneIndex;

        static /*0x2866080*/ bool op_Equality(UnityEngine.BoneWeight1 lhs, UnityEngine.BoneWeight1 rhs);
        static /*0x28660a8*/ bool op_Inequality(UnityEngine.BoneWeight1 lhs, UnityEngine.BoneWeight1 rhs);
        /*0x2865f44*/ float get_weight();
        /*0x2865f4c*/ void set_weight(float value);
        /*0x2865f54*/ int get_boneIndex();
        /*0x2865f5c*/ void set_boneIndex(int value);
        /*0x2865f64*/ bool Equals(object other);
        /*0x2865fdc*/ bool Equals(UnityEngine.BoneWeight1 other);
        /*0x2866038*/ int GetHashCode();
    }

    struct CombineInstance
    {
        /*0x10*/ int m_MeshInstanceID;
        /*0x14*/ int m_SubMeshIndex;
        /*0x18*/ UnityEngine.Matrix4x4 m_Transform;
        /*0x58*/ UnityEngine.Vector4 m_LightmapScaleOffset;
        /*0x68*/ UnityEngine.Vector4 m_RealtimeLightmapScaleOffset;

        /*0x28660d0*/ UnityEngine.Mesh get_mesh();
        /*0x28660dc*/ void set_mesh(UnityEngine.Mesh value);
        /*0x286616c*/ int get_subMeshIndex();
        /*0x2866174*/ void set_subMeshIndex(int value);
        /*0x286617c*/ UnityEngine.Matrix4x4 get_transform();
        /*0x2866198*/ void set_transform(UnityEngine.Matrix4x4 value);
        /*0x28661b4*/ UnityEngine.Vector4 get_lightmapScaleOffset();
        /*0x28661c0*/ void set_lightmapScaleOffset(UnityEngine.Vector4 value);
        /*0x28661cc*/ UnityEngine.Vector4 get_realtimeLightmapScaleOffset();
        /*0x28661d8*/ void set_realtimeLightmapScaleOffset(UnityEngine.Vector4 value);
    }

    enum BatteryStatus
    {
        Unknown = 0,
        Charging = 1,
        Discharging = 2,
        NotCharging = 3,
        Full = 4,
    }

    enum OperatingSystemFamily
    {
        Other = 0,
        MacOSX = 1,
        Windows = 2,
        Linux = 3,
    }

    enum DeviceType
    {
        Unknown = 0,
        Handheld = 1,
        Console = 2,
        Desktop = 3,
    }

    class SystemInfo
    {
        static string unsupportedIdentifier = "n/a";

        static /*0x28661e4*/ float get_batteryLevel();
        static /*0x2866234*/ UnityEngine.BatteryStatus get_batteryStatus();
        static /*0x2866284*/ string get_operatingSystem();
        static /*0x28662d4*/ UnityEngine.OperatingSystemFamily get_operatingSystemFamily();
        static /*0x2866324*/ string get_processorType();
        static /*0x2866374*/ int get_processorFrequency();
        static /*0x28663c4*/ int get_processorCount();
        static /*0x2866414*/ int get_systemMemorySize();
        static /*0x2866464*/ string get_deviceUniqueIdentifier();
        static /*0x28664b4*/ string get_deviceName();
        static /*0x2866504*/ string get_deviceModel();
        static /*0x2866554*/ bool get_supportsAccelerometer();
        static /*0x28665a4*/ bool get_supportsGyroscope();
        static /*0x28665f4*/ bool get_supportsLocationService();
        static /*0x2866644*/ bool get_supportsVibration();
        static /*0x2866694*/ bool get_supportsAudio();
        static /*0x28666e4*/ UnityEngine.DeviceType get_deviceType();
        static /*0x2866734*/ int get_graphicsMemorySize();
        static /*0x2866784*/ string get_graphicsDeviceName();
        static /*0x28667d4*/ string get_graphicsDeviceVendor();
        static /*0x2866824*/ int get_graphicsDeviceID();
        static /*0x2866874*/ int get_graphicsDeviceVendorID();
        static /*0x28668c4*/ UnityEngine.Rendering.GraphicsDeviceType get_graphicsDeviceType();
        static /*0x2866914*/ bool get_graphicsUVStartsAtTop();
        static /*0x2866964*/ string get_graphicsDeviceVersion();
        static /*0x28669b4*/ int get_graphicsShaderLevel();
        static /*0x2866a04*/ bool get_graphicsMultiThreaded();
        static /*0x2866a54*/ UnityEngine.Rendering.RenderingThreadingMode get_renderingThreadingMode();
        static /*0x2866aa4*/ bool get_hasHiddenSurfaceRemovalOnGPU();
        static /*0x2866af4*/ bool get_hasDynamicUniformArrayIndexingInFragmentShaders();
        static /*0x2866b44*/ bool get_supportsShadows();
        static /*0x2866b94*/ bool get_supportsRawShadowDepthSampling();
        static /*0x2866be4*/ bool get_supportsRenderTextures();
        static /*0x2866bec*/ bool get_supportsMotionVectors();
        static /*0x2866c3c*/ bool get_supportsRenderToCubemap();
        static /*0x2866c44*/ bool get_supportsImageEffects();
        static /*0x2866c4c*/ bool get_supports3DTextures();
        static /*0x2866c9c*/ bool get_supportsCompressed3DTextures();
        static /*0x2866cec*/ bool get_supports2DArrayTextures();
        static /*0x2866d3c*/ bool get_supports3DRenderTextures();
        static /*0x2866d8c*/ bool get_supportsCubemapArrayTextures();
        static /*0x2866ddc*/ bool get_supportsAnisotropicFilter();
        static /*0x2866e2c*/ UnityEngine.Rendering.CopyTextureSupport get_copyTextureSupport();
        static /*0x2860fec*/ bool get_supportsComputeShaders();
        static /*0x2866ea4*/ bool get_supportsGeometryShaders();
        static /*0x2866ef4*/ bool get_supportsTessellationShaders();
        static /*0x2866f44*/ bool get_supportsRenderTargetArrayIndexFromVertexShader();
        static /*0x2866f94*/ bool get_supportsInstancing();
        static /*0x2866fe4*/ bool get_supportsHardwareQuadTopology();
        static /*0x2867034*/ bool get_supports32bitsIndexBuffer();
        static /*0x2867084*/ bool get_supportsSparseTextures();
        static /*0x28670d4*/ int get_supportedRenderTargetCount();
        static /*0x2867124*/ bool get_supportsSeparatedRenderTargetsBlend();
        static /*0x2867174*/ int get_supportedRandomWriteTargetCount();
        static /*0x28671c4*/ int get_supportsMultisampledTextures();
        static /*0x2867214*/ bool get_supportsMultisampled2DArrayTextures();
        static /*0x2867264*/ bool get_supportsMultisampleAutoResolve();
        static /*0x28672b4*/ int get_supportsTextureWrapMirrorOnce();
        static /*0x2867304*/ bool get_usesReversedZBuffer();
        static /*0x2867354*/ int get_supportsStencil();
        static /*0x286735c*/ bool IsValidEnumValue(System.Enum value);
        static /*0x28673d4*/ bool SupportsRenderTextureFormat(UnityEngine.RenderTextureFormat format);
        static /*0x28674e8*/ bool SupportsBlendingOnRenderTextureFormat(UnityEngine.RenderTextureFormat format);
        static /*0x28675fc*/ bool SupportsRandomWriteOnRenderTextureFormat(UnityEngine.RenderTextureFormat format);
        static /*0x2867710*/ bool SupportsTextureFormat(UnityEngine.TextureFormat format);
        static /*0x2867824*/ bool SupportsVertexAttributeFormat(UnityEngine.Rendering.VertexAttributeFormat format, int dimension);
        static /*0x2867978*/ UnityEngine.NPOTSupport get_npotSupport();
        static /*0x28679c8*/ int get_maxTextureSize();
        static /*0x2867a18*/ int get_maxTexture3DSize();
        static /*0x2867a68*/ int get_maxTextureArraySlices();
        static /*0x2867ab8*/ int get_maxCubemapSize();
        static /*0x2867b08*/ int get_maxAnisotropyLevel();
        static /*0x2867b58*/ int get_maxRenderTextureSize();
        static /*0x2867ba8*/ int get_maxComputeBufferInputsVertex();
        static /*0x2867bf8*/ int get_maxComputeBufferInputsFragment();
        static /*0x2867c48*/ int get_maxComputeBufferInputsGeometry();
        static /*0x2867c98*/ int get_maxComputeBufferInputsDomain();
        static /*0x2867ce8*/ int get_maxComputeBufferInputsHull();
        static /*0x2867d38*/ int get_maxComputeBufferInputsCompute();
        static /*0x2867d88*/ int get_maxComputeWorkGroupSize();
        static /*0x2867dd8*/ int get_maxComputeWorkGroupSizeX();
        static /*0x2867e28*/ int get_maxComputeWorkGroupSizeY();
        static /*0x2867e78*/ int get_maxComputeWorkGroupSizeZ();
        static /*0x2867ec8*/ int get_computeSubGroupSize();
        static /*0x2867f18*/ bool get_supportsAsyncCompute();
        static /*0x2867f68*/ bool get_supportsGpuRecorder();
        static /*0x2867fb8*/ bool get_supportsGraphicsFence();
        static /*0x2868008*/ bool get_supportsAsyncGPUReadback();
        static /*0x2868058*/ bool get_supportsRayTracing();
        static /*0x28680a8*/ bool get_supportsSetConstantBuffer();
        static /*0x28680f8*/ int get_constantBufferOffsetAlignment();
        static /*0x2861014*/ long get_maxGraphicsBufferSize();
        static /*0x2868170*/ bool get_minConstantBufferOffsetAlignment();
        static /*0x2868178*/ bool get_hasMipMaxLevel();
        static /*0x28681c8*/ bool get_supportsMipStreaming();
        static /*0x2868218*/ int get_graphicsPixelFillrate();
        static /*0x2868220*/ bool get_usesLoadStoreActions();
        static /*0x2868270*/ UnityEngine.HDRDisplaySupportFlags get_hdrDisplaySupportFlags();
        static /*0x28682c0*/ bool get_supportsConservativeRaster();
        static /*0x2868310*/ bool get_supportsMultiview();
        static /*0x2868360*/ bool get_supportsStoreAndResolveAction();
        static /*0x28683b0*/ bool get_supportsMultisampleResolveDepth();
        static /*0x2868400*/ bool get_supportsVertexPrograms();
        static /*0x286620c*/ float GetBatteryLevel();
        static /*0x286625c*/ UnityEngine.BatteryStatus GetBatteryStatus();
        static /*0x28662ac*/ string GetOperatingSystem();
        static /*0x28662fc*/ UnityEngine.OperatingSystemFamily GetOperatingSystemFamily();
        static /*0x286634c*/ string GetProcessorType();
        static /*0x286639c*/ int GetProcessorFrequencyMHz();
        static /*0x28663ec*/ int GetProcessorCount();
        static /*0x286643c*/ int GetPhysicalMemoryMB();
        static /*0x286648c*/ string GetDeviceUniqueIdentifier();
        static /*0x28664dc*/ string GetDeviceName();
        static /*0x286652c*/ string GetDeviceModel();
        static /*0x286657c*/ bool SupportsAccelerometer();
        static /*0x28665cc*/ bool IsGyroAvailable();
        static /*0x286661c*/ bool SupportsLocationService();
        static /*0x286666c*/ bool SupportsVibration();
        static /*0x28666bc*/ bool SupportsAudio();
        static /*0x286670c*/ UnityEngine.DeviceType GetDeviceType();
        static /*0x286675c*/ int GetGraphicsMemorySize();
        static /*0x28667ac*/ string GetGraphicsDeviceName();
        static /*0x28667fc*/ string GetGraphicsDeviceVendor();
        static /*0x286684c*/ int GetGraphicsDeviceID();
        static /*0x286689c*/ int GetGraphicsDeviceVendorID();
        static /*0x28668ec*/ UnityEngine.Rendering.GraphicsDeviceType GetGraphicsDeviceType();
        static /*0x286693c*/ bool GetGraphicsUVStartsAtTop();
        static /*0x286698c*/ string GetGraphicsDeviceVersion();
        static /*0x28669dc*/ int GetGraphicsShaderLevel();
        static /*0x2866a2c*/ bool GetGraphicsMultiThreaded();
        static /*0x2866a7c*/ UnityEngine.Rendering.RenderingThreadingMode GetRenderingThreadingMode();
        static /*0x2866acc*/ bool HasHiddenSurfaceRemovalOnGPU();
        static /*0x2866b1c*/ bool HasDynamicUniformArrayIndexingInFragmentShaders();
        static /*0x2866b6c*/ bool SupportsShadows();
        static /*0x2866bbc*/ bool SupportsRawShadowDepthSampling();
        static /*0x2866c14*/ bool SupportsMotionVectors();
        static /*0x2866c74*/ bool Supports3DTextures();
        static /*0x2866cc4*/ bool SupportsCompressed3DTextures();
        static /*0x2866d14*/ bool Supports2DArrayTextures();
        static /*0x2866d64*/ bool Supports3DRenderTextures();
        static /*0x2866db4*/ bool SupportsCubemapArrayTextures();
        static /*0x2866e04*/ bool SupportsAnisotropicFilter();
        static /*0x2866e54*/ UnityEngine.Rendering.CopyTextureSupport GetCopyTextureSupport();
        static /*0x2866e7c*/ bool SupportsComputeShaders();
        static /*0x2866ecc*/ bool SupportsGeometryShaders();
        static /*0x2866f1c*/ bool SupportsTessellationShaders();
        static /*0x2866f6c*/ bool SupportsRenderTargetArrayIndexFromVertexShader();
        static /*0x2866fbc*/ bool SupportsInstancing();
        static /*0x286700c*/ bool SupportsHardwareQuadTopology();
        static /*0x286705c*/ bool Supports32bitsIndexBuffer();
        static /*0x28670ac*/ bool SupportsSparseTextures();
        static /*0x28670fc*/ int SupportedRenderTargetCount();
        static /*0x286714c*/ bool SupportsSeparatedRenderTargetsBlend();
        static /*0x286719c*/ int SupportedRandomWriteTargetCount();
        static /*0x2867bd0*/ int MaxComputeBufferInputsVertex();
        static /*0x2867c20*/ int MaxComputeBufferInputsFragment();
        static /*0x2867c70*/ int MaxComputeBufferInputsGeometry();
        static /*0x2867cc0*/ int MaxComputeBufferInputsDomain();
        static /*0x2867d10*/ int MaxComputeBufferInputsHull();
        static /*0x2867d60*/ int MaxComputeBufferInputsCompute();
        static /*0x28671ec*/ int SupportsMultisampledTextures();
        static /*0x286723c*/ bool SupportsMultisampled2DArrayTextures();
        static /*0x286728c*/ bool SupportsMultisampleAutoResolve();
        static /*0x28672dc*/ int SupportsTextureWrapMirrorOnce();
        static /*0x286732c*/ bool UsesReversedZBuffer();
        static /*0x28674ac*/ bool HasRenderTextureNative(UnityEngine.RenderTextureFormat format);
        static /*0x28675c0*/ bool SupportsBlendingOnRenderTextureFormatNative(UnityEngine.RenderTextureFormat format);
        static /*0x28676d4*/ bool SupportsRandomWriteOnRenderTextureFormatNative(UnityEngine.RenderTextureFormat format);
        static /*0x28677e8*/ bool SupportsTextureFormatNative(UnityEngine.TextureFormat format);
        static /*0x2867934*/ bool SupportsVertexAttributeFormatNative(UnityEngine.Rendering.VertexAttributeFormat format, int dimension);
        static /*0x28679a0*/ UnityEngine.NPOTSupport GetNPOTSupport();
        static /*0x28679f0*/ int GetMaxTextureSize();
        static /*0x2867a40*/ int GetMaxTexture3DSize();
        static /*0x2867a90*/ int GetMaxTextureArraySlices();
        static /*0x2867ae0*/ int GetMaxCubemapSize();
        static /*0x2867b30*/ int GetMaxAnisotropyLevel();
        static /*0x2867b80*/ int GetMaxRenderTextureSize();
        static /*0x2867db0*/ int GetMaxComputeWorkGroupSize();
        static /*0x2867e00*/ int GetMaxComputeWorkGroupSizeX();
        static /*0x2867e50*/ int GetMaxComputeWorkGroupSizeY();
        static /*0x2867ea0*/ int GetMaxComputeWorkGroupSizeZ();
        static /*0x2867ef0*/ int GetComputeSubGroupSize();
        static /*0x2867f40*/ bool SupportsAsyncCompute();
        static /*0x2867f90*/ bool SupportsGpuRecorder();
        static /*0x2867fe0*/ bool SupportsGPUFence();
        static /*0x2868030*/ bool SupportsAsyncGPUReadback();
        static /*0x2868080*/ bool SupportsRayTracing();
        static /*0x28680d0*/ bool SupportsSetConstantBuffer();
        static /*0x2868120*/ int MinConstantBufferOffsetAlignment();
        static /*0x2868148*/ long MaxGraphicsBufferSize();
        static /*0x28681a0*/ bool HasMipMaxLevel();
        static /*0x28681f0*/ bool SupportsMipStreaming();
        static /*0x2868408*/ bool IsFormatSupported(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage);
        static /*0x286844c*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetCompatibleFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage);
        static /*0x2868490*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetGraphicsFormat(UnityEngine.Experimental.Rendering.DefaultFormat format);
        static /*0x28684cc*/ int GetRenderTextureSupportedMSAASampleCount(UnityEngine.RenderTextureDescriptor desc);
        static /*0x2868248*/ bool UsesLoadStoreActions();
        static /*0x2868298*/ UnityEngine.HDRDisplaySupportFlags GetHDRDisplaySupportFlags();
        static /*0x28682e8*/ bool SupportsConservativeRaster();
        static /*0x2868338*/ bool SupportsMultiview();
        static /*0x2868388*/ bool SupportsStoreAndResolveAction();
        static /*0x28683d8*/ bool SupportsMultisampleResolveDepth();
        static /*0x2868544*/ bool get_supportsGPUFence();
        static /*0x2868508*/ int GetRenderTextureSupportedMSAASampleCount_Injected(ref UnityEngine.RenderTextureDescriptor desc);
        /*0x286854c*/ SystemInfo();
    }

    class Random
    {
        static /*0x2868554*/ void InitState(int seed);
        static /*0x2868590*/ UnityEngine.Random.State get_state();
        static /*0x2868610*/ void set_state(UnityEngine.Random.State value);
        static /*0x286868c*/ float Range(float minInclusive, float maxInclusive);
        static /*0x28686cc*/ int Range(int minInclusive, int maxExclusive);
        static /*0x2868710*/ int RandomRangeInt(int minInclusive, int maxExclusive);
        static /*0x2868754*/ float get_value();
        static /*0x286877c*/ UnityEngine.Vector3 get_insideUnitSphere();
        static /*0x2868804*/ void GetRandomUnitCircle(ref UnityEngine.Vector2 output);
        static /*0x2868840*/ UnityEngine.Vector2 get_insideUnitCircle();
        static /*0x2868884*/ UnityEngine.Vector3 get_onUnitSphere();
        static /*0x286890c*/ UnityEngine.Quaternion get_rotation();
        static /*0x2868990*/ UnityEngine.Quaternion get_rotationUniform();
        static /*0x2868a14*/ int get_seed();
        static /*0x2868a3c*/ void set_seed(int value);
        static /*0x2868a78*/ float RandomRange(float min, float max);
        static /*0x2868ab8*/ int RandomRange(int min, int max);
        static /*0x2868afc*/ UnityEngine.Color ColorHSV();
        static /*0x2868c84*/ UnityEngine.Color ColorHSV(float hueMin, float hueMax);
        static /*0x2868ca0*/ UnityEngine.Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax);
        static /*0x2868cb4*/ UnityEngine.Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax, float valueMin, float valueMax);
        static /*0x2868b20*/ UnityEngine.Color ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax, float valueMin, float valueMax, float alphaMin, float alphaMax);
        static /*0x28685d4*/ void get_state_Injected(ref UnityEngine.Random.State ret);
        static /*0x2868650*/ void set_state_Injected(ref UnityEngine.Random.State value);
        static /*0x28687c8*/ void get_insideUnitSphere_Injected(ref UnityEngine.Vector3 ret);
        static /*0x28688d0*/ void get_onUnitSphere_Injected(ref UnityEngine.Vector3 ret);
        static /*0x2868954*/ void get_rotation_Injected(ref UnityEngine.Quaternion ret);
        static /*0x28689d8*/ void get_rotationUniform_Injected(ref UnityEngine.Quaternion ret);

        struct State
        {
            /*0x10*/ int s0;
            /*0x14*/ int s1;
            /*0x18*/ int s2;
            /*0x1c*/ int s3;
        }
    }

    interface IPlayerEditorConnectionNative
    {
        void Initialize();
        void DisconnectAll();
        void SendMessage(System.Guid messageId, byte[] data, int playerId);
        bool TrySendMessage(System.Guid messageId, byte[] data, int playerId);
        void Poll();
        void RegisterInternal(System.Guid messageId);
        void UnregisterInternal(System.Guid messageId);
        bool IsConnected();
    }

    class PlayerConnectionInternal : UnityEngine.IPlayerEditorConnectionNative
    {
        static /*0x286922c*/ bool IsConnected();
        static /*0x28691dc*/ void Initialize();
        static /*0x28690b8*/ void RegisterInternal(string messageId);
        static /*0x2869178*/ void UnregisterInternal(string messageId);
        static /*0x2868dfc*/ void SendMessage(string messageId, byte[] data, int playerId);
        static /*0x2868f90*/ bool TrySendMessage(string messageId, byte[] data, int playerId);
        static /*0x286900c*/ void PollInternal();
        static /*0x286927c*/ void DisconnectAll();
        /*0x28692a4*/ PlayerConnectionInternal();
        /*0x2868cc0*/ void UnityEngine.IPlayerEditorConnectionNative.SendMessage(System.Guid messageId, byte[] data, int playerId);
        /*0x2868e50*/ bool UnityEngine.IPlayerEditorConnectionNative.TrySendMessage(System.Guid messageId, byte[] data, int playerId);
        /*0x2868fe4*/ void UnityEngine.IPlayerEditorConnectionNative.Poll();
        /*0x2869034*/ void UnityEngine.IPlayerEditorConnectionNative.RegisterInternal(System.Guid messageId);
        /*0x28690f4*/ void UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal(System.Guid messageId);
        /*0x28691b4*/ void UnityEngine.IPlayerEditorConnectionNative.Initialize();
        /*0x2869204*/ bool UnityEngine.IPlayerEditorConnectionNative.IsConnected();
        /*0x2869254*/ void UnityEngine.IPlayerEditorConnectionNative.DisconnectAll();
    }

    class Caching
    {
        static /*0x28692ac*/ bool CleanCache();
        static /*0x28692fc*/ bool get_compressionEnabled();
        static /*0x2869324*/ void set_compressionEnabled(bool value);
        static /*0x2869360*/ bool get_ready();
        static /*0x28692d4*/ bool ClearCache();
        static /*0x2869388*/ bool ClearCache(int expiration);
        static /*0x28693c4*/ bool ClearCache_Int(int expiration);
        static /*0x2869400*/ bool ClearCachedVersion(string assetBundleName, UnityEngine.Hash128 hash);
        static /*0x2869484*/ bool ClearCachedVersionInternal(string assetBundleName, UnityEngine.Hash128 hash);
        static /*0x286951c*/ bool ClearOtherCachedVersions(string assetBundleName, UnityEngine.Hash128 hash);
        static /*0x2869600*/ bool ClearAllCachedVersions(string assetBundleName);
        static /*0x28695a4*/ bool ClearCachedVersions(string assetBundleName, UnityEngine.Hash128 hash, bool keepInputVersion);
        static /*0x28696cc*/ UnityEngine.Hash128[] GetCachedVersions(string assetBundleName);
        static /*0x2869708*/ void GetCachedVersions(string assetBundleName, System.Collections.Generic.List<UnityEngine.Hash128> outCachedVersions);
        static /*0x2869820*/ bool IsVersionCached(string url, int version);
        static /*0x2869868*/ bool IsVersionCached(string url, UnityEngine.Hash128 hash);
        static /*0x2869980*/ bool IsVersionCached(UnityEngine.CachedAssetBundle cachedBundle);
        static /*0x2869924*/ bool IsVersionCached(string url, string assetBundleName, UnityEngine.Hash128 hash);
        static /*0x2869a90*/ bool MarkAsUsed(string url, int version);
        static /*0x2869ad8*/ bool MarkAsUsed(string url, UnityEngine.Hash128 hash);
        static /*0x2869bf0*/ bool MarkAsUsed(UnityEngine.CachedAssetBundle cachedBundle);
        static /*0x2869b94*/ bool MarkAsUsed(string url, string assetBundleName, UnityEngine.Hash128 hash);
        static /*0x2869cec*/ int GetVersionFromCache(string url);
        static /*0x2869cf4*/ int get_spaceUsed();
        static /*0x2869d24*/ long get_spaceOccupied();
        static /*0x2869d4c*/ int get_spaceAvailable();
        static /*0x2869d7c*/ long get_spaceFree();
        static /*0x2869da4*/ long get_maximumAvailableDiskSpace();
        static /*0x2869dcc*/ void set_maximumAvailableDiskSpace(long value);
        static /*0x2869e08*/ int get_expirationDelay();
        static /*0x2869e30*/ void set_expirationDelay(int value);
        static /*0x2869e6c*/ UnityEngine.Cache AddCache(string cachePath);
        static /*0x286a148*/ UnityEngine.Cache AddCache(string cachePath, bool isReadonly);
        static /*0x286a1f8*/ UnityEngine.Cache GetCacheAt(int cacheIndex);
        static /*0x286a0c0*/ UnityEngine.Cache GetCacheByPath(string cachePath);
        static /*0x286a2cc*/ void GetAllCachePaths(System.Collections.Generic.List<string> cachePaths);
        static /*0x286a4c0*/ bool RemoveCache(UnityEngine.Cache cache);
        static /*0x286a540*/ void MoveCacheBefore(UnityEngine.Cache src, UnityEngine.Cache dst);
        static /*0x286a5cc*/ void MoveCacheAfter(UnityEngine.Cache src, UnityEngine.Cache dst);
        static /*0x286a498*/ int get_cacheCount();
        static /*0x286a658*/ UnityEngine.Cache get_defaultCache();
        static /*0x286a6d8*/ UnityEngine.Cache get_currentCacheForWriting();
        static /*0x286a758*/ void set_currentCacheForWriting(UnityEngine.Cache value);
        static /*0x28694d8*/ bool ClearCachedVersionInternal_Injected(string assetBundleName, ref UnityEngine.Hash128 hash);
        static /*0x2869678*/ bool ClearCachedVersions_Injected(string assetBundleName, ref UnityEngine.Hash128 hash, bool keepInputVersion);
        static /*0x2869a3c*/ bool IsVersionCached_Injected(string url, string assetBundleName, ref UnityEngine.Hash128 hash);
        static /*0x2869c98*/ bool MarkAsUsed_Injected(string url, string assetBundleName, ref UnityEngine.Hash128 hash);
        static /*0x286a1a4*/ void AddCache_Injected(string cachePath, bool isReadonly, ref UnityEngine.Cache ret);
        static /*0x286a244*/ void GetCacheAt_Injected(int cacheIndex, ref UnityEngine.Cache ret);
        static /*0x286a288*/ void GetCacheByPath_Injected(string cachePath, ref UnityEngine.Cache ret);
        static /*0x286a504*/ bool RemoveCache_Injected(ref UnityEngine.Cache cache);
        static /*0x286a588*/ void MoveCacheBefore_Injected(ref UnityEngine.Cache src, ref UnityEngine.Cache dst);
        static /*0x286a614*/ void MoveCacheAfter_Injected(ref UnityEngine.Cache src, ref UnityEngine.Cache dst);
        static /*0x286a69c*/ void get_defaultCache_Injected(ref UnityEngine.Cache ret);
        static /*0x286a71c*/ void get_currentCacheForWriting_Injected(ref UnityEngine.Cache ret);
        static /*0x286a798*/ void set_currentCacheForWriting_Injected(ref UnityEngine.Cache value);
        /*0x286a7d4*/ Caching();
    }

    struct CacheIndex
    {
        /*0x10*/ string name;
        /*0x18*/ int bytesUsed;
        /*0x1c*/ int expires;
    }

    struct CachedAssetBundle
    {
        /*0x10*/ string m_Name;
        /*0x18*/ UnityEngine.Hash128 m_Hash;

        /*0x286a7dc*/ CachedAssetBundle(string name, UnityEngine.Hash128 hash);
        /*0x2869a28*/ string get_name();
        /*0x286a7e8*/ void set_name(string value);
        /*0x2869a30*/ UnityEngine.Hash128 get_hash();
        /*0x286a7f0*/ void set_hash(UnityEngine.Hash128 value);
    }

    struct Cache : System.IEquatable<UnityEngine.Cache>
    {
        /*0x10*/ int m_Handle;

        static /*0x286a800*/ bool op_Equality(UnityEngine.Cache lhs, UnityEngine.Cache rhs);
        static /*0x286a80c*/ bool op_Inequality(UnityEngine.Cache lhs, UnityEngine.Cache rhs);
        static /*0x286a8a8*/ bool Cache_IsValid(int handle);
        static /*0x286a920*/ bool Cache_IsReady(int handle);
        static /*0x286a998*/ bool Cache_IsReadonly(int handle);
        static /*0x286a9d4*/ string Cache_GetPath(int handle);
        static /*0x286aa4c*/ int Cache_GetIndex(int handle);
        static /*0x286aac4*/ long Cache_GetSpaceFree(int handle);
        static /*0x286ab3c*/ long Cache_GetMaximumDiskSpaceAvailable(int handle);
        static /*0x286abbc*/ void Cache_SetMaximumDiskSpaceAvailable(int handle, long value);
        static /*0x286ac3c*/ long Cache_GetCachingDiskSpaceUsed(int handle);
        static /*0x286acb4*/ int Cache_GetExpirationDelay(int handle);
        static /*0x286ad34*/ void Cache_SetExpirationDelay(int handle, int value);
        static /*0x286adb4*/ bool Cache_ClearCache(int handle);
        static /*0x286ae34*/ bool Cache_ClearCache_Expiration(int handle, int expiration);
        /*0x286a7f8*/ int get_handle();
        /*0x286a818*/ int GetHashCode();
        /*0x286a820*/ bool Equals(object other);
        /*0x286a898*/ bool Equals(UnityEngine.Cache other);
        /*0x286a10c*/ bool get_valid();
        /*0x286a8e4*/ bool get_ready();
        /*0x286a95c*/ bool get_readOnly();
        /*0x286a45c*/ string get_path();
        /*0x286aa10*/ int get_index();
        /*0x286aa88*/ long get_spaceFree();
        /*0x286ab00*/ long get_maximumAvailableStorageSpace();
        /*0x286ab78*/ void set_maximumAvailableStorageSpace(long value);
        /*0x286ac00*/ long get_spaceOccupied();
        /*0x286ac78*/ int get_expirationDelay();
        /*0x286acf0*/ void set_expirationDelay(int value);
        /*0x286ad78*/ bool ClearCache();
        /*0x286adf0*/ bool ClearCache(int expiration);
    }

    class FlareLayer : UnityEngine.Behaviour
    {
        /*0x286ae78*/ FlareLayer();
    }

    struct BoundingSphere
    {
        /*0x10*/ UnityEngine.Vector3 position;
        /*0x1c*/ float radius;

        /*0x286ae80*/ BoundingSphere(UnityEngine.Vector3 pos, float rad);
        /*0x286ae8c*/ BoundingSphere(UnityEngine.Vector4 packedSphere);
    }

    enum CullingQueryOptions
    {
        Normal = 0,
        IgnoreVisibility = 1,
        IgnoreDistance = 2,
    }

    struct CullingGroupEvent
    {
        static byte kIsVisibleMask = 128;
        static byte kDistanceMask = 127;
        /*0x10*/ int m_Index;
        /*0x14*/ byte m_PrevState;
        /*0x15*/ byte m_ThisState;

        /*0x286ae98*/ int get_index();
        /*0x286aea0*/ bool get_isVisible();
        /*0x286aeb0*/ bool get_wasVisible();
        /*0x286aec0*/ bool get_hasBecomeVisible();
        /*0x286aee0*/ bool get_hasBecomeInvisible();
        /*0x286af00*/ int get_currentDistance();
        /*0x286af0c*/ int get_previousDistance();
    }

    class CullingGroup : System.IDisposable
    {
        /*0x10*/ nint m_Ptr;
        /*0x18*/ UnityEngine.CullingGroup.StateChanged m_OnStateChanged;

        static void EraseSwapBack<T>(int index, T[] myArray, ref int size);
        static /*0x286b70c*/ void SendEvents(UnityEngine.CullingGroup cullingGroup, nint eventsPtr, int count);
        static /*0x286af68*/ nint Init(object scripting);
        /*0x286af18*/ CullingGroup();
        /*0x286afa4*/ void Finalize();
        /*0x286b0e0*/ void DisposeInternal();
        /*0x286b11c*/ void Dispose();
        /*0x286b194*/ UnityEngine.CullingGroup.StateChanged get_onStateChanged();
        /*0x286b19c*/ void set_onStateChanged(UnityEngine.CullingGroup.StateChanged value);
        /*0x286b1a4*/ bool get_enabled();
        /*0x286b1e0*/ void set_enabled(bool value);
        /*0x286b224*/ UnityEngine.Camera get_targetCamera();
        /*0x286b260*/ void set_targetCamera(UnityEngine.Camera value);
        /*0x286b2a4*/ void SetBoundingSpheres(UnityEngine.BoundingSphere[] array);
        /*0x286b2e8*/ void SetBoundingSphereCount(int count);
        /*0x286b32c*/ void EraseSwapBack(int index);
        /*0x286b370*/ int QueryIndices(bool visible, int[] result, int firstIndex);
        /*0x286b448*/ int QueryIndices(int distanceIndex, int[] result, int firstIndex);
        /*0x286b4ac*/ int QueryIndices(bool visible, int distanceIndex, int[] result, int firstIndex);
        /*0x286b3d4*/ int QueryIndices(bool visible, int distanceIndex, UnityEngine.CullingQueryOptions options, int[] result, int firstIndex);
        /*0x286b51c*/ bool IsVisible(int index);
        /*0x286b560*/ int GetDistance(int index);
        /*0x286b5a4*/ void SetBoundingDistances(float[] distances);
        /*0x286b5e8*/ void SetDistanceReferencePoint_InternalVector3(UnityEngine.Vector3 point);
        /*0x286b680*/ void SetDistanceReferencePoint_InternalTransform(UnityEngine.Transform transform);
        /*0x286b6c4*/ void SetDistanceReferencePoint(UnityEngine.Vector3 point);
        /*0x286b6c8*/ void SetDistanceReferencePoint(UnityEngine.Transform transform);
        /*0x286b0a4*/ void FinalizerFailure();
        /*0x286b63c*/ void SetDistanceReferencePoint_InternalVector3_Injected(ref UnityEngine.Vector3 point);

        class StateChanged : System.MulticastDelegate
        {
            /*0x286b768*/ StateChanged(object object, nint method);
            /*0x286b82c*/ void Invoke(UnityEngine.CullingGroupEvent sphere);
        }
    }

    class ReflectionProbe : UnityEngine.Behaviour
    {
        static /*0x0*/ System.Action<UnityEngine.ReflectionProbe, UnityEngine.ReflectionProbe.ReflectionProbeEvent> reflectionProbeChanged;
        static /*0x8*/ System.Action<UnityEngine.Cubemap> defaultReflectionSet;
        static /*0x10*/ System.Action<UnityEngine.Texture> defaultReflectionTexture;

        static /*0x286c868*/ bool BlendCubemap(UnityEngine.Texture src, UnityEngine.Texture dst, float blend, UnityEngine.RenderTexture target);
        static /*0x286c8cc*/ void UpdateCachedState();
        static /*0x286c8f4*/ int get_minBakedCubemapResolution();
        static /*0x286c91c*/ int get_maxBakedCubemapResolution();
        static /*0x286c944*/ UnityEngine.Vector4 get_defaultTextureHDRDecodeValues();
        static /*0x286c9c8*/ UnityEngine.Texture get_defaultTexture();
        static /*0x286c9f0*/ void add_reflectionProbeChanged(System.Action<UnityEngine.ReflectionProbe, UnityEngine.ReflectionProbe.ReflectionProbeEvent> value);
        static /*0x286cabc*/ void remove_reflectionProbeChanged(System.Action<UnityEngine.ReflectionProbe, UnityEngine.ReflectionProbe.ReflectionProbeEvent> value);
        static /*0x286cb88*/ void add_defaultReflectionSet(System.Action<UnityEngine.Cubemap> value);
        static /*0x286cc58*/ void remove_defaultReflectionSet(System.Action<UnityEngine.Cubemap> value);
        static /*0x286cd28*/ void add_defaultReflectionTexture(System.Action<UnityEngine.Texture> value);
        static /*0x286cdf8*/ void remove_defaultReflectionTexture(System.Action<UnityEngine.Texture> value);
        static /*0x286cec8*/ void CallReflectionProbeEvent(UnityEngine.ReflectionProbe probe, UnityEngine.ReflectionProbe.ReflectionProbeEvent probeEvent);
        static /*0x286cf48*/ void CallSetDefaultReflection(UnityEngine.Texture defaultReflectionCubemap);
        static /*0x286c98c*/ void get_defaultTextureHDRDecodeValues_Injected(ref UnityEngine.Vector4 ret);
        /*0x286cfb4*/ ReflectionProbe();
        /*0x286b840*/ UnityEngine.Rendering.ReflectionProbeType get_type();
        /*0x286b87c*/ void set_type(UnityEngine.Rendering.ReflectionProbeType value);
        /*0x286b8c0*/ UnityEngine.Vector3 get_size();
        /*0x286b960*/ void set_size(UnityEngine.Vector3 value);
        /*0x286b9f8*/ UnityEngine.Vector3 get_center();
        /*0x286ba98*/ void set_center(UnityEngine.Vector3 value);
        /*0x286bb30*/ float get_nearClipPlane();
        /*0x286bb6c*/ void set_nearClipPlane(float value);
        /*0x286bbb8*/ float get_farClipPlane();
        /*0x286bbf4*/ void set_farClipPlane(float value);
        /*0x286bc40*/ float get_intensity();
        /*0x286bc7c*/ void set_intensity(float value);
        /*0x286bcc8*/ UnityEngine.Bounds get_bounds();
        /*0x286bd74*/ bool get_hdr();
        /*0x286bdb0*/ void set_hdr(bool value);
        /*0x286bdf4*/ bool get_renderDynamicObjects();
        /*0x286be30*/ void set_renderDynamicObjects(bool value);
        /*0x286be74*/ float get_shadowDistance();
        /*0x286beb0*/ void set_shadowDistance(float value);
        /*0x286befc*/ int get_resolution();
        /*0x286bf38*/ void set_resolution(int value);
        /*0x286bf7c*/ int get_cullingMask();
        /*0x286bfb8*/ void set_cullingMask(int value);
        /*0x286bffc*/ UnityEngine.Rendering.ReflectionProbeClearFlags get_clearFlags();
        /*0x286c038*/ void set_clearFlags(UnityEngine.Rendering.ReflectionProbeClearFlags value);
        /*0x286c07c*/ UnityEngine.Color get_backgroundColor();
        /*0x286c118*/ void set_backgroundColor(UnityEngine.Color value);
        /*0x286c1b0*/ float get_blendDistance();
        /*0x286c1ec*/ void set_blendDistance(float value);
        /*0x286c238*/ bool get_boxProjection();
        /*0x286c274*/ void set_boxProjection(bool value);
        /*0x286c2b8*/ UnityEngine.Rendering.ReflectionProbeMode get_mode();
        /*0x286c2f4*/ void set_mode(UnityEngine.Rendering.ReflectionProbeMode value);
        /*0x286c338*/ int get_importance();
        /*0x286c374*/ void set_importance(int value);
        /*0x286c3b8*/ UnityEngine.Rendering.ReflectionProbeRefreshMode get_refreshMode();
        /*0x286c3f4*/ void set_refreshMode(UnityEngine.Rendering.ReflectionProbeRefreshMode value);
        /*0x286c438*/ UnityEngine.Rendering.ReflectionProbeTimeSlicingMode get_timeSlicingMode();
        /*0x286c474*/ void set_timeSlicingMode(UnityEngine.Rendering.ReflectionProbeTimeSlicingMode value);
        /*0x286c4b8*/ UnityEngine.Texture get_bakedTexture();
        /*0x286c4f4*/ void set_bakedTexture(UnityEngine.Texture value);
        /*0x286c538*/ UnityEngine.Texture get_customBakedTexture();
        /*0x286c574*/ void set_customBakedTexture(UnityEngine.Texture value);
        /*0x286c5b8*/ UnityEngine.RenderTexture get_realtimeTexture();
        /*0x286c5f4*/ void set_realtimeTexture(UnityEngine.RenderTexture value);
        /*0x286c638*/ UnityEngine.Texture get_texture();
        /*0x286c674*/ UnityEngine.Vector4 get_textureHDRDecodeValues();
        /*0x286c710*/ void Reset();
        /*0x286c74c*/ int RenderProbe();
        /*0x286c754*/ int RenderProbe(UnityEngine.RenderTexture targetTexture);
        /*0x286c824*/ bool IsFinishedRendering(int renderId);
        /*0x286c7d0*/ int ScheduleRender(UnityEngine.Rendering.ReflectionProbeTimeSlicingMode timeSlicingMode, UnityEngine.RenderTexture targetTexture);
        /*0x286b91c*/ void get_size_Injected(ref UnityEngine.Vector3 ret);
        /*0x286b9b4*/ void set_size_Injected(ref UnityEngine.Vector3 value);
        /*0x286ba54*/ void get_center_Injected(ref UnityEngine.Vector3 ret);
        /*0x286baec*/ void set_center_Injected(ref UnityEngine.Vector3 value);
        /*0x286bd30*/ void get_bounds_Injected(ref UnityEngine.Bounds ret);
        /*0x286c0d4*/ void get_backgroundColor_Injected(ref UnityEngine.Color ret);
        /*0x286c16c*/ void set_backgroundColor_Injected(ref UnityEngine.Color value);
        /*0x286c6cc*/ void get_textureHDRDecodeValues_Injected(ref UnityEngine.Vector4 ret);

        enum ReflectionProbeEvent
        {
            ReflectionProbeAdded = 0,
            ReflectionProbeRemoved = 1,
        }
    }

    class Camera : UnityEngine.Behaviour
    {
        static /*0x0*/ UnityEngine.Camera.CameraCallback onPreCull;
        static /*0x8*/ UnityEngine.Camera.CameraCallback onPreRender;
        static /*0x10*/ UnityEngine.Camera.CameraCallback onPostRender;

        static /*0x286de14*/ int get_PreviewCullingLayer();
        static /*0x286feb4*/ void CalculateProjectionMatrixFromPhysicalPropertiesInternal(ref UnityEngine.Matrix4x4 output, float focalLength, UnityEngine.Vector2 sensorSize, UnityEngine.Vector2 lensShift, float nearClip, float farClip, float gateAspect, UnityEngine.Camera.GateFitMode gateFitMode);
        static /*0x286ffd0*/ void CalculateProjectionMatrixFromPhysicalProperties(ref UnityEngine.Matrix4x4 output, float focalLength, UnityEngine.Vector2 sensorSize, UnityEngine.Vector2 lensShift, float nearClip, float farClip, UnityEngine.Camera.GateFitParameters gateFitParameters);
        static /*0x286ffdc*/ float FocalLengthToFieldOfView(float focalLength, float sensorSize);
        static /*0x287001c*/ float FieldOfViewToFocalLength(float fieldOfView, float sensorSize);
        static /*0x287005c*/ float HorizontalToVerticalFieldOfView(float horizontalFieldOfView, float aspectRatio);
        static /*0x287009c*/ float VerticalToHorizontalFieldOfView(float verticalFieldOfView, float aspectRatio);
        static /*0x28700dc*/ UnityEngine.Camera get_main();
        static /*0x2870104*/ UnityEngine.Camera get_current();
        static /*0x2870908*/ int GetAllCamerasCount();
        static /*0x2870930*/ int GetAllCamerasImpl(UnityEngine.Camera[] cam);
        static /*0x287096c*/ int get_allCamerasCount();
        static /*0x2870994*/ UnityEngine.Camera[] get_allCameras();
        static /*0x2870a34*/ int GetAllCameras(UnityEngine.Camera[] cameras);
        static /*0x2871034*/ void SetupCurrent(UnityEngine.Camera cur);
        static /*0x287167c*/ void FireOnPreCull(UnityEngine.Camera cam);
        static /*0x28716e8*/ void FireOnPreRender(UnityEngine.Camera cam);
        static /*0x2871754*/ void FireOnPostRender(UnityEngine.Camera cam);
        static /*0x2871814*/ bool GetCullingParameters_Internal(UnityEngine.Camera camera, bool stereoAware, ref UnityEngine.Rendering.ScriptableCullingParameters cullingParameters, int managedCullingParametersSize);
        static /*0x286ff44*/ void CalculateProjectionMatrixFromPhysicalPropertiesInternal_Injected(ref UnityEngine.Matrix4x4 output, float focalLength, ref UnityEngine.Vector2 sensorSize, ref UnityEngine.Vector2 lensShift, float nearClip, float farClip, float gateAspect, UnityEngine.Camera.GateFitMode gateFitMode);
        /*0x286cfbc*/ Camera();
        /*0x286cfc4*/ float get_nearClipPlane();
        /*0x286d000*/ void set_nearClipPlane(float value);
        /*0x286d04c*/ float get_farClipPlane();
        /*0x286d088*/ void set_farClipPlane(float value);
        /*0x286d0d4*/ float get_fieldOfView();
        /*0x286d110*/ void set_fieldOfView(float value);
        /*0x286d15c*/ UnityEngine.RenderingPath get_renderingPath();
        /*0x286d198*/ void set_renderingPath(UnityEngine.RenderingPath value);
        /*0x286d1dc*/ UnityEngine.RenderingPath get_actualRenderingPath();
        /*0x286d218*/ void Reset();
        /*0x286d254*/ bool get_allowHDR();
        /*0x286d290*/ void set_allowHDR(bool value);
        /*0x286d2d4*/ bool get_allowMSAA();
        /*0x286d310*/ void set_allowMSAA(bool value);
        /*0x286d354*/ bool get_allowDynamicResolution();
        /*0x286d390*/ void set_allowDynamicResolution(bool value);
        /*0x286d3d4*/ bool get_forceIntoRenderTexture();
        /*0x286d410*/ void set_forceIntoRenderTexture(bool value);
        /*0x286d454*/ float get_orthographicSize();
        /*0x286d490*/ void set_orthographicSize(float value);
        /*0x286d4dc*/ bool get_orthographic();
        /*0x286d518*/ void set_orthographic(bool value);
        /*0x286d55c*/ UnityEngine.Rendering.OpaqueSortMode get_opaqueSortMode();
        /*0x286d598*/ void set_opaqueSortMode(UnityEngine.Rendering.OpaqueSortMode value);
        /*0x286d5dc*/ UnityEngine.TransparencySortMode get_transparencySortMode();
        /*0x286d618*/ void set_transparencySortMode(UnityEngine.TransparencySortMode value);
        /*0x286d65c*/ UnityEngine.Vector3 get_transparencySortAxis();
        /*0x286d6fc*/ void set_transparencySortAxis(UnityEngine.Vector3 value);
        /*0x286d794*/ void ResetTransparencySortSettings();
        /*0x286d7d0*/ float get_depth();
        /*0x286d80c*/ void set_depth(float value);
        /*0x286d858*/ float get_aspect();
        /*0x286d894*/ void set_aspect(float value);
        /*0x286d8e0*/ void ResetAspect();
        /*0x286d91c*/ UnityEngine.Vector3 get_velocity();
        /*0x286d9bc*/ int get_cullingMask();
        /*0x286d9f8*/ void set_cullingMask(int value);
        /*0x286da3c*/ int get_eventMask();
        /*0x286da78*/ void set_eventMask(int value);
        /*0x286dabc*/ bool get_layerCullSpherical();
        /*0x286daf8*/ void set_layerCullSpherical(bool value);
        /*0x286db3c*/ UnityEngine.CameraType get_cameraType();
        /*0x286db78*/ void set_cameraType(UnityEngine.CameraType value);
        /*0x286dbbc*/ UnityEngine.Material get_skyboxMaterial();
        /*0x286dbf8*/ ulong get_overrideSceneCullingMask();
        /*0x286dc34*/ void set_overrideSceneCullingMask(ulong value);
        /*0x286dc78*/ ulong get_sceneCullingMask();
        /*0x286dcb4*/ float[] GetLayerCullDistances();
        /*0x286dcf0*/ void SetLayerCullDistances(float[] d);
        /*0x286dd34*/ float[] get_layerCullDistances();
        /*0x286dd70*/ void set_layerCullDistances(float[] value);
        /*0x286de1c*/ bool get_useOcclusionCulling();
        /*0x286de58*/ void set_useOcclusionCulling(bool value);
        /*0x286de9c*/ UnityEngine.Matrix4x4 get_cullingMatrix();
        /*0x286df4c*/ void set_cullingMatrix(UnityEngine.Matrix4x4 value);
        /*0x286dfd4*/ void ResetCullingMatrix();
        /*0x286e010*/ UnityEngine.Color get_backgroundColor();
        /*0x286e0ac*/ void set_backgroundColor(UnityEngine.Color value);
        /*0x286e144*/ UnityEngine.CameraClearFlags get_clearFlags();
        /*0x286e180*/ void set_clearFlags(UnityEngine.CameraClearFlags value);
        /*0x286e1c4*/ UnityEngine.DepthTextureMode get_depthTextureMode();
        /*0x286e200*/ void set_depthTextureMode(UnityEngine.DepthTextureMode value);
        /*0x286e244*/ bool get_clearStencilAfterLightingPass();
        /*0x286e280*/ void set_clearStencilAfterLightingPass(bool value);
        /*0x286e2c4*/ void SetReplacementShader(UnityEngine.Shader shader, string replacementTag);
        /*0x286e318*/ void ResetReplacementShader();
        /*0x286e354*/ UnityEngine.Camera.ProjectionMatrixMode get_projectionMatrixMode();
        /*0x286e390*/ bool get_usePhysicalProperties();
        /*0x286e3cc*/ void set_usePhysicalProperties(bool value);
        /*0x286e410*/ UnityEngine.Vector2 get_sensorSize();
        /*0x286e4a0*/ void set_sensorSize(UnityEngine.Vector2 value);
        /*0x286e52c*/ UnityEngine.Vector2 get_lensShift();
        /*0x286e5bc*/ void set_lensShift(UnityEngine.Vector2 value);
        /*0x286e648*/ float get_focalLength();
        /*0x286e684*/ void set_focalLength(float value);
        /*0x286e6d0*/ UnityEngine.Camera.GateFitMode get_gateFit();
        /*0x286e70c*/ void set_gateFit(UnityEngine.Camera.GateFitMode value);
        /*0x286e750*/ float GetGateFittedFieldOfView();
        /*0x286e78c*/ UnityEngine.Vector2 GetGateFittedLensShift();
        /*0x286e81c*/ UnityEngine.Vector3 GetLocalSpaceAim();
        /*0x286e8bc*/ UnityEngine.Rect get_rect();
        /*0x286e958*/ void set_rect(UnityEngine.Rect value);
        /*0x286e9f0*/ UnityEngine.Rect get_pixelRect();
        /*0x286ea8c*/ void set_pixelRect(UnityEngine.Rect value);
        /*0x286eb24*/ int get_pixelWidth();
        /*0x286eb60*/ int get_pixelHeight();
        /*0x286eb9c*/ int get_scaledPixelWidth();
        /*0x286ebd8*/ int get_scaledPixelHeight();
        /*0x286ec14*/ UnityEngine.RenderTexture get_targetTexture();
        /*0x286ec50*/ void set_targetTexture(UnityEngine.RenderTexture value);
        /*0x286ec94*/ UnityEngine.RenderTexture get_activeTexture();
        /*0x286ecd0*/ int get_targetDisplay();
        /*0x286ed0c*/ void set_targetDisplay(int value);
        /*0x286ed50*/ void SetTargetBuffersImpl(UnityEngine.RenderBuffer color, UnityEngine.RenderBuffer depth);
        /*0x286edfc*/ void SetTargetBuffers(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer);
        /*0x286ee00*/ void SetTargetBuffersMRTImpl(UnityEngine.RenderBuffer[] color, UnityEngine.RenderBuffer depth);
        /*0x286eeac*/ void SetTargetBuffers(UnityEngine.RenderBuffer[] colorBuffer, UnityEngine.RenderBuffer depthBuffer);
        /*0x286eeb0*/ string[] GetCameraBufferWarnings();
        /*0x286eeec*/ UnityEngine.Matrix4x4 get_cameraToWorldMatrix();
        /*0x28648ec*/ UnityEngine.Matrix4x4 get_worldToCameraMatrix();
        /*0x286efe0*/ void set_worldToCameraMatrix(UnityEngine.Matrix4x4 value);
        /*0x2864880*/ UnityEngine.Matrix4x4 get_projectionMatrix();
        /*0x286f0ac*/ void set_projectionMatrix(UnityEngine.Matrix4x4 value);
        /*0x286f134*/ UnityEngine.Matrix4x4 get_nonJitteredProjectionMatrix();
        /*0x286f1e4*/ void set_nonJitteredProjectionMatrix(UnityEngine.Matrix4x4 value);
        /*0x286f26c*/ bool get_useJitteredProjectionMatrixForTransparentRendering();
        /*0x286f2a8*/ void set_useJitteredProjectionMatrixForTransparentRendering(bool value);
        /*0x286f2ec*/ UnityEngine.Matrix4x4 get_previousViewProjectionMatrix();
        /*0x286f39c*/ void ResetWorldToCameraMatrix();
        /*0x286f3d8*/ void ResetProjectionMatrix();
        /*0x286f414*/ UnityEngine.Matrix4x4 CalculateObliqueMatrix(UnityEngine.Vector4 clipPlane);
        /*0x286f4e0*/ UnityEngine.Vector3 WorldToScreenPoint(UnityEngine.Vector3 position, UnityEngine.Camera.MonoOrStereoscopicEye eye);
        /*0x286f5ac*/ UnityEngine.Vector3 WorldToViewportPoint(UnityEngine.Vector3 position, UnityEngine.Camera.MonoOrStereoscopicEye eye);
        /*0x286f678*/ UnityEngine.Vector3 ViewportToWorldPoint(UnityEngine.Vector3 position, UnityEngine.Camera.MonoOrStereoscopicEye eye);
        /*0x286f744*/ UnityEngine.Vector3 ScreenToWorldPoint(UnityEngine.Vector3 position, UnityEngine.Camera.MonoOrStereoscopicEye eye);
        /*0x286f810*/ UnityEngine.Vector3 WorldToScreenPoint(UnityEngine.Vector3 position);
        /*0x286f818*/ UnityEngine.Vector3 WorldToViewportPoint(UnityEngine.Vector3 position);
        /*0x286f820*/ UnityEngine.Vector3 ViewportToWorldPoint(UnityEngine.Vector3 position);
        /*0x286f828*/ UnityEngine.Vector3 ScreenToWorldPoint(UnityEngine.Vector3 position);
        /*0x286f830*/ UnityEngine.Vector3 ScreenToViewportPoint(UnityEngine.Vector3 position);
        /*0x286f8ec*/ UnityEngine.Vector3 ViewportToScreenPoint(UnityEngine.Vector3 position);
        /*0x286f9a8*/ UnityEngine.Vector2 GetFrustumPlaneSizeAt(float distance);
        /*0x286fa60*/ UnityEngine.Ray ViewportPointToRay(UnityEngine.Vector2 pos, UnityEngine.Camera.MonoOrStereoscopicEye eye);
        /*0x286fb34*/ UnityEngine.Ray ViewportPointToRay(UnityEngine.Vector3 pos, UnityEngine.Camera.MonoOrStereoscopicEye eye);
        /*0x286fb6c*/ UnityEngine.Ray ViewportPointToRay(UnityEngine.Vector3 pos);
        /*0x286fbb8*/ UnityEngine.Ray ScreenPointToRay(UnityEngine.Vector2 pos, UnityEngine.Camera.MonoOrStereoscopicEye eye);
        /*0x286fc8c*/ UnityEngine.Ray ScreenPointToRay(UnityEngine.Vector3 pos, UnityEngine.Camera.MonoOrStereoscopicEye eye);
        /*0x286fcc4*/ UnityEngine.Ray ScreenPointToRay(UnityEngine.Vector3 pos);
        /*0x286fd10*/ void CalculateFrustumCornersInternal(UnityEngine.Rect viewport, float z, UnityEngine.Camera.MonoOrStereoscopicEye eye, UnityEngine.Vector3[] outCorners);
        /*0x286fdf8*/ void CalculateFrustumCorners(UnityEngine.Rect viewport, float z, UnityEngine.Camera.MonoOrStereoscopicEye eye, UnityEngine.Vector3[] outCorners);
        /*0x287012c*/ UnityEngine.SceneManagement.Scene get_scene();
        /*0x28701bc*/ void set_scene(UnityEngine.SceneManagement.Scene value);
        /*0x2870248*/ bool get_stereoEnabled();
        /*0x2870284*/ float get_stereoSeparation();
        /*0x28702c0*/ void set_stereoSeparation(float value);
        /*0x287030c*/ float get_stereoConvergence();
        /*0x2870348*/ void set_stereoConvergence(float value);
        /*0x2870394*/ bool get_areVRStereoViewMatricesWithinSingleCullTolerance();
        /*0x28703d0*/ UnityEngine.StereoTargetEyeMask get_stereoTargetEye();
        /*0x287040c*/ void set_stereoTargetEye(UnityEngine.StereoTargetEyeMask value);
        /*0x2870450*/ UnityEngine.Camera.MonoOrStereoscopicEye get_stereoActiveEye();
        /*0x287048c*/ UnityEngine.Matrix4x4 GetStereoNonJitteredProjectionMatrix(UnityEngine.Camera.StereoscopicEye eye);
        /*0x287055c*/ UnityEngine.Matrix4x4 GetStereoViewMatrix(UnityEngine.Camera.StereoscopicEye eye);
        /*0x287062c*/ void CopyStereoDeviceProjectionMatrixToNonJittered(UnityEngine.Camera.StereoscopicEye eye);
        /*0x2870670*/ UnityEngine.Matrix4x4 GetStereoProjectionMatrix(UnityEngine.Camera.StereoscopicEye eye);
        /*0x2870740*/ void SetStereoProjectionMatrix(UnityEngine.Camera.StereoscopicEye eye, UnityEngine.Matrix4x4 matrix);
        /*0x28707e8*/ void ResetStereoProjectionMatrices();
        /*0x2870824*/ void SetStereoViewMatrix(UnityEngine.Camera.StereoscopicEye eye, UnityEngine.Matrix4x4 matrix);
        /*0x28708cc*/ void ResetStereoViewMatrices();
        /*0x2870b18*/ bool RenderToCubemapImpl(UnityEngine.Texture tex, int faceMask);
        /*0x2870b6c*/ bool RenderToCubemap(UnityEngine.Cubemap cubemap, int faceMask);
        /*0x2870bc0*/ bool RenderToCubemap(UnityEngine.Cubemap cubemap);
        /*0x2870c08*/ bool RenderToCubemap(UnityEngine.RenderTexture cubemap, int faceMask);
        /*0x2870c5c*/ bool RenderToCubemap(UnityEngine.RenderTexture cubemap);
        /*0x2870ca4*/ int GetFilterMode();
        /*0x2870ce0*/ UnityEngine.Camera.SceneViewFilterMode get_sceneViewFilterMode();
        /*0x2870d1c*/ bool RenderToCubemapEyeImpl(UnityEngine.RenderTexture cubemap, int faceMask, UnityEngine.Camera.MonoOrStereoscopicEye stereoEye);
        /*0x2870d78*/ bool RenderToCubemap(UnityEngine.RenderTexture cubemap, int faceMask, UnityEngine.Camera.MonoOrStereoscopicEye stereoEye);
        /*0x2870dd4*/ void Render();
        /*0x2870e10*/ void RenderWithShader(UnityEngine.Shader shader, string replacementTag);
        /*0x2870e64*/ void RenderDontRestore();
        /*0x2870ea0*/ void SubmitRenderRequests(System.Collections.Generic.List<UnityEngine.Camera.RenderRequest> renderRequests);
        /*0x2870ff0*/ void SubmitRenderRequestsInternal(object requests);
        /*0x2871070*/ void CopyFrom(UnityEngine.Camera other);
        /*0x28710b4*/ int get_commandBufferCount();
        /*0x28710f0*/ void RemoveCommandBuffers(UnityEngine.Rendering.CameraEvent evt);
        /*0x2871134*/ void RemoveAllCommandBuffers();
        /*0x2871170*/ void AddCommandBufferImpl(UnityEngine.Rendering.CameraEvent evt, UnityEngine.Rendering.CommandBuffer buffer);
        /*0x28711c4*/ void AddCommandBufferAsyncImpl(UnityEngine.Rendering.CameraEvent evt, UnityEngine.Rendering.CommandBuffer buffer, UnityEngine.Rendering.ComputeQueueType queueType);
        /*0x2871220*/ void RemoveCommandBufferImpl(UnityEngine.Rendering.CameraEvent evt, UnityEngine.Rendering.CommandBuffer buffer);
        /*0x2871274*/ void AddCommandBuffer(UnityEngine.Rendering.CameraEvent evt, UnityEngine.Rendering.CommandBuffer buffer);
        /*0x28713b0*/ void AddCommandBufferAsync(UnityEngine.Rendering.CameraEvent evt, UnityEngine.Rendering.CommandBuffer buffer, UnityEngine.Rendering.ComputeQueueType queueType);
        /*0x28714fc*/ void RemoveCommandBuffer(UnityEngine.Rendering.CameraEvent evt, UnityEngine.Rendering.CommandBuffer buffer);
        /*0x2871638*/ UnityEngine.Rendering.CommandBuffer[] GetCommandBuffers(UnityEngine.Rendering.CameraEvent evt);
        /*0x28717c0*/ void OnlyUsedForTesting1();
        /*0x28717c4*/ void OnlyUsedForTesting2();
        /*0x28717c8*/ bool TryGetCullingParameters(ref UnityEngine.Rendering.ScriptableCullingParameters cullingParameters);
        /*0x2871870*/ bool TryGetCullingParameters(bool stereoAware, ref UnityEngine.Rendering.ScriptableCullingParameters cullingParameters);
        /*0x286d6b8*/ void get_transparencySortAxis_Injected(ref UnityEngine.Vector3 ret);
        /*0x286d750*/ void set_transparencySortAxis_Injected(ref UnityEngine.Vector3 value);
        /*0x286d978*/ void get_velocity_Injected(ref UnityEngine.Vector3 ret);
        /*0x286df08*/ void get_cullingMatrix_Injected(ref UnityEngine.Matrix4x4 ret);
        /*0x286df90*/ void set_cullingMatrix_Injected(ref UnityEngine.Matrix4x4 value);
        /*0x286e068*/ void get_backgroundColor_Injected(ref UnityEngine.Color ret);
        /*0x286e100*/ void set_backgroundColor_Injected(ref UnityEngine.Color value);
        /*0x286e45c*/ void get_sensorSize_Injected(ref UnityEngine.Vector2 ret);
        /*0x286e4e8*/ void set_sensorSize_Injected(ref UnityEngine.Vector2 value);
        /*0x286e578*/ void get_lensShift_Injected(ref UnityEngine.Vector2 ret);
        /*0x286e604*/ void set_lensShift_Injected(ref UnityEngine.Vector2 value);
        /*0x286e7d8*/ void GetGateFittedLensShift_Injected(ref UnityEngine.Vector2 ret);
        /*0x286e878*/ void GetLocalSpaceAim_Injected(ref UnityEngine.Vector3 ret);
        /*0x286e914*/ void get_rect_Injected(ref UnityEngine.Rect ret);
        /*0x286e9ac*/ void set_rect_Injected(ref UnityEngine.Rect value);
        /*0x286ea48*/ void get_pixelRect_Injected(ref UnityEngine.Rect ret);
        /*0x286eae0*/ void set_pixelRect_Injected(ref UnityEngine.Rect value);
        /*0x286eda8*/ void SetTargetBuffersImpl_Injected(ref UnityEngine.RenderBuffer color, ref UnityEngine.RenderBuffer depth);
        /*0x286ee58*/ void SetTargetBuffersMRTImpl_Injected(UnityEngine.RenderBuffer[] color, ref UnityEngine.RenderBuffer depth);
        /*0x286ef58*/ void get_cameraToWorldMatrix_Injected(ref UnityEngine.Matrix4x4 ret);
        /*0x286ef9c*/ void get_worldToCameraMatrix_Injected(ref UnityEngine.Matrix4x4 ret);
        /*0x286f024*/ void set_worldToCameraMatrix_Injected(ref UnityEngine.Matrix4x4 value);
        /*0x286f068*/ void get_projectionMatrix_Injected(ref UnityEngine.Matrix4x4 ret);
        /*0x286f0f0*/ void set_projectionMatrix_Injected(ref UnityEngine.Matrix4x4 value);
        /*0x286f1a0*/ void get_nonJitteredProjectionMatrix_Injected(ref UnityEngine.Matrix4x4 ret);
        /*0x286f228*/ void set_nonJitteredProjectionMatrix_Injected(ref UnityEngine.Matrix4x4 value);
        /*0x286f358*/ void get_previousViewProjectionMatrix_Injected(ref UnityEngine.Matrix4x4 ret);
        /*0x286f48c*/ void CalculateObliqueMatrix_Injected(ref UnityEngine.Vector4 clipPlane, ref UnityEngine.Matrix4x4 ret);
        /*0x286f550*/ void WorldToScreenPoint_Injected(ref UnityEngine.Vector3 position, UnityEngine.Camera.MonoOrStereoscopicEye eye, ref UnityEngine.Vector3 ret);
        /*0x286f61c*/ void WorldToViewportPoint_Injected(ref UnityEngine.Vector3 position, UnityEngine.Camera.MonoOrStereoscopicEye eye, ref UnityEngine.Vector3 ret);
        /*0x286f6e8*/ void ViewportToWorldPoint_Injected(ref UnityEngine.Vector3 position, UnityEngine.Camera.MonoOrStereoscopicEye eye, ref UnityEngine.Vector3 ret);
        /*0x286f7b4*/ void ScreenToWorldPoint_Injected(ref UnityEngine.Vector3 position, UnityEngine.Camera.MonoOrStereoscopicEye eye, ref UnityEngine.Vector3 ret);
        /*0x286f898*/ void ScreenToViewportPoint_Injected(ref UnityEngine.Vector3 position, ref UnityEngine.Vector3 ret);
        /*0x286f954*/ void ViewportToScreenPoint_Injected(ref UnityEngine.Vector3 position, ref UnityEngine.Vector3 ret);
        /*0x286fa0c*/ void GetFrustumPlaneSizeAt_Injected(float distance, ref UnityEngine.Vector2 ret);
        /*0x286fad8*/ void ViewportPointToRay_Injected(ref UnityEngine.Vector2 pos, UnityEngine.Camera.MonoOrStereoscopicEye eye, ref UnityEngine.Ray ret);
        /*0x286fc30*/ void ScreenPointToRay_Injected(ref UnityEngine.Vector2 pos, UnityEngine.Camera.MonoOrStereoscopicEye eye, ref UnityEngine.Ray ret);
        /*0x286fd8c*/ void CalculateFrustumCornersInternal_Injected(ref UnityEngine.Rect viewport, float z, UnityEngine.Camera.MonoOrStereoscopicEye eye, UnityEngine.Vector3[] outCorners);
        /*0x2870178*/ void get_scene_Injected(ref UnityEngine.SceneManagement.Scene ret);
        /*0x2870204*/ void set_scene_Injected(ref UnityEngine.SceneManagement.Scene value);
        /*0x2870508*/ void GetStereoNonJitteredProjectionMatrix_Injected(UnityEngine.Camera.StereoscopicEye eye, ref UnityEngine.Matrix4x4 ret);
        /*0x28705d8*/ void GetStereoViewMatrix_Injected(UnityEngine.Camera.StereoscopicEye eye, ref UnityEngine.Matrix4x4 ret);
        /*0x28706ec*/ void GetStereoProjectionMatrix_Injected(UnityEngine.Camera.StereoscopicEye eye, ref UnityEngine.Matrix4x4 ret);
        /*0x2870794*/ void SetStereoProjectionMatrix_Injected(UnityEngine.Camera.StereoscopicEye eye, ref UnityEngine.Matrix4x4 matrix);
        /*0x2870878*/ void SetStereoViewMatrix_Injected(UnityEngine.Camera.StereoscopicEye eye, ref UnityEngine.Matrix4x4 matrix);

        enum ProjectionMatrixMode
        {
            Explicit = 0,
            Implicit = 1,
            PhysicalPropertiesBased = 2,
        }

        enum GateFitMode
        {
            Vertical = 1,
            Horizontal = 2,
            Fill = 3,
            Overscan = 4,
            None = 0,
        }

        struct GateFitParameters
        {
            /*0x10*/ UnityEngine.Camera.GateFitMode <mode>k__BackingField;
            /*0x14*/ float <aspect>k__BackingField;

            /*0x28718c8*/ UnityEngine.Camera.GateFitMode get_mode();
            /*0x28718d0*/ float get_aspect();
        }

        enum StereoscopicEye
        {
            Left = 0,
            Right = 1,
        }

        enum MonoOrStereoscopicEye
        {
            Left = 0,
            Right = 1,
            Mono = 2,
        }

        enum SceneViewFilterMode
        {
            Off = 0,
            ShowFiltered = 1,
        }

        enum RenderRequestMode
        {
            None = 0,
            ObjectId = 1,
            Depth = 2,
            VertexNormal = 3,
            WorldPosition = 4,
            EntityId = 5,
            BaseColor = 6,
            SpecularColor = 7,
            Metallic = 8,
            Emission = 9,
            Normal = 10,
            Smoothness = 11,
            Occlusion = 12,
            DiffuseColor = 13,
        }

        enum RenderRequestOutputSpace
        {
            ScreenSpace = -1,
            UV0 = 0,
            UV1 = 1,
            UV2 = 2,
            UV3 = 3,
            UV4 = 4,
            UV5 = 5,
            UV6 = 6,
            UV7 = 7,
            UV8 = 8,
        }

        struct RenderRequest
        {
            /*0x10*/ UnityEngine.Camera.RenderRequestMode m_CameraRenderMode;
            /*0x18*/ UnityEngine.RenderTexture m_ResultRT;
            /*0x20*/ UnityEngine.Camera.RenderRequestOutputSpace m_OutputSpace;
        }

        class CameraCallback : System.MulticastDelegate
        {
            /*0x28718d8*/ CameraCallback(object object, nint method);
            /*0x28719ac*/ void Invoke(UnityEngine.Camera cam);
        }
    }

    class LightingSettings : UnityEngine.Object
    {
        static /*0x2871a44*/ void Internal_Create(UnityEngine.LightingSettings self);
        /*0x28719c4*/ LightingSettings();
        /*0x28719c0*/ void LightingSettingsDontStripMe();
        /*0x2871a80*/ bool get_bakedGI();
        /*0x2871abc*/ void set_bakedGI(bool value);
        /*0x2871b00*/ bool get_realtimeGI();
        /*0x2871b3c*/ void set_realtimeGI(bool value);
        /*0x2871b80*/ bool get_realtimeEnvironmentLighting();
        /*0x2871bbc*/ void set_realtimeEnvironmentLighting(bool value);
    }

    class DynamicGI
    {
        static /*0x2871c00*/ float get_indirectScale();
        static /*0x2871c28*/ void set_indirectScale(float value);
        static /*0x2871c60*/ float get_updateThreshold();
        static /*0x2871c88*/ void set_updateThreshold(float value);
        static /*0x2871cc0*/ int get_materialUpdateTimeSlice();
        static /*0x2871ce8*/ void set_materialUpdateTimeSlice(int value);
        static /*0x2871d24*/ void SetEmissive(UnityEngine.Renderer renderer, UnityEngine.Color color);
        static /*0x2871dbc*/ void SetEnvironmentData(float[] input);
        static /*0x2871df8*/ bool get_synchronousMode();
        static /*0x2871e20*/ void set_synchronousMode(bool value);
        static /*0x2871e5c*/ bool get_isConverged();
        static /*0x2871e84*/ int get_scheduledMaterialUpdatesCount();
        static /*0x2871eac*/ bool get_asyncMaterialUpdates();
        static /*0x2871ed4*/ void set_asyncMaterialUpdates(bool value);
        static /*0x2871f10*/ void UpdateEnvironment();
        static /*0x2871f38*/ void UpdateMaterials(UnityEngine.Renderer renderer);
        static /*0x2871f3c*/ void UpdateMaterials(UnityEngine.Object renderer);
        static /*0x2871f40*/ void UpdateMaterials(UnityEngine.Object renderer, int x, int y, int width, int height);
        static /*0x2871d78*/ void SetEmissive_Injected(UnityEngine.Renderer renderer, ref UnityEngine.Color color);
        /*0x2871f44*/ DynamicGI();
    }

    class Snapping
    {
        static /*0x2871f4c*/ bool IsCardinalDirection(UnityEngine.Vector3 direction);
        static /*0x2872134*/ float Snap(float val, float snap);
        static /*0x28721d0*/ UnityEngine.Vector2 Snap(UnityEngine.Vector2 val, UnityEngine.Vector2 snap);
        static /*0x2872374*/ UnityEngine.Vector3 Snap(UnityEngine.Vector3 val, UnityEngine.Vector3 snap, UnityEngine.SnapAxis axis);
    }

    enum SnapAxis
    {
        None = 0,
        X = 1,
        Y = 2,
        Z = 4,
        All = 7,
    }

    struct SnapAxisFilter : System.IEquatable<UnityEngine.SnapAxisFilter>
    {
        static UnityEngine.SnapAxis X = 1;
        static UnityEngine.SnapAxis Y = 2;
        static UnityEngine.SnapAxis Z = 4;
        static /*0x0*/ UnityEngine.SnapAxisFilter all;
        /*0x10*/ UnityEngine.SnapAxis m_Mask;

        static /*0x28729c8*/ SnapAxisFilter();
        static /*0x28725b8*/ UnityEngine.Vector3 op_Implicit(UnityEngine.SnapAxisFilter mask);
        static /*0x28725dc*/ UnityEngine.SnapAxisFilter op_Explicit(UnityEngine.Vector3 v);
        static /*0x2872614*/ UnityEngine.SnapAxis op_Explicit(UnityEngine.SnapAxisFilter mask);
        static /*0x2872618*/ UnityEngine.SnapAxisFilter op_BitwiseOr(UnityEngine.SnapAxisFilter left, UnityEngine.SnapAxisFilter right);
        static /*0x2872624*/ UnityEngine.SnapAxisFilter op_BitwiseAnd(UnityEngine.SnapAxisFilter left, UnityEngine.SnapAxisFilter right);
        static /*0x2872630*/ UnityEngine.SnapAxisFilter op_ExclusiveOr(UnityEngine.SnapAxisFilter left, UnityEngine.SnapAxisFilter right);
        static /*0x287263c*/ UnityEngine.SnapAxisFilter op_OnesComplement(UnityEngine.SnapAxisFilter left);
        static /*0x2872648*/ UnityEngine.Vector3 op_Multiply(UnityEngine.SnapAxisFilter mask, float value);
        static /*0x287267c*/ UnityEngine.Vector3 op_Multiply(UnityEngine.SnapAxisFilter mask, UnityEngine.Vector3 right);
        static /*0x28726ac*/ UnityEngine.Vector3 op_Multiply(UnityEngine.Quaternion rotation, UnityEngine.SnapAxisFilter mask);
        static /*0x28727ec*/ bool op_Equality(UnityEngine.SnapAxisFilter left, UnityEngine.SnapAxisFilter right);
        static /*0x28727fc*/ bool op_Inequality(UnityEngine.SnapAxisFilter left, UnityEngine.SnapAxisFilter right);
        /*0x287244c*/ SnapAxisFilter(UnityEngine.Vector3 v);
        /*0x2872488*/ SnapAxisFilter(UnityEngine.SnapAxis axis);
        /*0x2872404*/ float get_x();
        /*0x287241c*/ float get_y();
        /*0x2872434*/ float get_z();
        /*0x28724b0*/ string ToString();
        /*0x287259c*/ int get_active();
        /*0x2872864*/ float get_Item(int i);
        /*0x28728c4*/ void set_Item(int i, float value);
        /*0x2872938*/ bool Equals(UnityEngine.SnapAxisFilter other);
        /*0x2872948*/ bool Equals(object obj);
        /*0x28729c0*/ int GetHashCode();
    }

    struct PropertyName : System.IEquatable<UnityEngine.PropertyName>
    {
        /*0x10*/ int id;

        static /*0x2872acc*/ bool IsNullOrEmpty(UnityEngine.PropertyName prop);
        static /*0x2872ad8*/ bool op_Equality(UnityEngine.PropertyName lhs, UnityEngine.PropertyName rhs);
        static /*0x2872ae4*/ bool op_Inequality(UnityEngine.PropertyName lhs, UnityEngine.PropertyName rhs);
        static /*0x2872b80*/ UnityEngine.PropertyName op_Implicit(string name);
        static /*0x2872bcc*/ UnityEngine.PropertyName op_Implicit(int id);
        /*0x2872a14*/ PropertyName(string name);
        /*0x2872abc*/ PropertyName(UnityEngine.PropertyName other);
        /*0x2872ac4*/ PropertyName(int id);
        /*0x2872af0*/ int GetHashCode();
        /*0x2872af8*/ bool Equals(object other);
        /*0x2872b70*/ bool Equals(UnityEngine.PropertyName other);
        /*0x2872bd4*/ string ToString();
    }

    class PropertyNameUtils
    {
        static /*0x2872a70*/ UnityEngine.PropertyName PropertyNameFromString(string name);
        static /*0x2872c58*/ void PropertyNameFromString_Injected(string name, ref UnityEngine.PropertyName ret);
        /*0x2872c9c*/ PropertyNameUtils();
    }

    class RectOffset : System.IFormattable
    {
        /*0x10*/ nint m_Ptr;
        /*0x18*/ object m_SourceStyle;

        static /*0x2872cec*/ nint InternalCreate();
        static /*0x2873444*/ void InternalDestroy(nint ptr);
        /*0x2872ca4*/ RectOffset();
        /*0x2872d14*/ RectOffset(object sourceStyle, nint source);
        /*0x2872e80*/ RectOffset(int left, int right, int top, int bottom);
        /*0x2872d40*/ void Finalize();
        /*0x28730a4*/ string ToString();
        /*0x287334c*/ string ToString(string format);
        /*0x28730b0*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x2872de0*/ void Destroy();
        /*0x2873354*/ int get_left();
        /*0x2872f94*/ void set_left(int value);
        /*0x2873390*/ int get_right();
        /*0x2872fd8*/ void set_right(int value);
        /*0x28733cc*/ int get_top();
        /*0x287301c*/ void set_top(int value);
        /*0x2873408*/ int get_bottom();
        /*0x2873060*/ void set_bottom(int value);
        /*0x2873480*/ int get_horizontal();
        /*0x28734bc*/ int get_vertical();
        /*0x28734f8*/ UnityEngine.Rect Add(UnityEngine.Rect rect);
        /*0x28735b0*/ UnityEngine.Rect Remove(UnityEngine.Rect rect);
        /*0x287355c*/ void Add_Injected(ref UnityEngine.Rect rect, ref UnityEngine.Rect ret);
        /*0x2873614*/ void Remove_Injected(ref UnityEngine.Rect rect, ref UnityEngine.Rect ret);
    }

    struct RectInt : System.IEquatable<UnityEngine.RectInt>, System.IFormattable
    {
        /*0x10*/ int m_XMin;
        /*0x14*/ int m_YMin;
        /*0x18*/ int m_Width;
        /*0x1c*/ int m_Height;

        /*0x2873a18*/ RectInt(int xMin, int yMin, int width, int height);
        /*0x2873a24*/ RectInt(UnityEngine.Vector2Int position, UnityEngine.Vector2Int size);
        /*0x2873668*/ int get_x();
        /*0x2873670*/ void set_x(int value);
        /*0x2873678*/ int get_y();
        /*0x2873680*/ void set_y(int value);
        /*0x2873688*/ UnityEngine.Vector2 get_center();
        /*0x28736a8*/ UnityEngine.Vector2Int get_min();
        /*0x28737a4*/ void set_min(UnityEngine.Vector2Int value);
        /*0x2873840*/ UnityEngine.Vector2Int get_max();
        /*0x287393c*/ void set_max(UnityEngine.Vector2Int value);
        /*0x2873974*/ int get_width();
        /*0x287397c*/ void set_width(int value);
        /*0x2873984*/ int get_height();
        /*0x287398c*/ void set_height(int value);
        /*0x28736dc*/ int get_xMin();
        /*0x28737e8*/ void set_xMin(int value);
        /*0x2873740*/ int get_yMin();
        /*0x2873814*/ void set_yMin(int value);
        /*0x2873874*/ int get_xMax();
        /*0x2873954*/ void set_xMax(int value);
        /*0x28738d8*/ int get_yMax();
        /*0x2873964*/ void set_yMax(int value);
        /*0x2873994*/ UnityEngine.Vector2Int get_position();
        /*0x287399c*/ void set_position(UnityEngine.Vector2Int value);
        /*0x28739a8*/ UnityEngine.Vector2Int get_size();
        /*0x28739b0*/ void set_size(UnityEngine.Vector2Int value);
        /*0x28739bc*/ void SetMinMax(UnityEngine.Vector2Int minPosition, UnityEngine.Vector2Int maxPosition);
        /*0x2873a38*/ void ClampToBounds(UnityEngine.RectInt bounds);
        /*0x2873b4c*/ bool Contains(UnityEngine.Vector2Int position);
        /*0x2873bb0*/ bool Overlaps(UnityEngine.RectInt other);
        /*0x2873c4c*/ string ToString();
        /*0x2873e64*/ string ToString(string format);
        /*0x2873c58*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x28633d0*/ bool Equals(UnityEngine.RectInt other);
        /*0x2873e6c*/ UnityEngine.RectInt.PositionEnumerator get_allPositionsWithin();

        struct PositionEnumerator : System.Collections.Generic.IEnumerator<UnityEngine.Vector2Int>, System.Collections.IEnumerator, System.IDisposable
        {
            /*0x10*/ UnityEngine.Vector2Int _min;
            /*0x18*/ UnityEngine.Vector2Int _max;
            /*0x20*/ UnityEngine.Vector2Int _current;

            /*0x2873ee0*/ PositionEnumerator(UnityEngine.Vector2Int min, UnityEngine.Vector2Int max);
            /*0x2873f08*/ bool MoveNext();
            /*0x2873ef4*/ void Reset();
            /*0x2873f60*/ UnityEngine.Vector2Int get_Current();
            /*0x2873f68*/ object System.Collections.IEnumerator.get_Current();
            /*0x2873fc4*/ void System.IDisposable.Dispose();
        }
    }

    struct Plane : System.IFormattable
    {
        static int size = 16;
        /*0x10*/ UnityEngine.Vector3 m_Normal;
        /*0x1c*/ float m_Distance;

        static /*0x28743f4*/ UnityEngine.Plane Translate(UnityEngine.Plane plane, UnityEngine.Vector3 translation);
        /*0x2873fe4*/ Plane(UnityEngine.Vector3 inNormal, UnityEngine.Vector3 inPoint);
        /*0x2864d54*/ Plane(UnityEngine.Vector3 inNormal, float d);
        /*0x2864e3c*/ Plane(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c);
        /*0x2864fb4*/ UnityEngine.Vector3 get_normal();
        /*0x2873fc8*/ void set_normal(UnityEngine.Vector3 value);
        /*0x2873fd4*/ float get_distance();
        /*0x2873fdc*/ void set_distance(float value);
        /*0x28740f4*/ void SetNormalAndPosition(UnityEngine.Vector3 inNormal, UnityEngine.Vector3 inPoint);
        /*0x2874204*/ void Set3Points(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c);
        /*0x287437c*/ void Flip();
        /*0x287438c*/ UnityEngine.Plane get_flipped();
        /*0x28743cc*/ void Translate(UnityEngine.Vector3 translation);
        /*0x2874434*/ UnityEngine.Vector3 ClosestPointOnPlane(UnityEngine.Vector3 point);
        /*0x2874470*/ float GetDistanceToPoint(UnityEngine.Vector3 point);
        /*0x2874494*/ bool GetSide(UnityEngine.Vector3 point);
        /*0x28744c0*/ bool SameSide(UnityEngine.Vector3 inPt0, UnityEngine.Vector3 inPt1);
        /*0x2874530*/ bool Raycast(UnityEngine.Ray ray, ref float enter);
        /*0x2874648*/ string ToString();
        /*0x28747dc*/ string ToString(string format);
        /*0x2874654*/ string ToString(string format, System.IFormatProvider formatProvider);
    }

    struct Bounds : System.IEquatable<UnityEngine.Bounds>, System.IFormattable
    {
        /*0x10*/ UnityEngine.Vector3 m_Center;
        /*0x1c*/ UnityEngine.Vector3 m_Extents;

        static /*0x2874b8c*/ bool op_Equality(UnityEngine.Bounds lhs, UnityEngine.Bounds rhs);
        static /*0x2874c08*/ bool op_Inequality(UnityEngine.Bounds lhs, UnityEngine.Bounds rhs);
        static /*0x2874e88*/ bool IntersectRayAABB(UnityEngine.Ray ray, UnityEngine.Bounds bounds, ref float dist);
        static /*0x2875144*/ bool Contains_Injected(ref UnityEngine.Bounds _unity_self, ref UnityEngine.Vector3 point);
        static /*0x28751dc*/ float SqrDistance_Injected(ref UnityEngine.Bounds _unity_self, ref UnityEngine.Vector3 point);
        static /*0x2875220*/ bool IntersectRayAABB_Injected(ref UnityEngine.Ray ray, ref UnityEngine.Bounds bounds, ref float dist);
        static /*0x28752dc*/ void ClosestPoint_Injected(ref UnityEngine.Bounds _unity_self, ref UnityEngine.Vector3 point, ref UnityEngine.Vector3 ret);
        /*0x28747e4*/ Bounds(UnityEngine.Vector3 center, UnityEngine.Vector3 size);
        /*0x2874804*/ int GetHashCode();
        /*0x28748ec*/ bool Equals(object other);
        /*0x28749bc*/ bool Equals(UnityEngine.Bounds other);
        /*0x28748d4*/ UnityEngine.Vector3 get_center();
        /*0x2874a28*/ void set_center(UnityEngine.Vector3 value);
        /*0x2874a34*/ UnityEngine.Vector3 get_size();
        /*0x2874a4c*/ void set_size(UnityEngine.Vector3 value);
        /*0x28748e0*/ UnityEngine.Vector3 get_extents();
        /*0x2874a68*/ void set_extents(UnityEngine.Vector3 value);
        /*0x2874a74*/ UnityEngine.Vector3 get_min();
        /*0x2874a94*/ void set_min(UnityEngine.Vector3 value);
        /*0x2874ae4*/ UnityEngine.Vector3 get_max();
        /*0x2874b3c*/ void set_max(UnityEngine.Vector3 value);
        /*0x2874b04*/ void SetMinMax(UnityEngine.Vector3 min, UnityEngine.Vector3 max);
        /*0x2874c50*/ void Encapsulate(UnityEngine.Vector3 point);
        /*0x2874cc8*/ void Encapsulate(UnityEngine.Bounds bounds);
        /*0x2874d24*/ void Expand(float amount);
        /*0x2874d4c*/ void Expand(UnityEngine.Vector3 amount);
        /*0x2874d7c*/ bool Intersects(UnityEngine.Bounds bounds);
        /*0x2874e1c*/ bool IntersectRay(UnityEngine.Ray ray);
        /*0x2874edc*/ bool IntersectRay(UnityEngine.Ray ray, ref float distance);
        /*0x2874f50*/ string ToString();
        /*0x28750e4*/ string ToString(string format);
        /*0x2874f5c*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x28750ec*/ bool Contains(UnityEngine.Vector3 point);
        /*0x2875188*/ float SqrDistance(UnityEngine.Vector3 point);
        /*0x2875274*/ UnityEngine.Vector3 ClosestPoint(UnityEngine.Vector3 point);
    }

    struct Rect : System.IEquatable<UnityEngine.Rect>, System.IFormattable
    {
        /*0x10*/ float m_XMin;
        /*0x14*/ float m_YMin;
        /*0x18*/ float m_Width;
        /*0x1c*/ float m_Height;

        static /*0x2875354*/ UnityEngine.Rect get_zero();
        static /*0x2875368*/ UnityEngine.Rect MinMaxRect(float xmin, float ymin, float xmax, float ymax);
        static /*0x2875664*/ UnityEngine.Rect OrderMinMax(UnityEngine.Rect rect);
        static /*0x2875770*/ UnityEngine.Vector2 NormalizedToPoint(UnityEngine.Rect rectangle, UnityEngine.Vector2 normalizedRectCoordinates);
        static /*0x28757b4*/ UnityEngine.Vector2 PointToNormalized(UnityEngine.Rect rectangle, UnityEngine.Vector2 point);
        static /*0x2875818*/ bool op_Inequality(UnityEngine.Rect lhs, UnityEngine.Rect rhs);
        static /*0x287584c*/ bool op_Equality(UnityEngine.Rect lhs, UnityEngine.Rect rhs);
        /*0x2875330*/ Rect(float x, float y, float width, float height);
        /*0x287533c*/ Rect(UnityEngine.Vector2 position, UnityEngine.Vector2 size);
        /*0x2875348*/ Rect(UnityEngine.Rect source);
        /*0x2875374*/ void Set(float x, float y, float width, float height);
        /*0x2875380*/ float get_x();
        /*0x2875388*/ void set_x(float value);
        /*0x2875390*/ float get_y();
        /*0x2875398*/ void set_y(float value);
        /*0x28753a0*/ UnityEngine.Vector2 get_position();
        /*0x28753a8*/ void set_position(UnityEngine.Vector2 value);
        /*0x28753b0*/ UnityEngine.Vector2 get_center();
        /*0x28753c8*/ void set_center(UnityEngine.Vector2 value);
        /*0x28753e4*/ UnityEngine.Vector2 get_min();
        /*0x28753fc*/ void set_min(UnityEngine.Vector2 value);
        /*0x2875450*/ UnityEngine.Vector2 get_max();
        /*0x2875480*/ void set_max(UnityEngine.Vector2 value);
        /*0x28754b4*/ float get_width();
        /*0x28754bc*/ void set_width(float value);
        /*0x28754c4*/ float get_height();
        /*0x28754cc*/ void set_height(float value);
        /*0x28754d4*/ UnityEngine.Vector2 get_size();
        /*0x28754dc*/ void set_size(UnityEngine.Vector2 value);
        /*0x28753ec*/ float get_xMin();
        /*0x2875418*/ void set_xMin(float value);
        /*0x28753f4*/ float get_yMin();
        /*0x2875434*/ void set_yMin(float value);
        /*0x2875460*/ float get_xMax();
        /*0x2875494*/ void set_xMax(float value);
        /*0x2875470*/ float get_yMax();
        /*0x28754a4*/ void set_yMax(float value);
        /*0x28754e4*/ bool Contains(UnityEngine.Vector2 point);
        /*0x2875528*/ bool Contains(UnityEngine.Vector3 point);
        /*0x287556c*/ bool Contains(UnityEngine.Vector3 point, bool allowInverse);
        /*0x2875690*/ bool Overlaps(UnityEngine.Rect other);
        /*0x28756dc*/ bool Overlaps(UnityEngine.Rect other, bool allowInverse);
        /*0x2875880*/ int GetHashCode();
        /*0x2875908*/ bool Equals(object other);
        /*0x2875984*/ bool Equals(UnityEngine.Rect other);
        /*0x2875a24*/ string ToString();
        /*0x2875c68*/ string ToString(string format);
        /*0x2875a30*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x2875c70*/ float get_left();
        /*0x2875c78*/ float get_right();
        /*0x2875c88*/ float get_top();
        /*0x2875c90*/ float get_bottom();
    }

    struct Ray2D : System.IFormattable
    {
        /*0x10*/ UnityEngine.Vector2 m_Origin;
        /*0x18*/ UnityEngine.Vector2 m_Direction;

        /*0x2875ca0*/ Ray2D(UnityEngine.Vector2 origin, UnityEngine.Vector2 direction);
        /*0x2875d68*/ UnityEngine.Vector2 get_origin();
        /*0x2875d70*/ void set_origin(UnityEngine.Vector2 value);
        /*0x2875d78*/ UnityEngine.Vector2 get_direction();
        /*0x2875d80*/ void set_direction(UnityEngine.Vector2 value);
        /*0x2875e44*/ UnityEngine.Vector2 GetPoint(float distance);
        /*0x2875e58*/ string ToString();
        /*0x2875fec*/ string ToString(string format);
        /*0x2875e64*/ string ToString(string format, System.IFormatProvider formatProvider);
    }

    struct BoundsInt : System.IEquatable<UnityEngine.BoundsInt>, System.IFormattable
    {
        /*0x10*/ UnityEngine.Vector3Int m_Position;
        /*0x1c*/ UnityEngine.Vector3Int m_Size;

        static /*0x28768a4*/ bool op_Equality(UnityEngine.BoundsInt lhs, UnityEngine.BoundsInt rhs);
        static /*0x287691c*/ bool op_Inequality(UnityEngine.BoundsInt lhs, UnityEngine.BoundsInt rhs);
        /*0x28764b8*/ BoundsInt(int xMin, int yMin, int zMin, int sizeX, int sizeY, int sizeZ);
        /*0x28764c8*/ BoundsInt(UnityEngine.Vector3Int position, UnityEngine.Vector3Int size);
        /*0x2875ff4*/ int get_x();
        /*0x2875ffc*/ void set_x(int value);
        /*0x2876004*/ int get_y();
        /*0x287600c*/ void set_y(int value);
        /*0x2876014*/ int get_z();
        /*0x287601c*/ void set_z(int value);
        /*0x2876024*/ UnityEngine.Vector3 get_center();
        /*0x2876064*/ UnityEngine.Vector3Int get_min();
        /*0x28761d4*/ void set_min(UnityEngine.Vector3Int value);
        /*0x28762bc*/ UnityEngine.Vector3Int get_max();
        /*0x287642c*/ void set_max(UnityEngine.Vector3Int value);
        /*0x28760a8*/ int get_xMin();
        /*0x2876238*/ void set_xMin(int value);
        /*0x287610c*/ int get_yMin();
        /*0x2876264*/ void set_yMin(int value);
        /*0x2876170*/ int get_zMin();
        /*0x2876290*/ void set_zMin(int value);
        /*0x2876300*/ int get_xMax();
        /*0x2876450*/ void set_xMax(int value);
        /*0x2876364*/ int get_yMax();
        /*0x2876460*/ void set_yMax(int value);
        /*0x28763c8*/ int get_zMax();
        /*0x2876470*/ void set_zMax(int value);
        /*0x2876480*/ UnityEngine.Vector3Int get_position();
        /*0x2876490*/ void set_position(UnityEngine.Vector3Int value);
        /*0x287649c*/ UnityEngine.Vector3Int get_size();
        /*0x28764ac*/ void set_size(UnityEngine.Vector3Int value);
        /*0x28764dc*/ void SetMinMax(UnityEngine.Vector3Int minPosition, UnityEngine.Vector3Int maxPosition);
        /*0x2876524*/ void ClampToBounds(UnityEngine.BoundsInt bounds);
        /*0x28766a4*/ bool Contains(UnityEngine.Vector3Int position);
        /*0x2876734*/ string ToString();
        /*0x287689c*/ string ToString(string format);
        /*0x2876740*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x2876994*/ bool Equals(object other);
        /*0x2876a24*/ bool Equals(UnityEngine.BoundsInt other);
        /*0x2876a9c*/ int GetHashCode();
        /*0x2876b70*/ UnityEngine.BoundsInt.PositionEnumerator get_allPositionsWithin();

        struct PositionEnumerator : System.Collections.Generic.IEnumerator<UnityEngine.Vector3Int>, System.Collections.IEnumerator, System.IDisposable
        {
            /*0x10*/ UnityEngine.Vector3Int _min;
            /*0x1c*/ UnityEngine.Vector3Int _max;
            /*0x28*/ UnityEngine.Vector3Int _current;

            /*0x2876bc4*/ PositionEnumerator(UnityEngine.Vector3Int min, UnityEngine.Vector3Int max);
            /*0x2876c00*/ bool MoveNext();
            /*0x2876be4*/ void Reset();
            /*0x2876c7c*/ UnityEngine.Vector3Int get_Current();
            /*0x2876c8c*/ object System.Collections.IEnumerator.get_Current();
            /*0x2876cf0*/ void System.IDisposable.Dispose();
        }
    }

    struct Ray : System.IFormattable
    {
        /*0x10*/ UnityEngine.Vector3 m_Origin;
        /*0x1c*/ UnityEngine.Vector3 m_Direction;

        /*0x2876cf4*/ Ray(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction);
        /*0x287463c*/ UnityEngine.Vector3 get_origin();
        /*0x2876de0*/ void set_origin(UnityEngine.Vector3 value);
        /*0x2874630*/ UnityEngine.Vector3 get_direction();
        /*0x2876dec*/ void set_direction(UnityEngine.Vector3 value);
        /*0x2876ed0*/ UnityEngine.Vector3 GetPoint(float distance);
        /*0x2876ef8*/ string ToString();
        /*0x287708c*/ string ToString(string format);
        /*0x2876f04*/ string ToString(string format, System.IFormatProvider formatProvider);
    }

    class DrivenPropertyManager
    {
        static /*0x2877094*/ void RegisterProperty(UnityEngine.Object driver, UnityEngine.Object target, string propertyPath);
        static /*0x287713c*/ void TryRegisterProperty(UnityEngine.Object driver, UnityEngine.Object target, string propertyPath);
        static /*0x28771e4*/ void UnregisterProperty(UnityEngine.Object driver, UnityEngine.Object target, string propertyPath);
        static /*0x287728c*/ void UnregisterProperties(UnityEngine.Object driver);
        static /*0x28770e8*/ void RegisterPropertyPartial(UnityEngine.Object driver, UnityEngine.Object target, string propertyPath);
        static /*0x2877190*/ void TryRegisterPropertyPartial(UnityEngine.Object driver, UnityEngine.Object target, string propertyPath);
        static /*0x2877238*/ void UnregisterPropertyPartial(UnityEngine.Object driver, UnityEngine.Object target, string propertyPath);
        /*0x28772c8*/ DrivenPropertyManager();
    }

    class Security
    {
        static /*0x28772d0*/ System.Reflection.Assembly LoadAndVerifyAssembly(byte[] assemblyData, string authorizationKey);
        static /*0x28772d8*/ System.Reflection.Assembly LoadAndVerifyAssembly(byte[] assemblyData);
        static /*0x28772e0*/ bool PrefetchSocketPolicy(string ip, int atPort);
        static /*0x28772e8*/ bool PrefetchSocketPolicy(string ip, int atPort, int timeout);
        /*0x28772f0*/ Security();
    }

    class Types
    {
        static /*0x28772f8*/ System.Type GetType(string typeName, string assemblyName);
    }

    class PropertyAttribute : System.Attribute
    {
        /*0x10*/ int <order>k__BackingField;

        /*0x2877310*/ PropertyAttribute();
        /*0x2877300*/ int get_order();
        /*0x2877308*/ void set_order(int value);
    }

    class ContextMenuItemAttribute : UnityEngine.PropertyAttribute
    {
        /*0x18*/ string name;
        /*0x20*/ string function;

        /*0x2877318*/ ContextMenuItemAttribute(string name, string function);
    }

    class InspectorNameAttribute : UnityEngine.PropertyAttribute
    {
        /*0x18*/ string displayName;

        /*0x2877344*/ InspectorNameAttribute(string displayName);
    }

    class TooltipAttribute : UnityEngine.PropertyAttribute
    {
        /*0x18*/ string tooltip;

        /*0x287736c*/ TooltipAttribute(string tooltip);
    }

    class SpaceAttribute : UnityEngine.PropertyAttribute
    {
        /*0x14*/ float height;

        /*0x2877394*/ SpaceAttribute();
        /*0x28773b4*/ SpaceAttribute(float height);
    }

    class HeaderAttribute : UnityEngine.PropertyAttribute
    {
        /*0x18*/ string header;

        /*0x28773dc*/ HeaderAttribute(string header);
    }

    class RangeAttribute : UnityEngine.PropertyAttribute
    {
        /*0x14*/ float min;
        /*0x18*/ float max;

        /*0x2877404*/ RangeAttribute(float min, float max);
    }

    class MinAttribute : UnityEngine.PropertyAttribute
    {
        /*0x14*/ float min;

        /*0x2877430*/ MinAttribute(float min);
    }

    class MultilineAttribute : UnityEngine.PropertyAttribute
    {
        /*0x14*/ int lines;

        /*0x2877458*/ MultilineAttribute();
        /*0x2877478*/ MultilineAttribute(int lines);
    }

    class TextAreaAttribute : UnityEngine.PropertyAttribute
    {
        /*0x14*/ int minLines;
        /*0x18*/ int maxLines;

        /*0x28774a0*/ TextAreaAttribute();
        /*0x28774c0*/ TextAreaAttribute(int minLines, int maxLines);
    }

    class ColorUsageAttribute : UnityEngine.PropertyAttribute
    {
        /*0x14*/ bool showAlpha;
        /*0x15*/ bool hdr;
        /*0x18*/ float minBrightness;
        /*0x1c*/ float maxBrightness;
        /*0x20*/ float minExposureValue;
        /*0x24*/ float maxExposureValue;

        /*0x28774ec*/ ColorUsageAttribute(bool showAlpha);
        /*0x2877528*/ ColorUsageAttribute(bool showAlpha, bool hdr);
        /*0x287756c*/ ColorUsageAttribute(bool showAlpha, bool hdr, float minBrightness, float maxBrightness, float minExposureValue, float maxExposureValue);
    }

    class GradientUsageAttribute : UnityEngine.PropertyAttribute
    {
        /*0x14*/ bool hdr;
        /*0x18*/ UnityEngine.ColorSpace colorSpace;

        /*0x28775d8*/ GradientUsageAttribute(bool hdr);
        /*0x287760c*/ GradientUsageAttribute(bool hdr, UnityEngine.ColorSpace colorSpace);
    }

    class DelayedAttribute : UnityEngine.PropertyAttribute
    {
        /*0x2877644*/ DelayedAttribute();
    }

    class NonReorderableAttribute : UnityEngine.PropertyAttribute
    {
        /*0x287764c*/ NonReorderableAttribute();
    }

    class Time
    {
        static /*0x2877654*/ float get_time();
        static /*0x287767c*/ double get_timeAsDouble();
        static /*0x28776a4*/ float get_timeSinceLevelLoad();
        static /*0x28776cc*/ double get_timeSinceLevelLoadAsDouble();
        static /*0x28776f4*/ float get_deltaTime();
        static /*0x287771c*/ float get_fixedTime();
        static /*0x2877744*/ double get_fixedTimeAsDouble();
        static /*0x287776c*/ float get_unscaledTime();
        static /*0x2877794*/ double get_unscaledTimeAsDouble();
        static /*0x28777bc*/ float get_fixedUnscaledTime();
        static /*0x28777e4*/ double get_fixedUnscaledTimeAsDouble();
        static /*0x287780c*/ float get_unscaledDeltaTime();
        static /*0x2877834*/ float get_fixedUnscaledDeltaTime();
        static /*0x287785c*/ float get_fixedDeltaTime();
        static /*0x2877884*/ void set_fixedDeltaTime(float value);
        static /*0x28778bc*/ float get_maximumDeltaTime();
        static /*0x28778e4*/ void set_maximumDeltaTime(float value);
        static /*0x287791c*/ float get_smoothDeltaTime();
        static /*0x2877944*/ float get_maximumParticleDeltaTime();
        static /*0x287796c*/ void set_maximumParticleDeltaTime(float value);
        static /*0x28779a4*/ float get_timeScale();
        static /*0x28779cc*/ void set_timeScale(float value);
        static /*0x2877a04*/ int get_frameCount();
        static /*0x2877a2c*/ int get_renderedFrameCount();
        static /*0x2877a54*/ float get_realtimeSinceStartup();
        static /*0x2877a7c*/ double get_realtimeSinceStartupAsDouble();
        static /*0x2877aa4*/ float get_captureDeltaTime();
        static /*0x2877acc*/ void set_captureDeltaTime(float value);
        static /*0x2877b04*/ int get_captureFramerate();
        static /*0x2877c08*/ void set_captureFramerate(int value);
        static /*0x2877c54*/ bool get_inFixedTimeStep();
        /*0x2877c7c*/ Time();
    }

    class SystemClock
    {
        static /*0x0*/ System.DateTime s_Epoch;

        static /*0x2877ed4*/ SystemClock();
        static /*0x2877c84*/ System.DateTime get_now();
        static /*0x2877cd4*/ long ToUnixTimeMilliseconds(System.DateTime date);
        static /*0x2877dd0*/ long ToUnixTimeSeconds(System.DateTime date);
        /*0x2877ecc*/ SystemClock();
    }

    struct TouchScreenKeyboard_InternalConstructorHelperArguments
    {
        /*0x10*/ uint keyboardType;
        /*0x14*/ uint autocorrection;
        /*0x18*/ uint multiline;
        /*0x1c*/ uint secure;
        /*0x20*/ uint alert;
        /*0x24*/ int characterLimit;
    }

    class TouchScreenKeyboard
    {
        static /*0x0*/ bool <disableInPlaceEditing>k__BackingField;
        /*0x10*/ nint m_Ptr;

        static /*0x2877f50*/ void Internal_Destroy(nint ptr);
        static /*0x2878248*/ nint TouchScreenKeyboard_InternalConstructorHelper(ref UnityEngine.TouchScreenKeyboard_InternalConstructorHelperArguments arguments, string text, string textPlaceholder);
        static /*0x287829c*/ bool get_isSupported();
        static /*0x28782f4*/ bool get_disableInPlaceEditing();
        static /*0x287833c*/ void set_disableInPlaceEditing(bool value);
        static /*0x2878388*/ bool get_isInPlaceEditingAllowed();
        static /*0x28783f4*/ bool IsInPlaceEditingAllowed();
        static /*0x287841c*/ bool get_isRequiredToForceOpen();
        static /*0x2878444*/ bool IsRequiredToForceOpen();
        static /*0x287846c*/ UnityEngine.TouchScreenKeyboard Open(string text, UnityEngine.TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit);
        static /*0x287852c*/ UnityEngine.TouchScreenKeyboard Open(string text, UnityEngine.TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder);
        static /*0x2878558*/ UnityEngine.TouchScreenKeyboard Open(string text, UnityEngine.TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert);
        static /*0x28785f0*/ UnityEngine.TouchScreenKeyboard Open(string text, UnityEngine.TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure);
        static /*0x287867c*/ UnityEngine.TouchScreenKeyboard Open(string text, UnityEngine.TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline);
        static /*0x2878704*/ UnityEngine.TouchScreenKeyboard Open(string text, UnityEngine.TouchScreenKeyboardType keyboardType, bool autocorrection);
        static /*0x2878780*/ UnityEngine.TouchScreenKeyboard Open(string text, UnityEngine.TouchScreenKeyboardType keyboardType);
        static /*0x28787f8*/ UnityEngine.TouchScreenKeyboard Open(string text);
        static /*0x28788e4*/ bool get_hideInput();
        static /*0x287890c*/ void set_hideInput(bool value);
        static /*0x28789c8*/ bool GetDone(nint ptr);
        static /*0x2878a40*/ bool GetWasCanceled(nint ptr);
        static /*0x2878c3c*/ void GetSelection(ref int start, ref int length);
        static /*0x2878d78*/ void SetSelection(int start, int length);
        static /*0x2878e04*/ UnityEngine.Rect get_area();
        static /*0x2878e88*/ bool get_visible();
        static /*0x2878e4c*/ void get_area_Injected(ref UnityEngine.Rect ret);
        /*0x28780ec*/ TouchScreenKeyboard(string text, UnityEngine.TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit);
        /*0x2877f8c*/ void Destroy();
        /*0x2878058*/ void Finalize();
        /*0x2878864*/ string get_text();
        /*0x28788a0*/ void set_text(string value);
        /*0x2878948*/ bool get_active();
        /*0x2878984*/ void set_active(bool value);
        /*0x2878a04*/ bool get_done();
        /*0x2878a7c*/ bool get_wasCanceled();
        /*0x2878ab8*/ UnityEngine.TouchScreenKeyboard.Status get_status();
        /*0x2878af4*/ int get_characterLimit();
        /*0x2878b30*/ void set_characterLimit(int value);
        /*0x2878b74*/ bool get_canGetSelection();
        /*0x2878bb0*/ bool get_canSetSelection();
        /*0x2878bec*/ UnityEngine.RangeInt get_selection();
        /*0x2878c80*/ void set_selection(UnityEngine.RangeInt value);
        /*0x2878dbc*/ UnityEngine.TouchScreenKeyboardType get_type();
        /*0x2878df8*/ int get_targetDisplay();
        /*0x2878e00*/ void set_targetDisplay(int value);

        enum Status
        {
            Visible = 0,
            Done = 1,
            Canceled = 2,
            LostFocus = 3,
        }
    }

    enum TouchScreenKeyboardType
    {
        Default = 0,
        ASCIICapable = 1,
        NumbersAndPunctuation = 2,
        URL = 3,
        NumberPad = 4,
        PhonePad = 5,
        NamePhonePad = 6,
        EmailAddress = 7,
        NintendoNetworkAccount = 8,
        Social = 9,
        Search = 10,
        DecimalPad = 11,
        OneTimeCode = 12,
    }

    enum FullScreenMovieControlMode
    {
        Full = 0,
        Minimal = 1,
        CancelOnInput = 2,
        Hidden = 3,
    }

    enum FullScreenMovieScalingMode
    {
        None = 0,
        AspectFit = 1,
        AspectFill = 2,
        Fill = 3,
    }

    enum AndroidActivityIndicatorStyle
    {
        DontShow = -1,
        Large = 0,
        InversedLarge = 1,
        Small = 2,
        InversedSmall = 3,
    }

    class Handheld
    {
        static /*0x2878eb0*/ bool PlayFullScreenMovie(string path, UnityEngine.Color bgColor, UnityEngine.FullScreenMovieControlMode controlMode, UnityEngine.FullScreenMovieScalingMode scalingMode);
        static /*0x2878f24*/ bool PlayFullScreenMovie(string path, UnityEngine.Color bgColor, UnityEngine.FullScreenMovieControlMode controlMode);
        static /*0x2878f2c*/ bool PlayFullScreenMovie(string path, UnityEngine.Color bgColor);
        static /*0x2878f38*/ bool PlayFullScreenMovie(string path);
        static /*0x2878eb4*/ bool PlayFullScreenMovie_Bindings(string path, UnityEngine.Color bgColor, UnityEngine.FullScreenMovieControlMode controlMode, UnityEngine.FullScreenMovieScalingMode scalingMode);
        static /*0x2878fb0*/ void Vibrate();
        static /*0x2878fd8*/ bool get_use32BitDisplayBuffer();
        static /*0x2879028*/ void set_use32BitDisplayBuffer(bool value);
        static /*0x2879000*/ bool GetUse32BitDisplayBuffer_Bindings();
        static /*0x287902c*/ void SetActivityIndicatorStyleImpl_Bindings(int style);
        static /*0x2879068*/ void SetActivityIndicatorStyle(UnityEngine.AndroidActivityIndicatorStyle style);
        static /*0x28790a4*/ int GetActivityIndicatorStyle();
        static /*0x28790cc*/ void StartActivityIndicator();
        static /*0x28790f4*/ void StopActivityIndicator();
        static /*0x287911c*/ void ClearShaderCache();
        static /*0x2878f54*/ bool PlayFullScreenMovie_Bindings_Injected(string path, ref UnityEngine.Color bgColor, UnityEngine.FullScreenMovieControlMode controlMode, UnityEngine.FullScreenMovieScalingMode scalingMode);
        /*0x2879144*/ Handheld();
    }

    class BootConfigData
    {
        /*0x10*/ nint m_Ptr;

        static /*0x287932c*/ UnityEngine.BootConfigData WrapBootConfigData(nint nativeHandle);
        /*0x287938c*/ BootConfigData(nint nativeHandle);
        /*0x287914c*/ void AddKey(string key);
        /*0x28791e8*/ string Get(string key);
        /*0x2879284*/ string Get(string key, int index);
        /*0x2879194*/ void Append(string key, string value);
        /*0x28792d8*/ void Set(string key, string value);
        /*0x2879230*/ string GetValue(string key, int index);
    }

    class Behaviour : UnityEngine.Component
    {
        /*0x2860a4c*/ Behaviour();
        /*0x2879450*/ bool get_enabled();
        /*0x287948c*/ void set_enabled(bool value);
        /*0x28794d0*/ bool get_isActiveAndEnabled();
    }

    class ClassLibraryInitializer
    {
        static /*0x287950c*/ void Init();
    }

    class WaitForEndOfFrame : UnityEngine.YieldInstruction
    {
        /*0x2879514*/ WaitForEndOfFrame();
    }

    class SelectionBaseAttribute : System.Attribute
    {
        /*0x2879524*/ SelectionBaseAttribute();
    }

    class YieldInstruction
    {
        /*0x287951c*/ YieldInstruction();
    }

    class WaitForSeconds : UnityEngine.YieldInstruction
    {
        /*0x10*/ float m_Seconds;

        /*0x287952c*/ WaitForSeconds(float seconds);
    }

    class AttributeHelperEngine
    {
        static /*0x0*/ UnityEngine.DisallowMultipleComponent[] _disallowMultipleComponentArray;
        static /*0x8*/ UnityEngine.ExecuteInEditMode[] _executeInEditModeArray;
        static /*0x10*/ UnityEngine.RequireComponent[] _requireComponentArray;

        static /*0x2879d10*/ AttributeHelperEngine();
        static /*0x2879554*/ System.Type GetParentTypeDisallowingMultipleInclusion(System.Type type);
        static /*0x2879654*/ System.Type[] GetRequiredComponents(System.Type klass);
        static /*0x2879a90*/ int GetExecuteMode(System.Type klass);
        static /*0x2879ba4*/ int CheckIsEditorScript(System.Type klass);
        static /*0x2879c84*/ int GetDefaultExecutionOrderFor(System.Type klass);
        static T GetCustomAttributeOfType<T>(System.Type klass);
        /*0x2879d08*/ AttributeHelperEngine();
    }

    enum RuntimeInitializeLoadType
    {
        AfterSceneLoad = 0,
        BeforeSceneLoad = 1,
        AfterAssembliesLoaded = 2,
        BeforeSplashScreen = 3,
        SubsystemRegistration = 4,
    }

    class RuntimeInitializeOnLoadMethodAttribute : UnityEngine.Scripting.PreserveAttribute
    {
        /*0x10*/ UnityEngine.RuntimeInitializeLoadType m_LoadType;

        /*0x2879dd8*/ RuntimeInitializeOnLoadMethodAttribute();
        /*0x2879dfc*/ RuntimeInitializeOnLoadMethodAttribute(UnityEngine.RuntimeInitializeLoadType loadType);
        /*0x2879e24*/ UnityEngine.RuntimeInitializeLoadType get_loadType();
        /*0x2879df4*/ void set_loadType(UnityEngine.RuntimeInitializeLoadType value);
    }

    class GameObject : UnityEngine.Object
    {
        static /*0x2879e2c*/ UnityEngine.GameObject CreatePrimitive(UnityEngine.PrimitiveType type);
        static /*0x287a56c*/ UnityEngine.GameObject FindWithTag(string tag);
        static /*0x287a5a8*/ UnityEngine.GameObject FindGameObjectWithTag(string tag);
        static /*0x287ac88*/ UnityEngine.GameObject[] FindGameObjectsWithTag(string tag);
        static /*0x287af48*/ void Internal_CreateGameObject(UnityEngine.GameObject self, string name);
        static /*0x287b120*/ UnityEngine.GameObject Find(string name);
        /*0x287aeb0*/ GameObject(string name);
        /*0x287af8c*/ GameObject();
        /*0x287b010*/ GameObject(string name, System.Type[] components);
        T GetComponent<T>();
        /*0x2879e68*/ UnityEngine.Component GetComponent(System.Type type);
        /*0x2879eac*/ void GetComponentFastPath(System.Type type, nint oneFurtherThanResultValue);
        /*0x2879f00*/ UnityEngine.Component GetComponentByName(string type);
        /*0x2879f44*/ UnityEngine.Component GetComponent(string type);
        /*0x2879f88*/ UnityEngine.Component GetComponentInChildren(System.Type type, bool includeInactive);
        /*0x2879fdc*/ UnityEngine.Component GetComponentInChildren(System.Type type);
        T GetComponentInChildren<T>();
        T GetComponentInChildren<T>(bool includeInactive);
        /*0x287a024*/ UnityEngine.Component GetComponentInParent(System.Type type, bool includeInactive);
        /*0x287a078*/ UnityEngine.Component GetComponentInParent(System.Type type);
        T GetComponentInParent<T>();
        T GetComponentInParent<T>(bool includeInactive);
        /*0x287a0c0*/ System.Array GetComponentsInternal(System.Type type, bool useSearchTypeAsArrayReturnType, bool recursive, bool includeInactive, bool reverse, object resultList);
        /*0x287a144*/ UnityEngine.Component[] GetComponents(System.Type type);
        T[] GetComponents<T>();
        /*0x287a1ec*/ void GetComponents(System.Type type, System.Collections.Generic.List<UnityEngine.Component> results);
        void GetComponents<T>(System.Collections.Generic.List<T> results);
        /*0x287a250*/ UnityEngine.Component[] GetComponentsInChildren(System.Type type);
        /*0x287a258*/ UnityEngine.Component[] GetComponentsInChildren(System.Type type, bool includeInactive);
        T[] GetComponentsInChildren<T>(bool includeInactive);
        void GetComponentsInChildren<T>(bool includeInactive, System.Collections.Generic.List<T> results);
        T[] GetComponentsInChildren<T>();
        void GetComponentsInChildren<T>(System.Collections.Generic.List<T> results);
        /*0x287a30c*/ UnityEngine.Component[] GetComponentsInParent(System.Type type);
        /*0x287a314*/ UnityEngine.Component[] GetComponentsInParent(System.Type type, bool includeInactive);
        void GetComponentsInParent<T>(bool includeInactive, System.Collections.Generic.List<T> results);
        T[] GetComponentsInParent<T>(bool includeInactive);
        T[] GetComponentsInParent<T>();
        bool TryGetComponent<T>(ref T component);
        /*0x287a3c8*/ bool TryGetComponent(System.Type type, ref UnityEngine.Component component);
        /*0x287a464*/ UnityEngine.Component TryGetComponentInternal(System.Type type);
        /*0x287a518*/ void TryGetComponentFastPath(System.Type type, nint oneFurtherThanResultValue);
        /*0x287a5e4*/ void SendMessageUpwards(string methodName, UnityEngine.SendMessageOptions options);
        /*0x287a698*/ void SendMessage(string methodName, UnityEngine.SendMessageOptions options);
        /*0x287a74c*/ void BroadcastMessage(string methodName, UnityEngine.SendMessageOptions options);
        /*0x287a800*/ UnityEngine.Component AddComponentInternal(string className);
        /*0x287a844*/ UnityEngine.Component Internal_AddComponentWithType(System.Type componentType);
        /*0x287a888*/ UnityEngine.Component AddComponent(System.Type componentType);
        T AddComponent<T>();
        /*0x287a8cc*/ UnityEngine.Transform get_transform();
        /*0x287a908*/ int get_layer();
        /*0x287a944*/ void set_layer(int value);
        /*0x287a988*/ bool get_active();
        /*0x287a9c4*/ void set_active(bool value);
        /*0x287aa08*/ void SetActive(bool value);
        /*0x287aa4c*/ bool get_activeSelf();
        /*0x287aa88*/ bool get_activeInHierarchy();
        /*0x287aac4*/ void SetActiveRecursively(bool state);
        /*0x287ab08*/ bool get_isStatic();
        /*0x287ab44*/ void set_isStatic(bool value);
        /*0x287ab88*/ bool get_isStaticBatchable();
        /*0x287abc4*/ string get_tag();
        /*0x287ac00*/ void set_tag(string value);
        /*0x287ac44*/ bool CompareTag(string tag);
        /*0x287a63c*/ void SendMessageUpwards(string methodName, object value, UnityEngine.SendMessageOptions options);
        /*0x287acc4*/ void SendMessageUpwards(string methodName, object value);
        /*0x287ad1c*/ void SendMessageUpwards(string methodName);
        /*0x287a6f0*/ void SendMessage(string methodName, object value, UnityEngine.SendMessageOptions options);
        /*0x287ad68*/ void SendMessage(string methodName, object value);
        /*0x287adc0*/ void SendMessage(string methodName);
        /*0x287a7a4*/ void BroadcastMessage(string methodName, object parameter, UnityEngine.SendMessageOptions options);
        /*0x287ae0c*/ void BroadcastMessage(string methodName, object parameter);
        /*0x287ae64*/ void BroadcastMessage(string methodName);
        /*0x287b15c*/ UnityEngine.SceneManagement.Scene get_scene();
        /*0x287b1ec*/ ulong get_sceneCullingMask();
        /*0x287b228*/ UnityEngine.GameObject get_gameObject();
        /*0x287b1a8*/ void get_scene_Injected(ref UnityEngine.SceneManagement.Scene ret);
    }

    struct RangeInt
    {
        /*0x10*/ int start;
        /*0x14*/ int length;

        /*0x287b238*/ RangeInt(int start, int length);
        /*0x287b22c*/ int get_end();
    }

    class WaitUntil : UnityEngine.CustomYieldInstruction
    {
        /*0x10*/ System.Func<bool> m_Predicate;

        /*0x287b270*/ WaitUntil(System.Func<bool> predicate);
        /*0x287b240*/ bool get_keepWaiting();
    }

    enum HideFlags
    {
        None = 0,
        HideInHierarchy = 1,
        HideInInspector = 2,
        DontSaveInEditor = 4,
        NotEditable = 8,
        DontSaveInBuild = 16,
        DontUnloadUnusedAsset = 32,
        DontSave = 52,
        HideAndDontSave = 61,
    }

    enum FindObjectsSortMode
    {
        None = 0,
        InstanceID = 1,
    }

    enum FindObjectsInactive
    {
        Exclude = 0,
        Include = 1,
    }

    class Object
    {
        static string objectIsNullMessage = "The Object you want to instantiate is null.";
        static string cloneDestroyedMessage = "Instantiate failed because the clone was destroyed during creation. This can happen if DestroyImmediate is called in MonoBehaviour.Awake.";
        static /*0x0*/ int OffsetOfInstanceIDInCPlusPlusObject;
        /*0x10*/ nint m_CachedPtr;

        static /*0x287cd6c*/ Object();
        static /*0x287b604*/ bool op_Implicit(UnityEngine.Object exists);
        static /*0x287b564*/ bool CompareBaseObjects(UnityEngine.Object lhs, UnityEngine.Object rhs);
        static /*0x287b668*/ bool IsNativeObjectAlive(UnityEngine.Object o);
        static /*0x287b92c*/ UnityEngine.Object Instantiate(UnityEngine.Object original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
        static /*0x287bc48*/ UnityEngine.Object Instantiate(UnityEngine.Object original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parent);
        static /*0x287be98*/ UnityEngine.Object Instantiate(UnityEngine.Object original);
        static /*0x287bfc8*/ UnityEngine.Object Instantiate(UnityEngine.Object original, UnityEngine.Transform parent);
        static /*0x287c030*/ UnityEngine.Object Instantiate(UnityEngine.Object original, UnityEngine.Transform parent, bool instantiateInWorldSpace);
        static T Instantiate<T>(T original);
        static T Instantiate<T>(T original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
        static T Instantiate<T>(T original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parent);
        static T Instantiate<T>(T original, UnityEngine.Transform parent);
        static T Instantiate<T>(T original, UnityEngine.Transform parent, bool worldPositionStays);
        static /*0x287c1d0*/ void Destroy(UnityEngine.Object obj, float t);
        static /*0x287c21c*/ void Destroy(UnityEngine.Object obj);
        static /*0x287c294*/ void DestroyImmediate(UnityEngine.Object obj, bool allowDestroyingAssets);
        static /*0x287c2d8*/ void DestroyImmediate(UnityEngine.Object obj);
        static /*0x287c350*/ UnityEngine.Object[] FindObjectsOfType(System.Type type);
        static /*0x287c3c8*/ UnityEngine.Object[] FindObjectsOfType(System.Type type, bool includeInactive);
        static /*0x287c40c*/ UnityEngine.Object[] FindObjectsByType(System.Type type, UnityEngine.FindObjectsSortMode sortMode);
        static /*0x287c494*/ UnityEngine.Object[] FindObjectsByType(System.Type type, UnityEngine.FindObjectsInactive findObjectsInactive, UnityEngine.FindObjectsSortMode sortMode);
        static /*0x287c4e8*/ void DontDestroyOnLoad(UnityEngine.Object target);
        static /*0x287c5a4*/ void DestroyObject(UnityEngine.Object obj, float t);
        static /*0x287c628*/ void DestroyObject(UnityEngine.Object obj);
        static /*0x287c6a0*/ UnityEngine.Object[] FindSceneObjectsOfType(System.Type type);
        static /*0x287c6f4*/ UnityEngine.Object[] FindObjectsOfTypeIncludingAssets(System.Type type);
        static T[] FindObjectsOfType<T>();
        static T[] FindObjectsByType<T>(UnityEngine.FindObjectsSortMode sortMode);
        static T[] FindObjectsOfType<T>(bool includeInactive);
        static T[] FindObjectsByType<T>(UnityEngine.FindObjectsInactive findObjectsInactive, UnityEngine.FindObjectsSortMode sortMode);
        static T FindObjectOfType<T>();
        static T FindObjectOfType<T>(bool includeInactive);
        static T FindFirstObjectByType<T>();
        static T FindAnyObjectByType<T>();
        static T FindFirstObjectByType<T>(UnityEngine.FindObjectsInactive findObjectsInactive);
        static T FindAnyObjectByType<T>(UnityEngine.FindObjectsInactive findObjectsInactive);
        static /*0x287c730*/ UnityEngine.Object[] FindObjectsOfTypeAll(System.Type type);
        static /*0x287bae4*/ void CheckNullArgument(object arg, string message);
        static /*0x287c738*/ UnityEngine.Object FindObjectOfType(System.Type type);
        static /*0x287c7d0*/ UnityEngine.Object FindFirstObjectByType(System.Type type);
        static /*0x287c874*/ UnityEngine.Object FindAnyObjectByType(System.Type type);
        static /*0x287c918*/ UnityEngine.Object FindObjectOfType(System.Type type, bool includeInactive);
        static /*0x287c9bc*/ UnityEngine.Object FindFirstObjectByType(System.Type type, UnityEngine.FindObjectsInactive findObjectsInactive);
        static /*0x287ca6c*/ UnityEngine.Object FindAnyObjectByType(System.Type type, UnityEngine.FindObjectsInactive findObjectsInactive);
        static /*0x287b500*/ bool op_Equality(UnityEngine.Object x, UnityEngine.Object y);
        static /*0x287a4a8*/ bool op_Inequality(UnityEngine.Object x, UnityEngine.Object y);
        static /*0x287b3d4*/ int GetOffsetOfInstanceIDInCPlusPlusObject();
        static /*0x287b784*/ bool CurrentThreadIsMainThread();
        static /*0x287bf8c*/ UnityEngine.Object Internal_CloneSingle(UnityEngine.Object data);
        static /*0x287c17c*/ UnityEngine.Object Internal_CloneSingleWithParent(UnityEngine.Object data, UnityEngine.Transform parent, bool worldPositionStays);
        static /*0x287bb38*/ UnityEngine.Object Internal_InstantiateSingle(UnityEngine.Object data, UnityEngine.Vector3 pos, UnityEngine.Quaternion rot);
        static /*0x287bdf0*/ UnityEngine.Object Internal_InstantiateSingleWithParent(UnityEngine.Object data, UnityEngine.Transform parent, UnityEngine.Vector3 pos, UnityEngine.Quaternion rot);
        static /*0x287cb90*/ string ToString(UnityEngine.Object obj);
        static /*0x287b828*/ string GetName(UnityEngine.Object obj);
        static /*0x287cc7c*/ bool IsPersistent(UnityEngine.Object obj);
        static /*0x287b8e8*/ void SetName(UnityEngine.Object obj, string name);
        static /*0x287ccb8*/ bool DoesObjectWithInstanceIDExist(int instanceID);
        static /*0x287ccf4*/ UnityEngine.Object FindObjectFromInstanceID(int instanceID);
        static /*0x287cd30*/ UnityEngine.Object ForceLoadFromInstanceID(int instanceID);
        static /*0x287cbcc*/ UnityEngine.Object Internal_InstantiateSingle_Injected(UnityEngine.Object data, ref UnityEngine.Vector3 pos, ref UnityEngine.Quaternion rot);
        static /*0x287cc20*/ UnityEngine.Object Internal_InstantiateSingleWithParent_Injected(UnityEngine.Object data, UnityEngine.Transform parent, ref UnityEngine.Vector3 pos, ref UnityEngine.Quaternion rot);
        /*0x287af40*/ Object();
        /*0x287b2a0*/ int GetInstanceID();
        /*0x287b3fc*/ int GetHashCode();
        /*0x287b404*/ bool Equals(object other);
        /*0x287b6c4*/ void EnsureRunningOnMainThread();
        /*0x287b7ac*/ nint GetCachedPtr();
        /*0x287b7b4*/ string get_name();
        /*0x287b864*/ void set_name(string value);
        /*0x287c524*/ UnityEngine.HideFlags get_hideFlags();
        /*0x287c560*/ void set_hideFlags(UnityEngine.HideFlags value);
        /*0x287cb1c*/ string ToString();
    }

    class AsyncOperation : UnityEngine.YieldInstruction
    {
        /*0x10*/ nint m_Ptr;
        /*0x18*/ System.Action<UnityEngine.AsyncOperation> m_completeCallback;

        static /*0x287ce74*/ void InternalDestroy(nint ptr);
        /*0x287d1fc*/ AsyncOperation();
        /*0x287cdb8*/ void Finalize();
        /*0x287ceb0*/ void InvokeCompletionEvent();
        /*0x287cee0*/ void add_completed(System.Action<UnityEngine.AsyncOperation> value);
        /*0x287d018*/ void remove_completed(System.Action<UnityEngine.AsyncOperation> value);
        /*0x287cfdc*/ bool get_isDone();
        /*0x287d0c0*/ float get_progress();
        /*0x287d0fc*/ int get_priority();
        /*0x287d138*/ void set_priority(int value);
        /*0x287d17c*/ bool get_allowSceneActivation();
        /*0x287d1b8*/ void set_allowSceneActivation(bool value);
    }

    class EnumInfo
    {
        /*0x10*/ string[] names;
        /*0x18*/ int[] values;
        /*0x20*/ string[] annotations;
        /*0x28*/ bool isFlags;

        static /*0x287d204*/ UnityEngine.EnumInfo CreateEnumInfoFromNativeEnum(string[] names, int[] values, string[] annotations, bool isFlags);
        /*0x287d290*/ EnumInfo();
    }

    class ScriptingRuntime
    {
        static /*0x287d298*/ string[] GetAllUserAssemblies();
        /*0x287d2c0*/ ScriptingRuntime();
    }

    class SetupCoroutine
    {
        static /*0x287d2c8*/ void InvokeMoveNext(System.Collections.IEnumerator enumerator, nint returnValueAddress);
        static /*0x287d41c*/ object InvokeMember(object behaviour, string name, object variable);
        static /*0x287d510*/ object InvokeStatic(System.Type klass, string name, object variable);
        /*0x287d5f4*/ SetupCoroutine();
    }

    struct LayerMask
    {
        /*0x10*/ int m_Mask;

        static /*0x287d5fc*/ int op_Implicit(UnityEngine.LayerMask mask);
        static /*0x287d600*/ UnityEngine.LayerMask op_Implicit(int intVal);
        static /*0x287d618*/ string LayerToName(int layer);
        static /*0x287d654*/ int NameToLayer(string layerName);
        static /*0x287d690*/ int GetMask(string[] layerNames);
        /*0x287d608*/ int get_value();
        /*0x287d610*/ void set_value(int value);
    }

    struct CastHelper<T>
    {
        /*0x0*/ T t;
        /*0x0*/ nint onePointerFurtherThanT;
    }

    class TextAsset : UnityEngine.Object
    {
        static /*0x287d818*/ void Internal_CreateInstance(UnityEngine.TextAsset self, string text);
        static /*0x287d914*/ string DecodeString(byte[] bytes);
        /*0x287dbd8*/ TextAsset();
        /*0x287dc90*/ TextAsset(string text);
        /*0x287dbe4*/ TextAsset(UnityEngine.TextAsset.CreateOptions options, string text);
        /*0x287d798*/ byte[] get_bytes();
        /*0x287d7d4*/ byte[] GetPreviewBytes(int maxByteCount);
        /*0x287d85c*/ nint GetDataPtr();
        /*0x287d898*/ long GetDataSize();
        /*0x287d8d4*/ string get_text();
        /*0x287db98*/ long get_dataSize();
        /*0x287dbd4*/ string ToString();
        Unity.Collections.NativeArray<T> GetData<T>();
        /*0x287dc9c*/ string GetPreview(int maxChars);

        enum CreateOptions
        {
            None = 0,
            CreateNativeObject = 1,
        }

        class EncodingUtility
        {
            static /*0x0*/ System.Collections.Generic.KeyValuePair<System.Byte[], System.Text.Encoding> encodingLookup;
            static /*0x8*/ System.Text.Encoding targetEncoding;

            static /*0x287dce4*/ EncodingUtility();
        }
    }

    class TrackedReference
    {
        /*0x10*/ nint m_Ptr;

        static /*0x287e064*/ bool op_Equality(UnityEngine.TrackedReference x, UnityEngine.TrackedReference y);
        static /*0x287e0f8*/ bool op_Inequality(UnityEngine.TrackedReference x, UnityEngine.TrackedReference y);
        static /*0x287e19c*/ bool op_Implicit(UnityEngine.TrackedReference exists);
        /*0x287e05c*/ TrackedReference();
        /*0x287e110*/ bool Equals(object o);
        /*0x287e190*/ int GetHashCode();
    }

    class ScriptableObject : UnityEngine.Object
    {
        static /*0x287e2b0*/ UnityEngine.ScriptableObject CreateInstance(string className);
        static /*0x287e328*/ UnityEngine.ScriptableObject CreateInstance(System.Type type);
        static T CreateInstance<T>();
        static /*0x287e3ac*/ UnityEngine.ScriptableObject CreateInstance(System.Type type, System.Action<UnityEngine.ScriptableObject> initialize);
        static /*0x287e238*/ void CreateScriptableObject(UnityEngine.ScriptableObject self);
        static /*0x287e2ec*/ UnityEngine.ScriptableObject CreateScriptableObjectInstanceFromName(string className);
        static /*0x287e368*/ UnityEngine.ScriptableObject CreateScriptableObjectInstanceFromType(System.Type type, bool applyDefaultsAndReset);
        static /*0x287e5a0*/ void ResetAndApplyDefaultInstances(UnityEngine.Object obj);
        /*0x287e1b8*/ ScriptableObject();
        /*0x287e274*/ void SetDirty();
    }

    class StackTraceUtility
    {
        static /*0x0*/ string projectFolder;

        static /*0x287f2fc*/ StackTraceUtility();
        static /*0x287e5dc*/ void SetProjectFolder(string folder);
        static /*0x287e6b8*/ string ExtractStackTrace();
        static /*0x287eef0*/ string ExtractStringFromException(object exception);
        static /*0x287ef7c*/ void ExtractStringFromExceptionInternal(object exceptiono, ref string message, ref string stackTrace);
        static /*0x287e81c*/ string ExtractFormattedStackTrace(System.Diagnostics.StackTrace stackTrace);
    }

    class UnityException : System.Exception
    {
        static int Result = -2147467261;
        /*0x90*/ string unityStackTrace;

        /*0x287f35c*/ UnityException();
        /*0x287bbd0*/ UnityException(string message);
        /*0x287f3dc*/ UnityException(string message, System.Exception innerException);
        /*0x287f45c*/ UnityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class MissingComponentException : System.Exception
    {
        static int Result = -2147467261;
        /*0x90*/ string unityStackTrace;

        /*0x287f4dc*/ MissingComponentException();
        /*0x287f55c*/ MissingComponentException(string message);
        /*0x287f5d4*/ MissingComponentException(string message, System.Exception innerException);
        /*0x287f654*/ MissingComponentException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class UnassignedReferenceException : System.Exception
    {
        static int Result = -2147467261;
        /*0x90*/ string unityStackTrace;

        /*0x287f6d4*/ UnassignedReferenceException();
        /*0x287f754*/ UnassignedReferenceException(string message);
        /*0x287f7cc*/ UnassignedReferenceException(string message, System.Exception innerException);
        /*0x287f84c*/ UnassignedReferenceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class MissingReferenceException : System.Exception
    {
        static int Result = -2147467261;
        /*0x90*/ string unityStackTrace;

        /*0x287f8cc*/ MissingReferenceException();
        /*0x287f94c*/ MissingReferenceException(string message);
        /*0x287f9c4*/ MissingReferenceException(string message, System.Exception innerException);
        /*0x287fa44*/ MissingReferenceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class DisallowMultipleComponent : System.Attribute
    {
        /*0x287fac4*/ DisallowMultipleComponent();
    }

    class RequireComponent : System.Attribute
    {
        /*0x10*/ System.Type m_Type0;
        /*0x18*/ System.Type m_Type1;
        /*0x20*/ System.Type m_Type2;

        /*0x287facc*/ RequireComponent(System.Type requiredComponent);
        /*0x287faf4*/ RequireComponent(System.Type requiredComponent, System.Type requiredComponent2);
        /*0x287fb20*/ RequireComponent(System.Type requiredComponent, System.Type requiredComponent2, System.Type requiredComponent3);
    }

    class AddComponentMenu : System.Attribute
    {
        /*0x10*/ string m_AddComponentMenu;
        /*0x18*/ int m_Ordering;

        /*0x287fb5c*/ AddComponentMenu(string menuName);
        /*0x287fb88*/ AddComponentMenu(string menuName, int order);
        /*0x287fbb8*/ string get_componentMenu();
        /*0x287fbc0*/ int get_componentOrder();
    }

    class CreateAssetMenuAttribute : System.Attribute
    {
        /*0x10*/ string <menuName>k__BackingField;
        /*0x18*/ string <fileName>k__BackingField;
        /*0x20*/ int <order>k__BackingField;

        /*0x287fbf8*/ CreateAssetMenuAttribute();
        /*0x287fbc8*/ string get_menuName();
        /*0x287fbd0*/ void set_menuName(string value);
        /*0x287fbd8*/ string get_fileName();
        /*0x287fbe0*/ void set_fileName(string value);
        /*0x287fbe8*/ int get_order();
        /*0x287fbf0*/ void set_order(int value);
    }

    class ContextMenu : System.Attribute
    {
        /*0x10*/ string menuItem;
        /*0x18*/ bool validate;
        /*0x1c*/ int priority;

        /*0x287fc00*/ ContextMenu(string itemName);
        /*0x287fc38*/ ContextMenu(string itemName, bool isValidateFunction);
        /*0x287fc74*/ ContextMenu(string itemName, bool isValidateFunction, int priority);
    }

    class ExecuteInEditMode : System.Attribute
    {
        /*0x287fcb4*/ ExecuteInEditMode();
    }

    class ExecuteAlways : System.Attribute
    {
        /*0x287fcbc*/ ExecuteAlways();
    }

    class HideInInspector : System.Attribute
    {
        /*0x287fcc4*/ HideInInspector();
    }

    class HelpURLAttribute : System.Attribute
    {
        /*0x10*/ string m_Url;
        /*0x18*/ bool m_Dispatcher;
        /*0x20*/ string m_DispatchingFieldName;

        /*0x287fccc*/ HelpURLAttribute(string url);
        /*0x287fd34*/ HelpURLAttribute(string defaultURL, string dispatchingFieldName);
        /*0x287fd7c*/ string get_URL();
    }

    class DefaultExecutionOrder : System.Attribute
    {
        /*0x10*/ int m_Order;

        /*0x287fd84*/ DefaultExecutionOrder(int order);
        /*0x287fdac*/ int get_order();
    }

    class AssemblyIsEditorAssembly : System.Attribute
    {
        /*0x287fdb4*/ AssemblyIsEditorAssembly();
    }

    class ExcludeFromPresetAttribute : System.Attribute
    {
        /*0x287fdbc*/ ExcludeFromPresetAttribute();
    }

    class MonoBehaviour : UnityEngine.Behaviour
    {
        static /*0x2880798*/ void print(object message);
        static /*0x287fe78*/ void Internal_CancelInvokeAll(UnityEngine.MonoBehaviour self);
        static /*0x287fe00*/ bool Internal_IsInvokingAll(UnityEngine.MonoBehaviour self);
        static /*0x287ff0c*/ void InvokeDelayed(UnityEngine.MonoBehaviour self, string methodName, float time, float repeatRate);
        static /*0x2880068*/ void CancelInvoke(UnityEngine.MonoBehaviour self, string methodName);
        static /*0x28800f0*/ bool IsInvoking(UnityEngine.MonoBehaviour self, string methodName);
        static /*0x2880250*/ bool IsObjectMonoBehaviour(UnityEngine.Object obj);
        /*0x288082c*/ MonoBehaviour();
        /*0x287fdc4*/ bool IsInvoking();
        /*0x287fe3c*/ void CancelInvoke();
        /*0x287feb4*/ void Invoke(string methodName, float time);
        /*0x287ff68*/ void InvokeRepeating(string methodName, float time, float repeatRate);
        /*0x2880024*/ void CancelInvoke(string methodName);
        /*0x28800ac*/ bool IsInvoking(string methodName);
        /*0x2880134*/ UnityEngine.Coroutine StartCoroutine(string methodName);
        /*0x288013c*/ UnityEngine.Coroutine StartCoroutine(string methodName, object value);
        /*0x28802e0*/ UnityEngine.Coroutine StartCoroutine(System.Collections.IEnumerator routine);
        /*0x288041c*/ UnityEngine.Coroutine StartCoroutine_Auto(System.Collections.IEnumerator routine);
        /*0x2880420*/ void StopCoroutine(System.Collections.IEnumerator routine);
        /*0x288055c*/ void StopCoroutine(UnityEngine.Coroutine routine);
        /*0x2880698*/ void StopCoroutine(string methodName);
        /*0x28806dc*/ void StopAllCoroutines();
        /*0x2880718*/ bool get_useGUILayout();
        /*0x2880754*/ void set_useGUILayout(bool value);
        /*0x288028c*/ UnityEngine.Coroutine StartCoroutineManaged(string methodName, object value);
        /*0x28803d8*/ UnityEngine.Coroutine StartCoroutineManaged2(System.Collections.IEnumerator enumerator);
        /*0x2880654*/ void StopCoroutineManaged(UnityEngine.Coroutine routine);
        /*0x2880518*/ void StopCoroutineFromEnumeratorManaged(System.Collections.IEnumerator routine);
        /*0x28807f0*/ string GetScriptClassName();
    }

    class UnhandledExceptionHandler
    {
        static /*0x2880834*/ void RegisterUECatcher();
        /*0x288092c*/ UnhandledExceptionHandler();

        class <>c
        {
            static /*0x0*/ UnityEngine.UnhandledExceptionHandler.<> <>9;
            static /*0x8*/ System.UnhandledExceptionEventHandler <>9__0_0;

            static /*0x2880934*/ <>c();
            /*0x2880998*/ <>c();
            /*0x28809a0*/ void <RegisterUECatcher>b__0_0(object sender, System.UnhandledExceptionEventArgs e);
        }
    }

    class WaitWhile : UnityEngine.CustomYieldInstruction
    {
        /*0x10*/ System.Func<bool> m_Predicate;

        /*0x2880a78*/ WaitWhile(System.Func<bool> predicate);
        /*0x2880a54*/ bool get_keepWaiting();
    }

    class ScriptingUtility
    {
        static /*0x2880aa0*/ bool IsManagedCodeWorking();
        /*0x2880aa8*/ ScriptingUtility();

        struct TestClass
        {
            /*0x10*/ int value;
        }
    }

    class WaitForFixedUpdate : UnityEngine.YieldInstruction
    {
        /*0x2880ab0*/ WaitForFixedUpdate();
    }

    class ExcludeFromObjectFactoryAttribute : System.Attribute
    {
        /*0x2880ab8*/ ExcludeFromObjectFactoryAttribute();
    }

    class Coroutine : UnityEngine.YieldInstruction
    {
        /*0x10*/ nint m_Ptr;

        static /*0x2880b84*/ void ReleaseCoroutine(nint ptr);
        /*0x2880ac0*/ Coroutine();
        /*0x2880ac8*/ void Finalize();
    }

    class ExtensionOfNativeClassAttribute : System.Attribute
    {
        /*0x2880bc0*/ ExtensionOfNativeClassAttribute();
    }

    class WaitForSecondsRealtime : UnityEngine.CustomYieldInstruction
    {
        /*0x10*/ float <waitTime>k__BackingField;
        /*0x14*/ float m_WaitUntilTime;

        /*0x2880c40*/ WaitForSecondsRealtime(float time);
        /*0x2880bc8*/ float get_waitTime();
        /*0x2880bd0*/ void set_waitTime(float value);
        /*0x2880bd8*/ bool get_keepWaiting();
        /*0x2880c70*/ void Reset();
    }

    class ManagedStreamHelpers
    {
        static /*0x2880c7c*/ void ValidateLoadFromStream(System.IO.Stream stream);
        static /*0x2880d8c*/ void ManagedStreamRead(byte[] buffer, int offset, int count, System.IO.Stream stream, nint returnValueAddress);
        static /*0x2880eac*/ void ManagedStreamSeek(long offset, uint origin, System.IO.Stream stream, nint returnValueAddress);
        static /*0x2880fc4*/ void ManagedStreamLength(System.IO.Stream stream, nint returnValueAddress);
    }

    class NoAllocHelpers
    {
        static void ResizeList<T>(System.Collections.Generic.List<T> list, int size);
        static void EnsureListElemCount<T>(System.Collections.Generic.List<T> list, int count);
        static /*0x28810c4*/ int SafeLength(System.Array values);
        static int SafeLength<T>(System.Collections.Generic.List<T> values);
        static T[] ExtractArrayFromListT<T>(System.Collections.Generic.List<T> list);
        static /*0x28810d4*/ void Internal_ResizeList(object list, int size);
        static /*0x2881118*/ System.Array ExtractArrayFromList(object list);
        /*0x2881154*/ NoAllocHelpers();
    }

    struct EnumData
    {
        /*0x10*/ System.Enum[] values;
        /*0x18*/ int[] flagValues;
        /*0x20*/ string[] displayNames;
        /*0x28*/ string[] names;
        /*0x30*/ string[] tooltip;
        /*0x38*/ bool flags;
        /*0x40*/ System.Type underlyingType;
        /*0x48*/ bool unsigned;
        /*0x49*/ bool serializable;
    }

    class EnumDataUtility
    {
        static /*0x0*/ System.Collections.Generic.Dictionary<System.Type, UnityEngine.EnumData> s_NonObsoleteEnumData;
        static /*0x8*/ System.Collections.Generic.Dictionary<System.Type, UnityEngine.EnumData> s_EnumData;

        static /*0x2882780*/ EnumDataUtility();
        static /*0x288115c*/ UnityEngine.EnumData GetCachedEnumData(System.Type enumType, bool excludeObsolete, System.Func<string, string> nicifyName);
        static /*0x28820ac*/ int EnumFlagsToInt(UnityEngine.EnumData enumData, System.Enum enumValue);
        static /*0x288223c*/ System.Enum IntToEnumFlags(System.Type enumType, int value);
        static /*0x2881f98*/ bool CheckObsoleteAddition(System.Reflection.FieldInfo field, bool excludeObsolete);
        static /*0x2882420*/ string EnumTooltipFromEnumField(System.Reflection.FieldInfo field);
        static /*0x2882558*/ string EnumNameFromEnumField(System.Reflection.FieldInfo field, System.Func<string, string> nicifyName);
        static /*0x2882728*/ string <EnumNameFromEnumField>g__NicifyName|7_0(ref UnityEngine.EnumDataUtility.<> );

        class <>c__DisplayClass2_0
        {
            /*0x10*/ System.Func<string, string> nicifyName;

            /*0x2881f90*/ <>c__DisplayClass2_0();
            /*0x2882838*/ string <GetCachedEnumData>b__0(System.Reflection.FieldInfo f);
        }

        class <>c
        {
            static /*0x0*/ UnityEngine.EnumDataUtility.<> <>9;
            static /*0x8*/ System.Func<System.Reflection.FieldInfo, int> <>9__2_5;
            static /*0x10*/ System.Func<System.Reflection.FieldInfo, string> <>9__2_1;
            static /*0x18*/ System.Func<System.Reflection.FieldInfo, System.Enum> <>9__2_2;
            static /*0x20*/ System.Func<System.Enum, int> <>9__2_3;
            static /*0x28*/ System.Func<System.Enum, int> <>9__2_4;

            static /*0x28828a0*/ <>c();
            /*0x2882904*/ <>c();
            /*0x288290c*/ int <GetCachedEnumData>b__2_5(System.Reflection.FieldInfo f);
            /*0x2882930*/ string <GetCachedEnumData>b__2_1(System.Reflection.FieldInfo f);
            /*0x2882984*/ System.Enum <GetCachedEnumData>b__2_2(System.Reflection.FieldInfo f);
            /*0x2882a18*/ int <GetCachedEnumData>b__2_3(System.Enum v);
            /*0x2882a74*/ int <GetCachedEnumData>b__2_4(System.Enum v);
        }

        struct <>c__DisplayClass7_0
        {
            /*0x10*/ System.Func<string, string> nicifyName;
            /*0x18*/ System.Reflection.FieldInfo field;
        }
    }

    class Component : UnityEngine.Object
    {
        /*0x28835c8*/ Component();
        /*0x2882ad0*/ UnityEngine.Transform get_transform();
        /*0x2882b0c*/ UnityEngine.GameObject get_gameObject();
        /*0x2882b48*/ UnityEngine.Component GetComponent(System.Type type);
        /*0x2882bc0*/ void GetComponentFastPath(System.Type type, nint oneFurtherThanResultValue);
        T GetComponent<T>();
        /*0x2882c14*/ bool TryGetComponent(System.Type type, ref UnityEngine.Component component);
        bool TryGetComponent<T>(ref T component);
        /*0x2882c74*/ UnityEngine.Component GetComponent(string type);
        /*0x2882cb8*/ UnityEngine.Component GetComponentInChildren(System.Type t, bool includeInactive);
        /*0x2882d40*/ UnityEngine.Component GetComponentInChildren(System.Type t);
        T GetComponentInChildren<T>(bool includeInactive);
        T GetComponentInChildren<T>();
        /*0x2882d48*/ UnityEngine.Component[] GetComponentsInChildren(System.Type t, bool includeInactive);
        /*0x2882da8*/ UnityEngine.Component[] GetComponentsInChildren(System.Type t);
        T[] GetComponentsInChildren<T>(bool includeInactive);
        void GetComponentsInChildren<T>(bool includeInactive, System.Collections.Generic.List<T> result);
        T[] GetComponentsInChildren<T>();
        void GetComponentsInChildren<T>(System.Collections.Generic.List<T> results);
        /*0x2882dfc*/ UnityEngine.Component GetComponentInParent(System.Type t, bool includeInactive);
        /*0x2882e84*/ UnityEngine.Component GetComponentInParent(System.Type t);
        T GetComponentInParent<T>(bool includeInactive);
        T GetComponentInParent<T>();
        /*0x2882f00*/ UnityEngine.Component[] GetComponentsInParent(System.Type t, bool includeInactive);
        /*0x2882f60*/ UnityEngine.Component[] GetComponentsInParent(System.Type t);
        T[] GetComponentsInParent<T>(bool includeInactive);
        void GetComponentsInParent<T>(bool includeInactive, System.Collections.Generic.List<T> results);
        T[] GetComponentsInParent<T>();
        /*0x2882f68*/ UnityEngine.Component[] GetComponents(System.Type type);
        /*0x2882fb8*/ void GetComponentsForListInternal(System.Type searchType, object resultList);
        /*0x288300c*/ void GetComponents(System.Type type, System.Collections.Generic.List<UnityEngine.Component> results);
        void GetComponents<T>(System.Collections.Generic.List<T> results);
        /*0x2883060*/ string get_tag();
        /*0x28830d0*/ void set_tag(string value);
        T[] GetComponents<T>();
        /*0x2883148*/ bool CompareTag(string tag);
        /*0x28831c0*/ void SendMessageUpwards(string methodName, object value, UnityEngine.SendMessageOptions options);
        /*0x288321c*/ void SendMessageUpwards(string methodName, object value);
        /*0x2883274*/ void SendMessageUpwards(string methodName);
        /*0x28832c0*/ void SendMessageUpwards(string methodName, UnityEngine.SendMessageOptions options);
        /*0x2883318*/ void SendMessage(string methodName, object value);
        /*0x28833cc*/ void SendMessage(string methodName);
        /*0x2883370*/ void SendMessage(string methodName, object value, UnityEngine.SendMessageOptions options);
        /*0x2883418*/ void SendMessage(string methodName, UnityEngine.SendMessageOptions options);
        /*0x2883470*/ void BroadcastMessage(string methodName, object parameter, UnityEngine.SendMessageOptions options);
        /*0x28834cc*/ void BroadcastMessage(string methodName, object parameter);
        /*0x2883524*/ void BroadcastMessage(string methodName);
        /*0x2883570*/ void BroadcastMessage(string methodName, UnityEngine.SendMessageOptions options);
    }

    class UnitySynchronizationContext : System.Threading.SynchronizationContext
    {
        static int kAwqInitialCapacity = 20;
        /*0x18*/ System.Collections.Generic.List<UnityEngine.UnitySynchronizationContext.WorkRequest> m_AsyncWorkQueue;
        /*0x20*/ System.Collections.Generic.List<UnityEngine.UnitySynchronizationContext.WorkRequest> m_CurrentFrameWork;
        /*0x28*/ int m_MainThreadID;
        /*0x2c*/ int m_TrackedCount;

        static /*0x2883f28*/ void InitializeSynchronizationContext();
        static /*0x2883fa4*/ void ExecuteTasks();
        static /*0x2884008*/ bool ExecutePendingTasks(long millisecondsTimeout);
        /*0x2883620*/ UnitySynchronizationContext(int mainThreadID);
        /*0x28836d8*/ UnitySynchronizationContext(System.Collections.Generic.List<UnityEngine.UnitySynchronizationContext.WorkRequest> queue, int mainThreadID);
        /*0x2883778*/ void Send(System.Threading.SendOrPostCallback callback, object state);
        /*0x2883a88*/ void OperationStarted();
        /*0x2883a94*/ void OperationCompleted();
        /*0x2883aa0*/ void Post(System.Threading.SendOrPostCallback callback, object state);
        /*0x2883bf0*/ System.Threading.SynchronizationContext CreateCopy();
        /*0x2883c5c*/ void Exec();
        /*0x2883ec8*/ bool HasPendingTasks();

        struct WorkRequest
        {
            /*0x10*/ System.Threading.SendOrPostCallback m_DelagateCallback;
            /*0x18*/ object m_DelagateState;
            /*0x20*/ System.Threading.ManualResetEvent m_WaitHandle;

            /*0x2883a7c*/ WorkRequest(System.Threading.SendOrPostCallback callback, object state, System.Threading.ManualResetEvent waitHandle);
            /*0x2883e1c*/ void Invoke();
        }
    }

    class FailedToLoadScriptObject : UnityEngine.Object
    {
        /*0x28840f8*/ FailedToLoadScriptObject();
    }

    class UnityAPICompatibilityVersionAttribute : System.Attribute
    {
        /*0x10*/ string _version;
        /*0x18*/ string[] _configurationAssembliesHashes;

        /*0x2884150*/ UnityAPICompatibilityVersionAttribute(string version);
        /*0x2884178*/ UnityAPICompatibilityVersionAttribute(string version, bool checkOnlyUnityVersion);
        /*0x28841f4*/ UnityAPICompatibilityVersionAttribute(string version, string[] configurationAssembliesHashes);
        /*0x2884220*/ string get_version();
        /*0x2884228*/ string[] get_configurationAssembliesHashes();
    }

    struct LazyLoadReference<T>
    {
        static int kInstanceID_None = 0;
        /*0x0*/ int m_InstanceID;

        static UnityEngine.LazyLoadReference<T> op_Implicit(T asset);
        static UnityEngine.LazyLoadReference<T> op_Implicit(int instanceID);
        LazyLoadReference(T asset);
        LazyLoadReference(int instanceID);
        bool get_isSet();
        bool get_isBroken();
        T get_asset();
        void set_asset(T value);
        int get_instanceID();
        void set_instanceID(int value);
    }

    class CustomYieldInstruction : System.Collections.IEnumerator
    {
        /*0x287b298*/ CustomYieldInstruction();
        bool get_keepWaiting();
        /*0x2884230*/ object get_Current();
        /*0x2884238*/ bool MoveNext();
        /*0x2884244*/ void Reset();
    }

    class MethodImplOptionsEx
    {
        static short AggressiveInlining = 256;
    }

    struct Vector2 : System.IEquatable<UnityEngine.Vector2>, System.IFormattable
    {
        static float kEpsilon = 0.000009999999747378752;
        static float kEpsilonNormalSqrt = 1.0000000036274937e-15;
        static /*0x0*/ UnityEngine.Vector2 zeroVector;
        static /*0x8*/ UnityEngine.Vector2 oneVector;
        static /*0x10*/ UnityEngine.Vector2 upVector;
        static /*0x18*/ UnityEngine.Vector2 downVector;
        static /*0x20*/ UnityEngine.Vector2 leftVector;
        static /*0x28*/ UnityEngine.Vector2 rightVector;
        static /*0x30*/ UnityEngine.Vector2 positiveInfinityVector;
        static /*0x38*/ UnityEngine.Vector2 negativeInfinityVector;
        /*0x10*/ float x;
        /*0x14*/ float y;

        static /*0x2885204*/ Vector2();
        static /*0x2884330*/ UnityEngine.Vector2 Lerp(UnityEngine.Vector2 a, UnityEngine.Vector2 b, float t);
        static /*0x2884360*/ UnityEngine.Vector2 LerpUnclamped(UnityEngine.Vector2 a, UnityEngine.Vector2 b, float t);
        static /*0x288437c*/ UnityEngine.Vector2 MoveTowards(UnityEngine.Vector2 current, UnityEngine.Vector2 target, float maxDistanceDelta);
        static /*0x2884448*/ UnityEngine.Vector2 Scale(UnityEngine.Vector2 a, UnityEngine.Vector2 b);
        static /*0x288485c*/ UnityEngine.Vector2 Reflect(UnityEngine.Vector2 inDirection, UnityEngine.Vector2 inNormal);
        static /*0x2884884*/ UnityEngine.Vector2 Perpendicular(UnityEngine.Vector2 inDirection);
        static /*0x2884898*/ float Dot(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs);
        static /*0x2884928*/ float Angle(UnityEngine.Vector2 from, UnityEngine.Vector2 to);
        static /*0x2884a1c*/ float SignedAngle(UnityEngine.Vector2 from, UnityEngine.Vector2 to);
        static /*0x2884b28*/ float Distance(UnityEngine.Vector2 a, UnityEngine.Vector2 b);
        static /*0x2884bac*/ UnityEngine.Vector2 ClampMagnitude(UnityEngine.Vector2 vector, float maxLength);
        static /*0x2884c40*/ float SqrMagnitude(UnityEngine.Vector2 a);
        static /*0x2884c64*/ UnityEngine.Vector2 Min(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs);
        static /*0x2884c78*/ UnityEngine.Vector2 Max(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs);
        static /*0x2884c8c*/ UnityEngine.Vector2 SmoothDamp(UnityEngine.Vector2 current, UnityEngine.Vector2 target, ref UnityEngine.Vector2 currentVelocity, float smoothTime, float maxSpeed);
        static /*0x2884e9c*/ UnityEngine.Vector2 SmoothDamp(UnityEngine.Vector2 current, UnityEngine.Vector2 target, ref UnityEngine.Vector2 currentVelocity, float smoothTime);
        static /*0x2884cf4*/ UnityEngine.Vector2 SmoothDamp(UnityEngine.Vector2 current, UnityEngine.Vector2 target, ref UnityEngine.Vector2 currentVelocity, float smoothTime, float maxSpeed, float deltaTime);
        static /*0x2884f04*/ UnityEngine.Vector2 op_Addition(UnityEngine.Vector2 a, UnityEngine.Vector2 b);
        static /*0x2884f10*/ UnityEngine.Vector2 op_Subtraction(UnityEngine.Vector2 a, UnityEngine.Vector2 b);
        static /*0x2884f1c*/ UnityEngine.Vector2 op_Multiply(UnityEngine.Vector2 a, UnityEngine.Vector2 b);
        static /*0x2884f28*/ UnityEngine.Vector2 op_Division(UnityEngine.Vector2 a, UnityEngine.Vector2 b);
        static /*0x2884f34*/ UnityEngine.Vector2 op_UnaryNegation(UnityEngine.Vector2 a);
        static /*0x2884f40*/ UnityEngine.Vector2 op_Multiply(UnityEngine.Vector2 a, float d);
        static /*0x2884f4c*/ UnityEngine.Vector2 op_Multiply(float d, UnityEngine.Vector2 a);
        static /*0x2884f5c*/ UnityEngine.Vector2 op_Division(UnityEngine.Vector2 a, float d);
        static /*0x2884f68*/ bool op_Equality(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs);
        static /*0x2884f90*/ bool op_Inequality(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs);
        static /*0x2884fb8*/ UnityEngine.Vector2 op_Implicit(UnityEngine.Vector3 v);
        static /*0x2884fbc*/ UnityEngine.Vector3 op_Implicit(UnityEngine.Vector2 v);
        static /*0x2884fc4*/ UnityEngine.Vector2 get_zero();
        static /*0x288500c*/ UnityEngine.Vector2 get_one();
        static /*0x2885054*/ UnityEngine.Vector2 get_up();
        static /*0x288509c*/ UnityEngine.Vector2 get_down();
        static /*0x28850e4*/ UnityEngine.Vector2 get_left();
        static /*0x288512c*/ UnityEngine.Vector2 get_right();
        static /*0x2885174*/ UnityEngine.Vector2 get_positiveInfinity();
        static /*0x28851bc*/ UnityEngine.Vector2 get_negativeInfinity();
        /*0x2884320*/ Vector2(float x, float y);
        /*0x2884248*/ float get_Item(int index);
        /*0x28842b4*/ void set_Item(int index, float value);
        /*0x2884328*/ void Set(float newX, float newY);
        /*0x2884454*/ void Scale(UnityEngine.Vector2 scale);
        /*0x2884468*/ void Normalize();
        /*0x2884530*/ UnityEngine.Vector2 get_normalized();
        /*0x28845e0*/ string ToString();
        /*0x2884774*/ string ToString(string format);
        /*0x28845ec*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x288477c*/ int GetHashCode();
        /*0x28847b0*/ bool Equals(object other);
        /*0x2884838*/ bool Equals(UnityEngine.Vector2 other);
        /*0x28848a8*/ float get_magnitude();
        /*0x2884914*/ float get_sqrMagnitude();
        /*0x2884c50*/ float SqrMagnitude();
    }

    struct Vector2Int : System.IEquatable<UnityEngine.Vector2Int>, System.IFormattable
    {
        static /*0x0*/ UnityEngine.Vector2Int s_Zero;
        static /*0x8*/ UnityEngine.Vector2Int s_One;
        static /*0x10*/ UnityEngine.Vector2Int s_Up;
        static /*0x18*/ UnityEngine.Vector2Int s_Down;
        static /*0x20*/ UnityEngine.Vector2Int s_Left;
        static /*0x28*/ UnityEngine.Vector2Int s_Right;
        /*0x10*/ int m_X;
        /*0x14*/ int m_Y;

        static /*0x2885ee4*/ Vector2Int();
        static /*0x2885450*/ float Distance(UnityEngine.Vector2Int a, UnityEngine.Vector2Int b);
        static /*0x28854e4*/ UnityEngine.Vector2Int Min(UnityEngine.Vector2Int lhs, UnityEngine.Vector2Int rhs);
        static /*0x2885504*/ UnityEngine.Vector2Int Max(UnityEngine.Vector2Int lhs, UnityEngine.Vector2Int rhs);
        static /*0x2885524*/ UnityEngine.Vector2Int Scale(UnityEngine.Vector2Int a, UnityEngine.Vector2Int b);
        static /*0x2885618*/ UnityEngine.Vector2 op_Implicit(UnityEngine.Vector2Int v);
        static /*0x2885628*/ UnityEngine.Vector3Int op_Explicit(UnityEngine.Vector2Int v);
        static /*0x2885630*/ UnityEngine.Vector2Int FloorToInt(UnityEngine.Vector2 v);
        static /*0x2885728*/ UnityEngine.Vector2Int CeilToInt(UnityEngine.Vector2 v);
        static /*0x2885820*/ UnityEngine.Vector2Int RoundToInt(UnityEngine.Vector2 v);
        static /*0x28859d4*/ UnityEngine.Vector2Int op_UnaryNegation(UnityEngine.Vector2Int v);
        static /*0x28859e4*/ UnityEngine.Vector2Int op_Addition(UnityEngine.Vector2Int a, UnityEngine.Vector2Int b);
        static /*0x28859fc*/ UnityEngine.Vector2Int op_Subtraction(UnityEngine.Vector2Int a, UnityEngine.Vector2Int b);
        static /*0x2885a14*/ UnityEngine.Vector2Int op_Multiply(UnityEngine.Vector2Int a, UnityEngine.Vector2Int b);
        static /*0x2885a2c*/ UnityEngine.Vector2Int op_Multiply(int a, UnityEngine.Vector2Int b);
        static /*0x2885a44*/ UnityEngine.Vector2Int op_Multiply(UnityEngine.Vector2Int a, int b);
        static /*0x2885a58*/ UnityEngine.Vector2Int op_Division(UnityEngine.Vector2Int a, int b);
        static /*0x2885a6c*/ bool op_Equality(UnityEngine.Vector2Int lhs, UnityEngine.Vector2Int rhs);
        static /*0x2885a8c*/ bool op_Inequality(UnityEngine.Vector2Int lhs, UnityEngine.Vector2Int rhs);
        static /*0x2885d34*/ UnityEngine.Vector2Int get_zero();
        static /*0x2885d7c*/ UnityEngine.Vector2Int get_one();
        static /*0x2885dc4*/ UnityEngine.Vector2Int get_up();
        static /*0x2885e0c*/ UnityEngine.Vector2Int get_down();
        static /*0x2885e54*/ UnityEngine.Vector2Int get_left();
        static /*0x2885e9c*/ UnityEngine.Vector2Int get_right();
        /*0x28852d8*/ Vector2Int(int x, int y);
        /*0x28852b8*/ int get_x();
        /*0x28852c0*/ void set_x(int value);
        /*0x28852c8*/ int get_y();
        /*0x28852d0*/ void set_y(int value);
        /*0x28852e0*/ void Set(int x, int y);
        /*0x28852e8*/ int get_Item(int index);
        /*0x2885388*/ void set_Item(int index, int value);
        /*0x2885428*/ float get_magnitude();
        /*0x2885440*/ int get_sqrMagnitude();
        /*0x288553c*/ void Scale(UnityEngine.Vector2Int scale);
        /*0x2885554*/ void Clamp(UnityEngine.Vector2Int min, UnityEngine.Vector2Int max);
        /*0x2885aac*/ bool Equals(object other);
        /*0x2885b34*/ bool Equals(UnityEngine.Vector2Int other);
        /*0x2885b5c*/ int GetHashCode();
        /*0x2885ba4*/ string ToString();
        /*0x2885d2c*/ string ToString(string format);
        /*0x2885bb0*/ string ToString(string format, System.IFormatProvider formatProvider);
    }

    struct Matrix4x4 : System.IEquatable<UnityEngine.Matrix4x4>, System.IFormattable
    {
        static /*0x0*/ UnityEngine.Matrix4x4 zeroMatrix;
        static /*0x40*/ UnityEngine.Matrix4x4 identityMatrix;
        /*0x10*/ float m00;
        /*0x14*/ float m10;
        /*0x18*/ float m20;
        /*0x1c*/ float m30;
        /*0x20*/ float m01;
        /*0x24*/ float m11;
        /*0x28*/ float m21;
        /*0x2c*/ float m31;
        /*0x30*/ float m02;
        /*0x34*/ float m12;
        /*0x38*/ float m22;
        /*0x3c*/ float m32;
        /*0x40*/ float m03;
        /*0x44*/ float m13;
        /*0x48*/ float m23;
        /*0x4c*/ float m33;

        static /*0x288823c*/ Matrix4x4();
        static /*0x2886668*/ UnityEngine.Matrix4x4 op_Multiply(UnityEngine.Matrix4x4 lhs, UnityEngine.Matrix4x4 rhs);
        static /*0x2886810*/ UnityEngine.Vector4 op_Multiply(UnityEngine.Matrix4x4 lhs, UnityEngine.Vector4 vector);
        static /*0x2886844*/ bool op_Equality(UnityEngine.Matrix4x4 lhs, UnityEngine.Matrix4x4 rhs);
        static /*0x2886928*/ bool op_Inequality(UnityEngine.Matrix4x4 lhs, UnityEngine.Matrix4x4 rhs);
        static /*0x2886e5c*/ UnityEngine.Matrix4x4 Scale(UnityEngine.Vector3 vector);
        static /*0x2886e88*/ UnityEngine.Matrix4x4 Translate(UnityEngine.Vector3 vector);
        static /*0x2886ebc*/ UnityEngine.Matrix4x4 Rotate(UnityEngine.Quaternion q);
        static /*0x2886f54*/ UnityEngine.Matrix4x4 get_zero();
        static /*0x2886fac*/ UnityEngine.Matrix4x4 get_identity();
        static /*0x2887968*/ float Determinant(UnityEngine.Matrix4x4 m);
        static /*0x28879a4*/ UnityEngine.Matrix4x4 TRS(UnityEngine.Vector3 pos, UnityEngine.Quaternion q, UnityEngine.Vector3 s);
        static /*0x2887ad0*/ bool Inverse3DAffine(UnityEngine.Matrix4x4 input, ref UnityEngine.Matrix4x4 result);
        static /*0x2887b58*/ UnityEngine.Matrix4x4 Inverse(UnityEngine.Matrix4x4 m);
        static /*0x2887c08*/ UnityEngine.Matrix4x4 Transpose(UnityEngine.Matrix4x4 m);
        static /*0x2887d40*/ UnityEngine.Matrix4x4 Ortho(float left, float right, float bottom, float top, float zNear, float zFar);
        static /*0x2887e70*/ UnityEngine.Matrix4x4 Perspective(float fov, float aspect, float zNear, float zFar);
        static /*0x2887f70*/ UnityEngine.Matrix4x4 LookAt(UnityEngine.Vector3 from, UnityEngine.Vector3 to, UnityEngine.Vector3 up);
        static /*0x288805c*/ UnityEngine.Matrix4x4 Frustum(float left, float right, float bottom, float top, float zNear, float zFar);
        static /*0x288818c*/ UnityEngine.Matrix4x4 Frustum(UnityEngine.FrustumPlanes fp);
        static /*0x2887578*/ void GetRotation_Injected(ref UnityEngine.Matrix4x4 _unity_self, ref UnityEngine.Quaternion ret);
        static /*0x2887618*/ void GetLossyScale_Injected(ref UnityEngine.Matrix4x4 _unity_self, ref UnityEngine.Vector3 ret);
        static /*0x2887698*/ bool IsIdentity_Injected(ref UnityEngine.Matrix4x4 _unity_self);
        static /*0x2887710*/ float GetDeterminant_Injected(ref UnityEngine.Matrix4x4 _unity_self);
        static /*0x28877b4*/ void DecomposeProjection_Injected(ref UnityEngine.Matrix4x4 _unity_self, ref UnityEngine.FrustumPlanes ret);
        static /*0x288792c*/ bool ValidTRS_Injected(ref UnityEngine.Matrix4x4 _unity_self);
        static /*0x2887a34*/ void TRS_Injected(ref UnityEngine.Vector3 pos, ref UnityEngine.Quaternion q, ref UnityEngine.Vector3 s, ref UnityEngine.Matrix4x4 ret);
        static /*0x2887b14*/ bool Inverse3DAffine_Injected(ref UnityEngine.Matrix4x4 input, ref UnityEngine.Matrix4x4 result);
        static /*0x2887bc4*/ void Inverse_Injected(ref UnityEngine.Matrix4x4 m, ref UnityEngine.Matrix4x4 ret);
        static /*0x2887c74*/ void Transpose_Injected(ref UnityEngine.Matrix4x4 m, ref UnityEngine.Matrix4x4 ret);
        static /*0x2887dec*/ void Ortho_Injected(float left, float right, float bottom, float top, float zNear, float zFar, ref UnityEngine.Matrix4x4 ret);
        static /*0x2887f04*/ void Perspective_Injected(float fov, float aspect, float zNear, float zFar, ref UnityEngine.Matrix4x4 ret);
        static /*0x2888000*/ void LookAt_Injected(ref UnityEngine.Vector3 from, ref UnityEngine.Vector3 to, ref UnityEngine.Vector3 up, ref UnityEngine.Matrix4x4 ret);
        static /*0x2888108*/ void Frustum_Injected(float left, float right, float bottom, float top, float zNear, float zFar, ref UnityEngine.Matrix4x4 ret);
        /*0x2885f6c*/ Matrix4x4(UnityEngine.Vector4 column0, UnityEngine.Vector4 column1, UnityEngine.Vector4 column2, UnityEngine.Vector4 column3);
        /*0x2885f88*/ float get_Item(int row, int column);
        /*0x2886084*/ void set_Item(int row, int column, float value);
        /*0x2885f90*/ float get_Item(int index);
        /*0x288608c*/ void set_Item(int index, float value);
        /*0x2886180*/ int GetHashCode();
        /*0x28863ec*/ bool Equals(object other);
        /*0x2886560*/ bool Equals(UnityEngine.Matrix4x4 other);
        /*0x2886314*/ UnityEngine.Vector4 GetColumn(int index);
        /*0x2886970*/ UnityEngine.Vector4 GetRow(int index);
        /*0x2886a48*/ UnityEngine.Vector3 GetPosition();
        /*0x2886a54*/ void SetColumn(int index, UnityEngine.Vector4 column);
        /*0x2886acc*/ void SetRow(int index, UnityEngine.Vector4 row);
        /*0x2886b34*/ UnityEngine.Vector3 MultiplyPoint(UnityEngine.Vector3 point);
        /*0x2886bb4*/ UnityEngine.Vector3 MultiplyPoint3x4(UnityEngine.Vector3 point);
        /*0x2886c0c*/ UnityEngine.Vector3 MultiplyVector(UnityEngine.Vector3 vector);
        /*0x2886c54*/ UnityEngine.Plane TransformPlane(UnityEngine.Plane plane);
        /*0x2887004*/ string ToString();
        /*0x2887518*/ string ToString(string format);
        /*0x2887010*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x2887520*/ UnityEngine.Quaternion GetRotation();
        /*0x28875bc*/ UnityEngine.Vector3 GetLossyScale();
        /*0x288765c*/ bool IsIdentity();
        /*0x28876d4*/ float GetDeterminant();
        /*0x288774c*/ UnityEngine.FrustumPlanes DecomposeProjection();
        /*0x28877f8*/ UnityEngine.Quaternion get_rotation();
        /*0x28877fc*/ UnityEngine.Vector3 get_lossyScale();
        /*0x2887800*/ bool get_isIdentity();
        /*0x288783c*/ float get_determinant();
        /*0x2887878*/ UnityEngine.FrustumPlanes get_decomposeProjection();
        /*0x28878f0*/ bool ValidTRS();
        /*0x2887a90*/ void SetTRS(UnityEngine.Vector3 pos, UnityEngine.Quaternion q, UnityEngine.Vector3 s);
        /*0x2886dd4*/ UnityEngine.Matrix4x4 get_inverse();
        /*0x2887cb8*/ UnityEngine.Matrix4x4 get_transpose();
    }

    struct Vector4 : System.IEquatable<UnityEngine.Vector4>, System.IFormattable
    {
        static float kEpsilon = 0.000009999999747378752;
        static /*0x0*/ UnityEngine.Vector4 zeroVector;
        static /*0x10*/ UnityEngine.Vector4 oneVector;
        static /*0x20*/ UnityEngine.Vector4 positiveInfinityVector;
        static /*0x30*/ UnityEngine.Vector4 negativeInfinityVector;
        /*0x10*/ float x;
        /*0x14*/ float y;
        /*0x18*/ float z;
        /*0x1c*/ float w;

        static /*0x288912c*/ Vector4();
        static /*0x2888418*/ UnityEngine.Vector4 Lerp(UnityEngine.Vector4 a, UnityEngine.Vector4 b, float t);
        static /*0x2888464*/ UnityEngine.Vector4 LerpUnclamped(UnityEngine.Vector4 a, UnityEngine.Vector4 b, float t);
        static /*0x288849c*/ UnityEngine.Vector4 MoveTowards(UnityEngine.Vector4 current, UnityEngine.Vector4 target, float maxDistanceDelta);
        static /*0x28885f0*/ UnityEngine.Vector4 Scale(UnityEngine.Vector4 a, UnityEngine.Vector4 b);
        static /*0x2888768*/ UnityEngine.Vector4 Normalize(UnityEngine.Vector4 a);
        static /*0x2888a10*/ float Dot(UnityEngine.Vector4 a, UnityEngine.Vector4 b);
        static /*0x2888a30*/ UnityEngine.Vector4 Project(UnityEngine.Vector4 a, UnityEngine.Vector4 b);
        static /*0x2888a80*/ float Distance(UnityEngine.Vector4 a, UnityEngine.Vector4 b);
        static /*0x2888b04*/ float Magnitude(UnityEngine.Vector4 a);
        static /*0x2888c38*/ UnityEngine.Vector4 Min(UnityEngine.Vector4 lhs, UnityEngine.Vector4 rhs);
        static /*0x2888c5c*/ UnityEngine.Vector4 Max(UnityEngine.Vector4 lhs, UnityEngine.Vector4 rhs);
        static /*0x2888c80*/ UnityEngine.Vector4 get_zero();
        static /*0x2888ccc*/ UnityEngine.Vector4 get_one();
        static /*0x2888d18*/ UnityEngine.Vector4 get_positiveInfinity();
        static /*0x2888d64*/ UnityEngine.Vector4 get_negativeInfinity();
        static /*0x2888db0*/ UnityEngine.Vector4 op_Addition(UnityEngine.Vector4 a, UnityEngine.Vector4 b);
        static /*0x2888dc4*/ UnityEngine.Vector4 op_Subtraction(UnityEngine.Vector4 a, UnityEngine.Vector4 b);
        static /*0x2888dd8*/ UnityEngine.Vector4 op_UnaryNegation(UnityEngine.Vector4 a);
        static /*0x2888dec*/ UnityEngine.Vector4 op_Multiply(UnityEngine.Vector4 a, float d);
        static /*0x2888e00*/ UnityEngine.Vector4 op_Multiply(float d, UnityEngine.Vector4 a);
        static /*0x2888e18*/ UnityEngine.Vector4 op_Division(UnityEngine.Vector4 a, float d);
        static /*0x2888e2c*/ bool op_Equality(UnityEngine.Vector4 lhs, UnityEngine.Vector4 rhs);
        static /*0x2888e6c*/ bool op_Inequality(UnityEngine.Vector4 lhs, UnityEngine.Vector4 rhs);
        static /*0x2888eac*/ UnityEngine.Vector4 op_Implicit(UnityEngine.Vector3 v);
        static /*0x2888eb4*/ UnityEngine.Vector3 op_Implicit(UnityEngine.Vector4 v);
        static /*0x2888eb8*/ UnityEngine.Vector4 op_Implicit(UnityEngine.Vector2 v);
        static /*0x2888ec4*/ UnityEngine.Vector2 op_Implicit(UnityEngine.Vector4 v);
        static /*0x28890e4*/ float SqrMagnitude(UnityEngine.Vector4 a);
        /*0x28883e4*/ Vector4(float x, float y, float z, float w);
        /*0x28883f0*/ Vector4(float x, float y, float z);
        /*0x2888400*/ Vector4(float x, float y);
        /*0x28882bc*/ float get_Item(int index);
        /*0x2888350*/ void set_Item(int index, float value);
        /*0x288840c*/ void Set(float newX, float newY, float newZ, float newW);
        /*0x2888604*/ void Scale(UnityEngine.Vector4 scale);
        /*0x2888620*/ int GetHashCode();
        /*0x2888684*/ bool Equals(object other);
        /*0x288872c*/ bool Equals(UnityEngine.Vector4 other);
        /*0x2888850*/ void Normalize();
        /*0x2888930*/ UnityEngine.Vector4 get_normalized();
        /*0x2888b90*/ float get_magnitude();
        /*0x2888c10*/ float get_sqrMagnitude();
        /*0x2888ec8*/ string ToString();
        /*0x28890dc*/ string ToString(string format);
        /*0x2888ed4*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x2889104*/ float SqrMagnitude();
    }

    struct Vector3Int : System.IEquatable<UnityEngine.Vector3Int>, System.IFormattable
    {
        static /*0x0*/ UnityEngine.Vector3Int s_Zero;
        static /*0xc*/ UnityEngine.Vector3Int s_One;
        static /*0x18*/ UnityEngine.Vector3Int s_Up;
        static /*0x24*/ UnityEngine.Vector3Int s_Down;
        static /*0x30*/ UnityEngine.Vector3Int s_Left;
        static /*0x3c*/ UnityEngine.Vector3Int s_Right;
        static /*0x48*/ UnityEngine.Vector3Int s_Forward;
        static /*0x54*/ UnityEngine.Vector3Int s_Back;
        /*0x10*/ int m_X;
        /*0x14*/ int m_Y;
        /*0x18*/ int m_Z;

        static /*0x288a1b0*/ Vector3Int();
        static /*0x288940c*/ float Distance(UnityEngine.Vector3Int a, UnityEngine.Vector3Int b);
        static /*0x2889438*/ UnityEngine.Vector3Int Min(UnityEngine.Vector3Int lhs, UnityEngine.Vector3Int rhs);
        static /*0x2889464*/ UnityEngine.Vector3Int Max(UnityEngine.Vector3Int lhs, UnityEngine.Vector3Int rhs);
        static /*0x2889490*/ UnityEngine.Vector3Int Scale(UnityEngine.Vector3Int a, UnityEngine.Vector3Int b);
        static /*0x28895cc*/ UnityEngine.Vector3 op_Implicit(UnityEngine.Vector3Int v);
        static /*0x28895e0*/ UnityEngine.Vector2Int op_Explicit(UnityEngine.Vector3Int v);
        static /*0x28895e4*/ UnityEngine.Vector3Int FloorToInt(UnityEngine.Vector3 v);
        static /*0x2889758*/ UnityEngine.Vector3Int CeilToInt(UnityEngine.Vector3 v);
        static /*0x28898cc*/ UnityEngine.Vector3Int RoundToInt(UnityEngine.Vector3 v);
        static /*0x2889b18*/ UnityEngine.Vector3Int op_Addition(UnityEngine.Vector3Int a, UnityEngine.Vector3Int b);
        static /*0x2889b34*/ UnityEngine.Vector3Int op_Subtraction(UnityEngine.Vector3Int a, UnityEngine.Vector3Int b);
        static /*0x2889b50*/ UnityEngine.Vector3Int op_Multiply(UnityEngine.Vector3Int a, UnityEngine.Vector3Int b);
        static /*0x2889b6c*/ UnityEngine.Vector3Int op_UnaryNegation(UnityEngine.Vector3Int a);
        static /*0x2889b80*/ UnityEngine.Vector3Int op_Multiply(UnityEngine.Vector3Int a, int b);
        static /*0x2889b98*/ UnityEngine.Vector3Int op_Multiply(int a, UnityEngine.Vector3Int b);
        static /*0x2889bb4*/ UnityEngine.Vector3Int op_Division(UnityEngine.Vector3Int a, int b);
        static /*0x2889bcc*/ bool op_Equality(UnityEngine.Vector3Int lhs, UnityEngine.Vector3Int rhs);
        static /*0x2889bfc*/ bool op_Inequality(UnityEngine.Vector3Int lhs, UnityEngine.Vector3Int rhs);
        static /*0x2889f50*/ UnityEngine.Vector3Int get_zero();
        static /*0x2889f9c*/ UnityEngine.Vector3Int get_one();
        static /*0x2889fe8*/ UnityEngine.Vector3Int get_up();
        static /*0x288a034*/ UnityEngine.Vector3Int get_down();
        static /*0x288a080*/ UnityEngine.Vector3Int get_left();
        static /*0x288a0cc*/ UnityEngine.Vector3Int get_right();
        static /*0x288a118*/ UnityEngine.Vector3Int get_forward();
        static /*0x288a164*/ UnityEngine.Vector3Int get_back();
        /*0x28891d0*/ Vector3Int(int x, int y);
        /*0x28891dc*/ Vector3Int(int x, int y, int z);
        /*0x28891a0*/ int get_x();
        /*0x28891a8*/ void set_x(int value);
        /*0x28891b0*/ int get_y();
        /*0x28891b8*/ void set_y(int value);
        /*0x28891c0*/ int get_z();
        /*0x28891c8*/ void set_z(int value);
        /*0x28891e8*/ void Set(int x, int y, int z);
        /*0x28891f4*/ int get_Item(int index);
        /*0x28892e4*/ void set_Item(int index, int value);
        /*0x28893d4*/ float get_magnitude();
        /*0x28893f4*/ int get_sqrMagnitude();
        /*0x28894ac*/ void Scale(UnityEngine.Vector3Int scale);
        /*0x28894d0*/ void Clamp(UnityEngine.Vector3Int min, UnityEngine.Vector3Int max);
        /*0x2889c2c*/ bool Equals(object other);
        /*0x2889cc8*/ bool Equals(UnityEngine.Vector3Int other);
        /*0x2889d00*/ int GetHashCode();
        /*0x2889d78*/ string ToString();
        /*0x2889f48*/ string ToString(string format);
        /*0x2889d84*/ string ToString(string format, System.IFormatProvider formatProvider);
    }

    class ColorUtility
    {
        static /*0x288a27c*/ bool DoTryParseHtmlColor(string htmlString, ref UnityEngine.Color32 color);
        static /*0x288a2c0*/ bool TryParseHtmlString(string htmlString, ref UnityEngine.Color color);
        static /*0x288a370*/ string ToHtmlStringRGB(UnityEngine.Color color);
        static /*0x288a760*/ string ToHtmlStringRGBA(UnityEngine.Color color);
        /*0x288ac5c*/ ColorUtility();
    }

    struct Vector3 : System.IEquatable<UnityEngine.Vector3>, System.IFormattable
    {
        static float kEpsilon = 0.000009999999747378752;
        static float kEpsilonNormalSqrt = 1.0000000036274937e-15;
        static /*0x0*/ UnityEngine.Vector3 zeroVector;
        static /*0xc*/ UnityEngine.Vector3 oneVector;
        static /*0x18*/ UnityEngine.Vector3 upVector;
        static /*0x24*/ UnityEngine.Vector3 downVector;
        static /*0x30*/ UnityEngine.Vector3 leftVector;
        static /*0x3c*/ UnityEngine.Vector3 rightVector;
        static /*0x48*/ UnityEngine.Vector3 forwardVector;
        static /*0x54*/ UnityEngine.Vector3 backVector;
        static /*0x60*/ UnityEngine.Vector3 positiveInfinityVector;
        static /*0x6c*/ UnityEngine.Vector3 negativeInfinityVector;
        /*0x10*/ float x;
        /*0x14*/ float y;
        /*0x18*/ float z;

        static /*0x288c9ec*/ Vector3();
        static /*0x288ac64*/ UnityEngine.Vector3 Lerp(UnityEngine.Vector3 a, UnityEngine.Vector3 b, float t);
        static /*0x288aca0*/ UnityEngine.Vector3 LerpUnclamped(UnityEngine.Vector3 a, UnityEngine.Vector3 b, float t);
        static /*0x288acc8*/ UnityEngine.Vector3 MoveTowards(UnityEngine.Vector3 current, UnityEngine.Vector3 target, float maxDistanceDelta);
        static /*0x288addc*/ UnityEngine.Vector3 SmoothDamp(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 currentVelocity, float smoothTime, float maxSpeed);
        static /*0x288b0a4*/ UnityEngine.Vector3 SmoothDamp(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 currentVelocity, float smoothTime);
        static /*0x288ae68*/ UnityEngine.Vector3 SmoothDamp(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 currentVelocity, float smoothTime, float maxSpeed, float deltaTime);
        static /*0x288b24c*/ UnityEngine.Vector3 Scale(UnityEngine.Vector3 a, UnityEngine.Vector3 b);
        static /*0x288b27c*/ UnityEngine.Vector3 Cross(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs);
        static /*0x288b3b4*/ UnityEngine.Vector3 Reflect(UnityEngine.Vector3 inDirection, UnityEngine.Vector3 inNormal);
        static /*0x288b3ec*/ UnityEngine.Vector3 Normalize(UnityEngine.Vector3 value);
        static /*0x288b670*/ float Dot(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs);
        static /*0x288b688*/ UnityEngine.Vector3 Project(UnityEngine.Vector3 vector, UnityEngine.Vector3 onNormal);
        static /*0x288b784*/ UnityEngine.Vector3 ProjectOnPlane(UnityEngine.Vector3 vector, UnityEngine.Vector3 planeNormal);
        static /*0x288b85c*/ float Angle(UnityEngine.Vector3 from, UnityEngine.Vector3 to);
        static /*0x288b978*/ float SignedAngle(UnityEngine.Vector3 from, UnityEngine.Vector3 to, UnityEngine.Vector3 axis);
        static /*0x288baf8*/ float Distance(UnityEngine.Vector3 a, UnityEngine.Vector3 b);
        static /*0x288bb98*/ UnityEngine.Vector3 ClampMagnitude(UnityEngine.Vector3 vector, float maxLength);
        static /*0x288bc4c*/ float Magnitude(UnityEngine.Vector3 vector);
        static /*0x288bd4c*/ float SqrMagnitude(UnityEngine.Vector3 vector);
        static /*0x288bd84*/ UnityEngine.Vector3 Min(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs);
        static /*0x288bda0*/ UnityEngine.Vector3 Max(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs);
        static /*0x288bdbc*/ UnityEngine.Vector3 get_zero();
        static /*0x288be08*/ UnityEngine.Vector3 get_one();
        static /*0x288be54*/ UnityEngine.Vector3 get_forward();
        static /*0x288bea0*/ UnityEngine.Vector3 get_back();
        static /*0x288beec*/ UnityEngine.Vector3 get_up();
        static /*0x288bf38*/ UnityEngine.Vector3 get_down();
        static /*0x288bf84*/ UnityEngine.Vector3 get_left();
        static /*0x288bfd0*/ UnityEngine.Vector3 get_right();
        static /*0x288c01c*/ UnityEngine.Vector3 get_positiveInfinity();
        static /*0x288c068*/ UnityEngine.Vector3 get_negativeInfinity();
        static /*0x288c0b4*/ UnityEngine.Vector3 op_Addition(UnityEngine.Vector3 a, UnityEngine.Vector3 b);
        static /*0x288c0c4*/ UnityEngine.Vector3 op_Subtraction(UnityEngine.Vector3 a, UnityEngine.Vector3 b);
        static /*0x288c0d4*/ UnityEngine.Vector3 op_UnaryNegation(UnityEngine.Vector3 a);
        static /*0x288c0e4*/ UnityEngine.Vector3 op_Multiply(UnityEngine.Vector3 a, float d);
        static /*0x288c0f4*/ UnityEngine.Vector3 op_Multiply(float d, UnityEngine.Vector3 a);
        static /*0x288c108*/ UnityEngine.Vector3 op_Division(UnityEngine.Vector3 a, float d);
        static /*0x288c118*/ bool op_Equality(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs);
        static /*0x288c14c*/ bool op_Inequality(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs);
        static /*0x288c35c*/ UnityEngine.Vector3 get_fwd();
        static /*0x288c36c*/ float AngleBetween(UnityEngine.Vector3 from, UnityEngine.Vector3 to);
        static /*0x288c554*/ UnityEngine.Vector3 Exclude(UnityEngine.Vector3 excludeThis, UnityEngine.Vector3 fromThat);
        static /*0x288c624*/ UnityEngine.Vector3 Slerp(UnityEngine.Vector3 a, UnityEngine.Vector3 b, float t);
        static /*0x288c6fc*/ UnityEngine.Vector3 SlerpUnclamped(UnityEngine.Vector3 a, UnityEngine.Vector3 b, float t);
        static /*0x288c7d4*/ void OrthoNormalize2(ref UnityEngine.Vector3 a, ref UnityEngine.Vector3 b);
        static /*0x288c818*/ void OrthoNormalize(ref UnityEngine.Vector3 normal, ref UnityEngine.Vector3 tangent);
        static /*0x288c85c*/ void OrthoNormalize3(ref UnityEngine.Vector3 a, ref UnityEngine.Vector3 b, ref UnityEngine.Vector3 c);
        static /*0x288c8b0*/ void OrthoNormalize(ref UnityEngine.Vector3 normal, ref UnityEngine.Vector3 tangent, ref UnityEngine.Vector3 binormal);
        static /*0x288c904*/ UnityEngine.Vector3 RotateTowards(UnityEngine.Vector3 current, UnityEngine.Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta);
        static /*0x288c698*/ void Slerp_Injected(ref UnityEngine.Vector3 a, ref UnityEngine.Vector3 b, float t, ref UnityEngine.Vector3 ret);
        static /*0x288c770*/ void SlerpUnclamped_Injected(ref UnityEngine.Vector3 a, ref UnityEngine.Vector3 b, float t, ref UnityEngine.Vector3 ret);
        static /*0x288c980*/ void RotateTowards_Injected(ref UnityEngine.Vector3 current, ref UnityEngine.Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta, ref UnityEngine.Vector3 ret);
        /*0x288b228*/ Vector3(float x, float y, float z);
        /*0x288b234*/ Vector3(float x, float y);
        /*0x288b130*/ float get_Item(int index);
        /*0x288b1ac*/ void set_Item(int index, float value);
        /*0x288b240*/ void Set(float newX, float newY, float newZ);
        /*0x288b25c*/ void Scale(UnityEngine.Vector3 scale);
        /*0x288b2a4*/ int GetHashCode();
        /*0x288b2ec*/ bool Equals(object other);
        /*0x288b384*/ bool Equals(UnityEngine.Vector3 other);
        /*0x288b4bc*/ void Normalize();
        /*0x288b5a4*/ UnityEngine.Vector3 get_normalized();
        /*0x288bccc*/ float get_magnitude();
        /*0x288bd64*/ float get_sqrMagnitude();
        /*0x288c180*/ string ToString();
        /*0x288c354*/ string ToString(string format);
        /*0x288c18c*/ string ToString(string format, System.IFormatProvider formatProvider);
    }

    struct Color32 : System.IFormattable
    {
        /*0x10*/ int rgba;
        /*0x10*/ byte r;
        /*0x11*/ byte g;
        /*0x12*/ byte b;
        /*0x13*/ byte a;

        static /*0x288cafc*/ UnityEngine.Color32 op_Implicit(UnityEngine.Color c);
        static /*0x288cdc0*/ UnityEngine.Color op_Implicit(UnityEngine.Color32 c);
        static /*0x288cdfc*/ UnityEngine.Color32 Lerp(UnityEngine.Color32 a, UnityEngine.Color32 b, float t);
        static /*0x288ced8*/ UnityEngine.Color32 LerpUnclamped(UnityEngine.Color32 a, UnityEngine.Color32 b, float t);
        /*0x288cae8*/ Color32(byte r, byte g, byte b, byte a);
        /*0x288cfa0*/ byte get_Item(int index);
        /*0x288d078*/ void set_Item(int index, byte value);
        /*0x288d154*/ bool InternalEquals(UnityEngine.Color32 other);
        /*0x288d164*/ string ToString();
        /*0x288d34c*/ string ToString(string format);
        /*0x288d170*/ string ToString(string format, System.IFormatProvider formatProvider);
    }

    struct Color : System.IEquatable<UnityEngine.Color>, System.IFormattable
    {
        /*0x10*/ float r;
        /*0x14*/ float g;
        /*0x18*/ float b;
        /*0x1c*/ float a;

        static /*0x288d768*/ UnityEngine.Color op_Addition(UnityEngine.Color a, UnityEngine.Color b);
        static /*0x288d77c*/ UnityEngine.Color op_Subtraction(UnityEngine.Color a, UnityEngine.Color b);
        static /*0x288d790*/ UnityEngine.Color op_Multiply(UnityEngine.Color a, UnityEngine.Color b);
        static /*0x288d7a4*/ UnityEngine.Color op_Multiply(UnityEngine.Color a, float b);
        static /*0x288d7b8*/ UnityEngine.Color op_Multiply(float b, UnityEngine.Color a);
        static /*0x288d7d0*/ UnityEngine.Color op_Division(UnityEngine.Color a, float b);
        static /*0x288d7e4*/ bool op_Equality(UnityEngine.Color lhs, UnityEngine.Color rhs);
        static /*0x288d824*/ bool op_Inequality(UnityEngine.Color lhs, UnityEngine.Color rhs);
        static /*0x288d864*/ UnityEngine.Color Lerp(UnityEngine.Color a, UnityEngine.Color b, float t);
        static /*0x288d8b0*/ UnityEngine.Color LerpUnclamped(UnityEngine.Color a, UnityEngine.Color b, float t);
        static /*0x288d930*/ UnityEngine.Color get_red();
        static /*0x288d944*/ UnityEngine.Color get_green();
        static /*0x288d958*/ UnityEngine.Color get_blue();
        static /*0x288d96c*/ UnityEngine.Color get_white();
        static /*0x288d980*/ UnityEngine.Color get_black();
        static /*0x288d994*/ UnityEngine.Color get_yellow();
        static /*0x288d9b0*/ UnityEngine.Color get_cyan();
        static /*0x288d9c4*/ UnityEngine.Color get_magenta();
        static /*0x288d9d8*/ UnityEngine.Color get_gray();
        static /*0x288d9ec*/ UnityEngine.Color get_grey();
        static /*0x288da00*/ UnityEngine.Color get_clear();
        static /*0x288dc38*/ UnityEngine.Vector4 op_Implicit(UnityEngine.Color c);
        static /*0x288dc3c*/ UnityEngine.Color op_Implicit(UnityEngine.Vector4 v);
        static /*0x288ddf0*/ void RGBToHSV(UnityEngine.Color rgbColor, ref float H, ref float S, ref float V);
        static /*0x288df04*/ void RGBToHSVHelper(float offset, float dominantcolor, float colorone, float colortwo, ref float H, ref float S, ref float V);
        static /*0x288df74*/ UnityEngine.Color HSVToRGB(float H, float S, float V);
        static /*0x288df7c*/ UnityEngine.Color HSVToRGB(float H, float S, float V, bool hdr);
        /*0x288d354*/ Color(float r, float g, float b, float a);
        /*0x288d360*/ Color(float r, float g, float b);
        /*0x288d374*/ string ToString();
        /*0x288d588*/ string ToString(string format);
        /*0x288d380*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x288d590*/ int GetHashCode();
        /*0x288d614*/ bool Equals(object other);
        /*0x288d6e8*/ bool Equals(UnityEngine.Color other);
        /*0x288d8e8*/ UnityEngine.Color RGBMultiplied(float multiplier);
        /*0x288d904*/ UnityEngine.Color AlphaMultiplied(float multiplier);
        /*0x288d918*/ UnityEngine.Color RGBMultiplied(UnityEngine.Color multiplier);
        /*0x288da14*/ float get_grayscale();
        /*0x288da4c*/ UnityEngine.Color get_linear();
        /*0x288db34*/ UnityEngine.Color get_gamma();
        /*0x288dc1c*/ float get_maxColorComponent();
        /*0x288dc40*/ float get_Item(int index);
        /*0x288dd18*/ void set_Item(int index, float value);
    }

    struct FrustumPlanes
    {
        /*0x10*/ float left;
        /*0x14*/ float right;
        /*0x18*/ float bottom;
        /*0x1c*/ float top;
        /*0x20*/ float zNear;
        /*0x24*/ float zFar;
    }

    struct Quaternion : System.IEquatable<UnityEngine.Quaternion>, System.IFormattable
    {
        static float kEpsilon = 9.999999974752427e-7;
        static /*0x0*/ UnityEngine.Quaternion identityQuaternion;
        /*0x10*/ float x;
        /*0x14*/ float y;
        /*0x18*/ float z;
        /*0x1c*/ float w;

        static /*0x288f710*/ Quaternion();
        static /*0x288e0c8*/ UnityEngine.Quaternion FromToRotation(UnityEngine.Vector3 fromDirection, UnityEngine.Vector3 toDirection);
        static /*0x288e17c*/ UnityEngine.Quaternion Inverse(UnityEngine.Quaternion rotation);
        static /*0x288e214*/ UnityEngine.Quaternion Slerp(UnityEngine.Quaternion a, UnityEngine.Quaternion b, float t);
        static /*0x288e2e8*/ UnityEngine.Quaternion SlerpUnclamped(UnityEngine.Quaternion a, UnityEngine.Quaternion b, float t);
        static /*0x288e3bc*/ UnityEngine.Quaternion Lerp(UnityEngine.Quaternion a, UnityEngine.Quaternion b, float t);
        static /*0x288e490*/ UnityEngine.Quaternion LerpUnclamped(UnityEngine.Quaternion a, UnityEngine.Quaternion b, float t);
        static /*0x288e564*/ UnityEngine.Quaternion Internal_FromEulerRad(UnityEngine.Vector3 euler);
        static /*0x288e5fc*/ UnityEngine.Vector3 Internal_ToEulerRad(UnityEngine.Quaternion rotation);
        static /*0x288e698*/ void Internal_ToAxisAngleRad(UnityEngine.Quaternion q, ref UnityEngine.Vector3 axis, ref float angle);
        static /*0x288e748*/ UnityEngine.Quaternion AngleAxis(float angle, UnityEngine.Vector3 axis);
        static /*0x288e800*/ UnityEngine.Quaternion LookRotation(UnityEngine.Vector3 forward, UnityEngine.Vector3 upwards);
        static /*0x288e8b4*/ UnityEngine.Quaternion LookRotation(UnityEngine.Vector3 forward);
        static /*0x288ea60*/ UnityEngine.Quaternion get_identity();
        static /*0x288eaac*/ UnityEngine.Quaternion op_Multiply(UnityEngine.Quaternion lhs, UnityEngine.Quaternion rhs);
        static /*0x288eb20*/ UnityEngine.Vector3 op_Multiply(UnityEngine.Quaternion rotation, UnityEngine.Vector3 point);
        static /*0x288ebc4*/ bool IsEqualUsingDot(float dot);
        static /*0x288ebd8*/ bool op_Equality(UnityEngine.Quaternion lhs, UnityEngine.Quaternion rhs);
        static /*0x288ec08*/ bool op_Inequality(UnityEngine.Quaternion lhs, UnityEngine.Quaternion rhs);
        static /*0x288ec38*/ float Dot(UnityEngine.Quaternion a, UnityEngine.Quaternion b);
        static /*0x288ecf8*/ float Angle(UnityEngine.Quaternion a, UnityEngine.Quaternion b);
        static /*0x288ed58*/ UnityEngine.Vector3 Internal_MakePositive(UnityEngine.Vector3 euler);
        static /*0x288ee3c*/ UnityEngine.Quaternion Euler(float x, float y, float z);
        static /*0x288ee54*/ UnityEngine.Quaternion Euler(UnityEngine.Vector3 euler);
        static /*0x288eebc*/ UnityEngine.Quaternion RotateTowards(UnityEngine.Quaternion from, UnityEngine.Quaternion to, float maxDegreesDelta);
        static /*0x288efbc*/ UnityEngine.Quaternion Normalize(UnityEngine.Quaternion q);
        static /*0x288f600*/ UnityEngine.Quaternion EulerRotation(float x, float y, float z);
        static /*0x288f604*/ UnityEngine.Quaternion EulerRotation(UnityEngine.Vector3 euler);
        static /*0x288f64c*/ UnityEngine.Quaternion EulerAngles(float x, float y, float z);
        static /*0x288f650*/ UnityEngine.Quaternion EulerAngles(UnityEngine.Vector3 euler);
        static /*0x288f6a0*/ UnityEngine.Vector3 ToEulerAngles(UnityEngine.Quaternion rotation);
        static /*0x288f6e8*/ UnityEngine.Quaternion AxisAngle(UnityEngine.Vector3 axis, float angle);
        static /*0x288e128*/ void FromToRotation_Injected(ref UnityEngine.Vector3 fromDirection, ref UnityEngine.Vector3 toDirection, ref UnityEngine.Quaternion ret);
        static /*0x288e1d0*/ void Inverse_Injected(ref UnityEngine.Quaternion rotation, ref UnityEngine.Quaternion ret);
        static /*0x288e284*/ void Slerp_Injected(ref UnityEngine.Quaternion a, ref UnityEngine.Quaternion b, float t, ref UnityEngine.Quaternion ret);
        static /*0x288e358*/ void SlerpUnclamped_Injected(ref UnityEngine.Quaternion a, ref UnityEngine.Quaternion b, float t, ref UnityEngine.Quaternion ret);
        static /*0x288e42c*/ void Lerp_Injected(ref UnityEngine.Quaternion a, ref UnityEngine.Quaternion b, float t, ref UnityEngine.Quaternion ret);
        static /*0x288e500*/ void LerpUnclamped_Injected(ref UnityEngine.Quaternion a, ref UnityEngine.Quaternion b, float t, ref UnityEngine.Quaternion ret);
        static /*0x288e5b8*/ void Internal_FromEulerRad_Injected(ref UnityEngine.Vector3 euler, ref UnityEngine.Quaternion ret);
        static /*0x288e654*/ void Internal_ToEulerRad_Injected(ref UnityEngine.Quaternion rotation, ref UnityEngine.Vector3 ret);
        static /*0x288e6f4*/ void Internal_ToAxisAngleRad_Injected(ref UnityEngine.Quaternion q, ref UnityEngine.Vector3 axis, ref float angle);
        static /*0x288e7ac*/ void AngleAxis_Injected(float angle, ref UnityEngine.Vector3 axis, ref UnityEngine.Quaternion ret);
        static /*0x288e860*/ void LookRotation_Injected(ref UnityEngine.Vector3 forward, ref UnityEngine.Vector3 upwards, ref UnityEngine.Quaternion ret);
        /*0x288ea48*/ Quaternion(float x, float y, float z, float w);
        /*0x288e920*/ float get_Item(int index);
        /*0x288e9b4*/ void set_Item(int index, float value);
        /*0x288ea54*/ void Set(float newX, float newY, float newZ, float newW);
        /*0x288ec58*/ void SetLookRotation(UnityEngine.Vector3 view);
        /*0x288ecdc*/ void SetLookRotation(UnityEngine.Vector3 view, UnityEngine.Vector3 up);
        /*0x288ede0*/ UnityEngine.Vector3 get_eulerAngles();
        /*0x288ee0c*/ void set_eulerAngles(UnityEngine.Vector3 value);
        /*0x288ee6c*/ void ToAngleAxis(ref float angle, ref UnityEngine.Vector3 axis);
        /*0x288eea0*/ void SetFromToRotation(UnityEngine.Vector3 fromDirection, UnityEngine.Vector3 toDirection);
        /*0x288f098*/ void Normalize();
        /*0x288f160*/ UnityEngine.Quaternion get_normalized();
        /*0x288f22c*/ int GetHashCode();
        /*0x288f290*/ bool Equals(object other);
        /*0x288f364*/ bool Equals(UnityEngine.Quaternion other);
        /*0x288f3e4*/ string ToString();
        /*0x288f5f8*/ string ToString(string format);
        /*0x288f3f0*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x288f608*/ void SetEulerRotation(float x, float y, float z);
        /*0x288f624*/ void SetEulerRotation(UnityEngine.Vector3 euler);
        /*0x288f640*/ UnityEngine.Vector3 ToEuler();
        /*0x288f654*/ void ToAxisAngle(ref UnityEngine.Vector3 axis, ref float angle);
        /*0x288f668*/ void SetEulerAngles(float x, float y, float z);
        /*0x288f684*/ void SetEulerAngles(UnityEngine.Vector3 euler);
        /*0x288f6a4*/ UnityEngine.Vector3 ToEulerAngles();
        /*0x288f6b0*/ void SetAxisAngle(UnityEngine.Vector3 axis, float angle);
    }

    struct Mathf
    {
        static float PI = 3.1415927410125732;
        static float Infinity = Infinity;
        static float NegativeInfinity = -Infinity;
        static float Deg2Rad = 0.01745329238474369;
        static float Rad2Deg = 57.295780181884766;
        static /*0x0*/ float Epsilon;

        static /*0x2890c5c*/ Mathf();
        static /*0x288f760*/ int ClosestPowerOfTwo(int value);
        static /*0x288f79c*/ bool IsPowerOfTwo(int value);
        static /*0x288f7d8*/ int NextPowerOfTwo(int value);
        static /*0x288dafc*/ float GammaToLinearSpace(float value);
        static /*0x288dbe4*/ float LinearToGammaSpace(float value);
        static /*0x288f814*/ UnityEngine.Color CorrelatedColorTemperatureToRGB(float kelvin);
        static /*0x288f8b8*/ ushort FloatToHalf(float val);
        static /*0x288f8f0*/ float HalfToFloat(ushort val);
        static /*0x288f92c*/ float PerlinNoise(float x, float y);
        static /*0x288f96c*/ float Sin(float f);
        static /*0x288f9d0*/ float Cos(float f);
        static /*0x288fa34*/ float Tan(float f);
        static /*0x288fa98*/ float Asin(float f);
        static /*0x288fafc*/ float Acos(float f);
        static /*0x288fb60*/ float Atan(float f);
        static /*0x288fbc4*/ float Atan2(float y, float x);
        static /*0x288fc30*/ float Sqrt(float f);
        static /*0x288fc8c*/ float Abs(float f);
        static /*0x288fce8*/ int Abs(int value);
        static /*0x288fd40*/ float Min(float a, float b);
        static /*0x288fd4c*/ float Min(float[] values);
        static /*0x288fd9c*/ int Min(int a, int b);
        static /*0x288fda8*/ int Min(int[] values);
        static /*0x288fdfc*/ float Max(float a, float b);
        static /*0x288fe08*/ float Max(float[] values);
        static /*0x288fe58*/ int Max(int a, int b);
        static /*0x288fe64*/ int Max(int[] values);
        static /*0x288feb8*/ float Pow(float f, float p);
        static /*0x288ff28*/ float Exp(float power);
        static /*0x288ff8c*/ float Log(float f, float p);
        static /*0x288fffc*/ float Log(float f);
        static /*0x2890060*/ float Log10(float f);
        static /*0x28900c4*/ float Ceil(float f);
        static /*0x2890120*/ float Floor(float f);
        static /*0x289017c*/ float Round(float f);
        static /*0x2890244*/ int CeilToInt(float f);
        static /*0x28902b8*/ int FloorToInt(float f);
        static /*0x289032c*/ int RoundToInt(float f);
        static /*0x2890408*/ float Sign(float f);
        static /*0x289041c*/ float Clamp(float value, float min, float max);
        static /*0x2890438*/ int Clamp(int value, int min, int max);
        static /*0x2890454*/ float Clamp01(float value);
        static /*0x2890470*/ float Lerp(float a, float b, float t);
        static /*0x2890494*/ float LerpUnclamped(float a, float b, float t);
        static /*0x28904a4*/ float LerpAngle(float a, float b, float t);
        static /*0x2890508*/ float MoveTowards(float current, float target, float maxDelta);
        static /*0x2890538*/ float MoveTowardsAngle(float current, float target, float maxDelta);
        static /*0x28905c8*/ float SmoothStep(float from, float to, float t);
        static /*0x2890610*/ float Gamma(float value, float absmax, float gamma);
        static /*0x2890664*/ bool Approximately(float a, float b);
        static /*0x28906f4*/ float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed);
        static /*0x2890810*/ float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime);
        static /*0x2890744*/ float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed, float deltaTime);
        static /*0x2890860*/ float SmoothDampAngle(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed);
        static /*0x28908f8*/ float SmoothDampAngle(float current, float target, ref float currentVelocity, float smoothTime);
        static /*0x2890990*/ float SmoothDampAngle(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed, float deltaTime);
        static /*0x28909e0*/ float Repeat(float t, float length);
        static /*0x2890a08*/ float PingPong(float t, float length);
        static /*0x2890a3c*/ float InverseLerp(float a, float b, float value);
        static /*0x2890a6c*/ float DeltaAngle(float current, float target);
        static /*0x2890ab8*/ bool LineIntersection(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, ref UnityEngine.Vector2 result);
        static /*0x2890b18*/ bool LineSegmentIntersection(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, ref UnityEngine.Vector2 result);
        static /*0x2890bb8*/ long RandomToLong(System.Random r);
        static /*0x288f86c*/ void CorrelatedColorTemperatureToRGB_Injected(float kelvin, ref UnityEngine.Color ret);
    }

    struct GradientColorKey
    {
        /*0x10*/ UnityEngine.Color color;
        /*0x20*/ float time;

        /*0x2890cd8*/ GradientColorKey(UnityEngine.Color col, float time);
    }

    struct GradientAlphaKey
    {
        /*0x10*/ float alpha;
        /*0x14*/ float time;

        /*0x2890ce8*/ GradientAlphaKey(float alpha, float time);
    }

    enum GradientMode
    {
        Blend = 0,
        Fixed = 1,
    }

    class Gradient : System.IEquatable<UnityEngine.Gradient>
    {
        /*0x10*/ nint m_Ptr;

        static /*0x2890cf0*/ nint Init();
        /*0x2890d98*/ Gradient();
        /*0x2890d18*/ void Cleanup();
        /*0x2890d54*/ bool Internal_Equals(nint other);
        /*0x2890de0*/ void Finalize();
        /*0x2890e98*/ UnityEngine.Color Evaluate(float time);
        /*0x2890f54*/ UnityEngine.GradientColorKey[] get_colorKeys();
        /*0x2890f90*/ void set_colorKeys(UnityEngine.GradientColorKey[] value);
        /*0x2890fd4*/ UnityEngine.GradientAlphaKey[] get_alphaKeys();
        /*0x2891010*/ void set_alphaKeys(UnityEngine.GradientAlphaKey[] value);
        /*0x2891054*/ UnityEngine.GradientMode get_mode();
        /*0x2891090*/ void set_mode(UnityEngine.GradientMode value);
        /*0x28910d4*/ void SetKeys(UnityEngine.GradientColorKey[] colorKeys, UnityEngine.GradientAlphaKey[] alphaKeys);
        /*0x2891128*/ bool Equals(object o);
        /*0x28911f0*/ bool Equals(UnityEngine.Gradient other);
        /*0x28912b8*/ int GetHashCode();
        /*0x2890f00*/ void Evaluate_Injected(float time, ref UnityEngine.Color ret);
    }

    enum DisableBatchingType
    {
        False = 0,
        True = 1,
        WhenLODFading = 2,
    }

    class ComputeShader : UnityEngine.Object
    {
        /*0x289230c*/ ComputeShader();
        /*0x28912c4*/ int FindKernel(string name);
        /*0x2891308*/ bool HasKernel(string name);
        /*0x289134c*/ void SetFloat(int nameID, float val);
        /*0x28913a0*/ void SetInt(int nameID, int val);
        /*0x28913f4*/ void SetVector(int nameID, UnityEngine.Vector4 val);
        /*0x28914a4*/ void SetMatrix(int nameID, UnityEngine.Matrix4x4 val);
        /*0x289154c*/ void SetFloatArray(int nameID, float[] values);
        /*0x28915a0*/ void SetIntArray(int nameID, int[] values);
        /*0x28915f4*/ void SetVectorArray(int nameID, UnityEngine.Vector4[] values);
        /*0x2891648*/ void SetMatrixArray(int nameID, UnityEngine.Matrix4x4[] values);
        /*0x289169c*/ void SetTexture(int kernelIndex, int nameID, UnityEngine.Texture texture, int mipLevel);
        /*0x2891708*/ void SetRenderTexture(int kernelIndex, int nameID, UnityEngine.RenderTexture texture, int mipLevel, UnityEngine.Rendering.RenderTextureSubElement element);
        /*0x289177c*/ void SetTextureFromGlobal(int kernelIndex, int nameID, int globalTextureNameID);
        /*0x28917d8*/ void Internal_SetBuffer(int kernelIndex, int nameID, UnityEngine.ComputeBuffer buffer);
        /*0x2891834*/ void Internal_SetGraphicsBuffer(int kernelIndex, int nameID, UnityEngine.GraphicsBuffer buffer);
        /*0x2891890*/ void SetBuffer(int kernelIndex, int nameID, UnityEngine.ComputeBuffer buffer);
        /*0x28918ec*/ void SetBuffer(int kernelIndex, int nameID, UnityEngine.GraphicsBuffer buffer);
        /*0x2891948*/ void SetConstantComputeBuffer(int nameID, UnityEngine.ComputeBuffer buffer, int offset, int size);
        /*0x28919b4*/ void SetConstantGraphicsBuffer(int nameID, UnityEngine.GraphicsBuffer buffer, int offset, int size);
        /*0x2891a20*/ void GetKernelThreadGroupSizes(int kernelIndex, ref uint x, ref uint y, ref uint z);
        /*0x2891a8c*/ void Dispatch(int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ);
        /*0x2891af8*/ void Internal_DispatchIndirect(int kernelIndex, UnityEngine.ComputeBuffer argsBuffer, uint argsOffset);
        /*0x2891b54*/ void Internal_DispatchIndirectGraphicsBuffer(int kernelIndex, UnityEngine.GraphicsBuffer argsBuffer, uint argsOffset);
        /*0x2891bb0*/ UnityEngine.Rendering.LocalKeywordSpace get_keywordSpace();
        /*0x2891c40*/ void EnableKeyword(string keyword);
        /*0x2891c84*/ void DisableKeyword(string keyword);
        /*0x2891cc8*/ bool IsKeywordEnabled(string keyword);
        /*0x2891d0c*/ void EnableLocalKeyword(UnityEngine.Rendering.LocalKeyword keyword);
        /*0x2891d94*/ void DisableLocalKeyword(UnityEngine.Rendering.LocalKeyword keyword);
        /*0x2891e1c*/ void SetLocalKeyword(UnityEngine.Rendering.LocalKeyword keyword, bool value);
        /*0x2891ec4*/ bool IsLocalKeywordEnabled(UnityEngine.Rendering.LocalKeyword keyword);
        /*0x2891f4c*/ void EnableKeyword(ref UnityEngine.Rendering.LocalKeyword keyword);
        /*0x2891fa8*/ void DisableKeyword(ref UnityEngine.Rendering.LocalKeyword keyword);
        /*0x2892004*/ void SetKeyword(ref UnityEngine.Rendering.LocalKeyword keyword, bool value);
        /*0x2892068*/ bool IsKeywordEnabled(ref UnityEngine.Rendering.LocalKeyword keyword);
        /*0x28920c8*/ bool IsSupported(int kernelIndex);
        /*0x289210c*/ string[] GetShaderKeywords();
        /*0x2892148*/ void SetShaderKeywords(string[] names);
        /*0x289218c*/ string[] get_shaderKeywords();
        /*0x28921c8*/ void set_shaderKeywords(string[] value);
        /*0x289220c*/ UnityEngine.Rendering.LocalKeyword[] GetEnabledKeywords();
        /*0x2892248*/ void SetEnabledKeywords(UnityEngine.Rendering.LocalKeyword[] keywords);
        /*0x289228c*/ UnityEngine.Rendering.LocalKeyword[] get_enabledKeywords();
        /*0x28922c8*/ void set_enabledKeywords(UnityEngine.Rendering.LocalKeyword[] value);
        /*0x2892364*/ void SetFloat(string name, float val);
        /*0x28923c4*/ void SetInt(string name, int val);
        /*0x2892424*/ void SetVector(string name, UnityEngine.Vector4 val);
        /*0x2892478*/ void SetMatrix(string name, UnityEngine.Matrix4x4 val);
        /*0x28924ec*/ void SetVectorArray(string name, UnityEngine.Vector4[] values);
        /*0x289254c*/ void SetMatrixArray(string name, UnityEngine.Matrix4x4[] values);
        /*0x28925ac*/ void SetFloats(string name, float[] values);
        /*0x289260c*/ void SetFloats(int nameID, float[] values);
        /*0x2892660*/ void SetInts(string name, int[] values);
        /*0x28926c0*/ void SetInts(int nameID, int[] values);
        /*0x2892714*/ void SetBool(string name, bool val);
        /*0x2892780*/ void SetBool(int nameID, bool val);
        /*0x28927dc*/ void SetTexture(int kernelIndex, int nameID, UnityEngine.Texture texture);
        /*0x289283c*/ void SetTexture(int kernelIndex, string name, UnityEngine.Texture texture);
        /*0x28928a8*/ void SetTexture(int kernelIndex, string name, UnityEngine.Texture texture, int mipLevel);
        /*0x2892920*/ void SetTexture(int kernelIndex, int nameID, UnityEngine.RenderTexture texture, int mipLevel, UnityEngine.Rendering.RenderTextureSubElement element);
        /*0x2892994*/ void SetTexture(int kernelIndex, string name, UnityEngine.RenderTexture texture, int mipLevel, UnityEngine.Rendering.RenderTextureSubElement element);
        /*0x2892a14*/ void SetTextureFromGlobal(int kernelIndex, string name, string globalTextureName);
        /*0x2892a8c*/ void SetBuffer(int kernelIndex, string name, UnityEngine.ComputeBuffer buffer);
        /*0x2892af4*/ void SetBuffer(int kernelIndex, string name, UnityEngine.GraphicsBuffer buffer);
        /*0x2892b5c*/ void SetConstantBuffer(int nameID, UnityEngine.ComputeBuffer buffer, int offset, int size);
        /*0x2892bc8*/ void SetConstantBuffer(string name, UnityEngine.ComputeBuffer buffer, int offset, int size);
        /*0x2892c40*/ void SetConstantBuffer(int nameID, UnityEngine.GraphicsBuffer buffer, int offset, int size);
        /*0x2892cac*/ void SetConstantBuffer(string name, UnityEngine.GraphicsBuffer buffer, int offset, int size);
        /*0x2892d24*/ void DispatchIndirect(int kernelIndex, UnityEngine.ComputeBuffer argsBuffer, uint argsOffset);
        /*0x2892e4c*/ void DispatchIndirect(int kernelIndex, UnityEngine.ComputeBuffer argsBuffer);
        /*0x2892e54*/ void DispatchIndirect(int kernelIndex, UnityEngine.GraphicsBuffer argsBuffer, uint argsOffset);
        /*0x2892f7c*/ void DispatchIndirect(int kernelIndex, UnityEngine.GraphicsBuffer argsBuffer);
        /*0x2891450*/ void SetVector_Injected(int nameID, ref UnityEngine.Vector4 val);
        /*0x28914f8*/ void SetMatrix_Injected(int nameID, ref UnityEngine.Matrix4x4 val);
        /*0x2891bfc*/ void get_keywordSpace_Injected(ref UnityEngine.Rendering.LocalKeywordSpace ret);
        /*0x2891d50*/ void EnableLocalKeyword_Injected(ref UnityEngine.Rendering.LocalKeyword keyword);
        /*0x2891dd8*/ void DisableLocalKeyword_Injected(ref UnityEngine.Rendering.LocalKeyword keyword);
        /*0x2891e70*/ void SetLocalKeyword_Injected(ref UnityEngine.Rendering.LocalKeyword keyword, bool value);
        /*0x2891f08*/ bool IsLocalKeywordEnabled_Injected(ref UnityEngine.Rendering.LocalKeyword keyword);
    }

    class ShaderVariantCollection : UnityEngine.Object
    {
        static /*0x28931c4*/ void Internal_Create(UnityEngine.ShaderVariantCollection svc);
        /*0x2893200*/ ShaderVariantCollection();
        /*0x2892f84*/ int get_shaderCount();
        /*0x2892fc0*/ int get_variantCount();
        /*0x2892ffc*/ bool get_isWarmedUp();
        /*0x2893038*/ bool AddVariant(UnityEngine.Shader shader, UnityEngine.Rendering.PassType passType, string[] keywords);
        /*0x2893094*/ bool RemoveVariant(UnityEngine.Shader shader, UnityEngine.Rendering.PassType passType, string[] keywords);
        /*0x28930f0*/ bool ContainsVariant(UnityEngine.Shader shader, UnityEngine.Rendering.PassType passType, string[] keywords);
        /*0x289314c*/ void Clear();
        /*0x2893188*/ void WarmUp();
        /*0x2893280*/ bool Add(UnityEngine.ShaderVariantCollection.ShaderVariant variant);
        /*0x28932dc*/ bool Remove(UnityEngine.ShaderVariantCollection.ShaderVariant variant);
        /*0x2893338*/ bool Contains(UnityEngine.ShaderVariantCollection.ShaderVariant variant);

        struct ShaderVariant
        {
            /*0x10*/ UnityEngine.Shader shader;
            /*0x18*/ UnityEngine.Rendering.PassType passType;
            /*0x20*/ string[] keywords;
        }
    }

    class ComputeBuffer : System.IDisposable
    {
        /*0x10*/ nint m_Ptr;

        static /*0x28935b0*/ nint InitBuffer(int count, int stride, UnityEngine.ComputeBufferType type, UnityEngine.ComputeBufferMode usage);
        static /*0x2893574*/ void DestroyBuffer(UnityEngine.ComputeBuffer buf);
        static /*0x28937fc*/ bool IsValidBuffer(UnityEngine.ComputeBuffer buf);
        static /*0x2894448*/ void CopyCount(UnityEngine.ComputeBuffer src, UnityEngine.ComputeBuffer dst, int dstOffsetBytes);
        /*0x289360c*/ ComputeBuffer(int count, int stride);
        /*0x28937ec*/ ComputeBuffer(int count, int stride, UnityEngine.ComputeBufferType type);
        /*0x28937f4*/ ComputeBuffer(int count, int stride, UnityEngine.ComputeBufferType type, UnityEngine.ComputeBufferMode usage);
        /*0x2893618*/ ComputeBuffer(int count, int stride, UnityEngine.ComputeBufferType type, UnityEngine.ComputeBufferMode usage, int stackDepth);
        /*0x2893394*/ void Finalize();
        /*0x2893510*/ void Dispose();
        /*0x289342c*/ void Dispose(bool disposing);
        /*0x28937f8*/ void Release();
        /*0x2893838*/ bool IsValid();
        /*0x28938c8*/ int get_count();
        /*0x2893904*/ int get_stride();
        /*0x2893940*/ UnityEngine.ComputeBufferMode get_usage();
        /*0x289397c*/ void SetData(System.Array data);
        void SetData<T>(System.Collections.Generic.List<T> data);
        void SetData<T>(Unity.Collections.NativeArray<T> data);
        /*0x2893b58*/ void SetData(System.Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count);
        void SetData<T>(System.Collections.Generic.List<T> data, int managedBufferStartIndex, int computeBufferStartIndex, int count);
        void SetData<T>(Unity.Collections.NativeArray<T> data, int nativeBufferStartIndex, int computeBufferStartIndex, int count);
        /*0x2893dd4*/ void InternalSetNativeData(nint data, int nativeBufferStartIndex, int computeBufferStartIndex, int count, int elemSize);
        /*0x2893ae4*/ void InternalSetData(System.Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count, int elemSize);
        /*0x2893e48*/ void GetData(System.Array data);
        /*0x2894068*/ void GetData(System.Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count);
        /*0x2893ff4*/ void InternalGetData(System.Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count, int elemSize);
        /*0x28942e4*/ void* BeginBufferWrite(int offset, int size);
        Unity.Collections.NativeArray<T> BeginWrite<T>(int computeBufferStartIndex, int count);
        /*0x2894338*/ void EndBufferWrite(int bytesWritten);
        void EndWrite<T>(int countWritten);
        /*0x289437c*/ void set_name(string value);
        /*0x28943c0*/ void SetName(string name);
        /*0x2894404*/ void SetCounterValue(uint counterValue);
        /*0x289449c*/ nint GetNativeBufferPtr();
    }

    class SpookyHash
    {
        static int k_NumVars = 12;
        static int k_BlockSize = 96;
        static int k_BufferSize = 192;
        static ulong k_DeadBeefConst = 16045690984833335023;
        static /*0x0*/ bool AllowUnalignedRead;

        static /*0x2895a48*/ SpookyHash();
        static /*0x28944d8*/ bool AttemptDetectAllowUnalignedRead();
        static /*0x2894560*/ void Hash(void* message, ulong length, ulong* hash1, ulong* hash2);
        static /*0x2895118*/ void End(ulong* data, ref ulong h0, ref ulong h1, ref ulong h2, ref ulong h3, ref ulong h4, ref ulong h5, ref ulong h6, ref ulong h7, ref ulong h8, ref ulong h9, ref ulong h10, ref ulong h11);
        static /*0x2895384*/ void EndPartial(ref ulong h0, ref ulong h1, ref ulong h2, ref ulong h3, ref ulong h4, ref ulong h5, ref ulong h6, ref ulong h7, ref ulong h8, ref ulong h9, ref ulong h10, ref ulong h11);
        static /*0x289561c*/ void Rot64(ref ulong x, int k);
        static /*0x2894884*/ void Short(void* message, ulong length, ulong* hash1, ulong* hash2);
        static /*0x2895630*/ void ShortMix(ref ulong h0, ref ulong h1, ref ulong h2, ref ulong h3);
        static /*0x289584c*/ void ShortEnd(ref ulong h0, ref ulong h1, ref ulong h2, ref ulong h3);
        static /*0x2894c34*/ void Mix(ulong* data, ref ulong s0, ref ulong s1, ref ulong s2, ref ulong s3, ref ulong s4, ref ulong s5, ref ulong s6, ref ulong s7, ref ulong s8, ref ulong s9, ref ulong s10, ref ulong s11);
        static /*0x2895080*/ void memset(void* dst, int value, ulong numberOfBytes);

        struct U
        {
            /*0x10*/ byte* p8;
            /*0x10*/ uint* p32;
            /*0x10*/ ulong* p64;
            /*0x10*/ ulong i;

            /*0x2894c2c*/ U(ushort* p8);
        }
    }

    struct Hash128 : System.IComparable, System.IComparable<UnityEngine.Hash128>, System.IEquatable<UnityEngine.Hash128>
    {
        static ulong kConst = 16045690984833335023;
        /*0x10*/ ulong u64_0;
        /*0x18*/ ulong u64_1;

        static /*0x2895ba8*/ UnityEngine.Hash128 Parse(string hashString);
        static /*0x2895b68*/ string Hash128ToStringImpl(UnityEngine.Hash128 hash);
        static /*0x2895c7c*/ void ComputeFromString(string data, ref UnityEngine.Hash128 hash);
        static /*0x2895cc0*/ void ComputeFromPtr(nint data, int start, int count, int elemSize, ref UnityEngine.Hash128 hash);
        static /*0x2895d2c*/ void ComputeFromArray(System.Array data, int start, int count, int elemSize, ref UnityEngine.Hash128 hash);
        static /*0x2895d98*/ UnityEngine.Hash128 Compute(string data);
        static UnityEngine.Hash128 Compute<T>(Unity.Collections.NativeArray<T> data);
        static UnityEngine.Hash128 Compute<T>(Unity.Collections.NativeArray<T> data, int start, int count);
        static UnityEngine.Hash128 Compute<T>(T[] data);
        static UnityEngine.Hash128 Compute<T>(T[] data, int start, int count);
        static UnityEngine.Hash128 Compute<T>(System.Collections.Generic.List<T> data);
        static UnityEngine.Hash128 Compute<T>(System.Collections.Generic.List<T> data, int start, int count);
        static UnityEngine.Hash128 Compute<T>(ref T val);
        static /*0x2895dec*/ UnityEngine.Hash128 Compute(int val);
        static /*0x2895e48*/ UnityEngine.Hash128 Compute(float val);
        static /*0x2895eac*/ UnityEngine.Hash128 Compute(void* data, ulong size);
        static /*0x28960a8*/ bool op_Equality(UnityEngine.Hash128 hash1, UnityEngine.Hash128 hash2);
        static /*0x28961b4*/ bool op_Inequality(UnityEngine.Hash128 hash1, UnityEngine.Hash128 hash2);
        static /*0x2895b10*/ bool op_LessThan(UnityEngine.Hash128 x, UnityEngine.Hash128 y);
        static /*0x2895b28*/ bool op_GreaterThan(UnityEngine.Hash128 x, UnityEngine.Hash128 y);
        static /*0x28961cc*/ void ShortEnd(ref ulong h0, ref ulong h1, ref ulong h2, ref ulong h3);
        static /*0x2896360*/ void Rot64(ref ulong x, int k);
        static /*0x2895bfc*/ void Parse_Injected(string hashString, ref UnityEngine.Hash128 ret);
        static /*0x2895c40*/ string Hash128ToStringImpl_Injected(ref UnityEngine.Hash128 hash);
        /*0x2895a98*/ Hash128(uint u32_0, uint u32_1, uint u32_2, uint u32_3);
        /*0x2895ab0*/ Hash128(ulong u64_0, ulong u64_1);
        /*0x2895ab8*/ bool get_isValid();
        /*0x2895ad8*/ int CompareTo(UnityEngine.Hash128 rhs);
        /*0x2895b5c*/ string ToString();
        /*0x2895f10*/ void Append(string data);
        void Append<T>(Unity.Collections.NativeArray<T> data);
        void Append<T>(Unity.Collections.NativeArray<T> data, int start, int count);
        void Append<T>(T[] data);
        void Append<T>(T[] data, int start, int count);
        void Append<T>(System.Collections.Generic.List<T> data);
        void Append<T>(System.Collections.Generic.List<T> data, int start, int count);
        void Append<T>(ref T val);
        /*0x2895e44*/ void Append(int val);
        /*0x2895ea4*/ void Append(float val);
        /*0x2895fc8*/ void Append(void* data, ulong size);
        /*0x2896024*/ bool Equals(object obj);
        /*0x28960c0*/ bool Equals(UnityEngine.Hash128 obj);
        /*0x28960dc*/ int GetHashCode();
        /*0x2896110*/ int CompareTo(object obj);
        /*0x2895f54*/ void ShortHash4(uint data);
    }

    class HashUtilities
    {
        static /*0x2896374*/ void AppendHash(ref UnityEngine.Hash128 inHash, ref UnityEngine.Hash128 outHash);
        static /*0x28963c8*/ void QuantisedMatrixHash(ref UnityEngine.Matrix4x4 value, ref UnityEngine.Hash128 hash);
        static /*0x289649c*/ void QuantisedVectorHash(ref UnityEngine.Vector3 value, ref UnityEngine.Hash128 hash);
        static void ComputeHash128<T>(ref T value, ref UnityEngine.Hash128 hash);
        static /*0x28965a8*/ void ComputeHash128(byte[] value, ref UnityEngine.Hash128 hash);
    }

    class HashUnsafeUtilities
    {
        static /*0x28965d4*/ void ComputeHash128(void* data, ulong dataSize, ulong* hash1, ulong* hash2);
        static /*0x2896380*/ void ComputeHash128(void* data, ulong dataSize, UnityEngine.Hash128* hash);
    }

    class ResourceRequest : UnityEngine.AsyncOperation
    {
        /*0x20*/ string m_Path;
        /*0x28*/ System.Type m_Type;

        /*0x28966e0*/ ResourceRequest();
        /*0x2896650*/ UnityEngine.Object GetResult();
        /*0x28966d4*/ UnityEngine.Object get_asset();
    }

    class ResourcesAPIInternal
    {
        static /*0x28966e8*/ UnityEngine.Object[] FindObjectsOfTypeAll(System.Type type);
        static /*0x2896724*/ UnityEngine.Shader FindShaderByName(string name);
        static /*0x2896760*/ UnityEngine.Object Load(string path, System.Type systemTypeInstance);
        static /*0x28967a4*/ UnityEngine.Object[] LoadAll(string path, System.Type systemTypeInstance);
        static /*0x28967e8*/ UnityEngine.ResourceRequest LoadAsyncInternal(string path, System.Type type);
        static /*0x289682c*/ void UnloadAsset(UnityEngine.Object assetToUnload);
    }

    class ResourcesAPI
    {
        static /*0x0*/ UnityEngine.ResourcesAPI s_DefaultAPI;
        static /*0x8*/ UnityEngine.ResourcesAPI <overrideAPI>k__BackingField;

        static /*0x2896b5c*/ ResourcesAPI();
        static /*0x2896868*/ UnityEngine.ResourcesAPI get_ActiveAPI();
        static /*0x2896910*/ UnityEngine.ResourcesAPI get_overrideAPI();
        static /*0x2896968*/ void set_overrideAPI(UnityEngine.ResourcesAPI value);
        /*0x28969c4*/ ResourcesAPI();
        /*0x28969cc*/ UnityEngine.Object[] FindObjectsOfTypeAll(System.Type systemTypeInstance);
        /*0x2896a08*/ UnityEngine.Shader FindShaderByName(string name);
        /*0x2896a44*/ UnityEngine.Object Load(string path, System.Type systemTypeInstance);
        /*0x2896a88*/ UnityEngine.Object[] LoadAll(string path, System.Type systemTypeInstance);
        /*0x2896acc*/ UnityEngine.ResourceRequest LoadAsync(string path, System.Type systemTypeInstance);
        /*0x2896b20*/ void UnloadAsset(UnityEngine.Object assetToUnload);
    }

    class Resources
    {
        static T[] ConvertObjects<T>(UnityEngine.Object[] rawObjects);
        static /*0x2896bc0*/ UnityEngine.Object[] FindObjectsOfTypeAll(System.Type type);
        static T[] FindObjectsOfTypeAll<T>();
        static /*0x2896c28*/ UnityEngine.Object Load(string path);
        static T Load<T>(string path);
        static /*0x289665c*/ UnityEngine.Object Load(string path, System.Type systemTypeInstance);
        static /*0x2896cac*/ UnityEngine.ResourceRequest LoadAsync(string path);
        static UnityEngine.ResourceRequest LoadAsync<T>(string path);
        static /*0x2896d30*/ UnityEngine.ResourceRequest LoadAsync(string path, System.Type type);
        static /*0x2896da8*/ UnityEngine.Object[] LoadAll(string path, System.Type systemTypeInstance);
        static /*0x2896e20*/ UnityEngine.Object[] LoadAll(string path);
        static T[] LoadAll<T>(string path);
        static /*0x2896ea4*/ UnityEngine.Object GetBuiltinResource(System.Type type, string path);
        static T GetBuiltinResource<T>(string path);
        static /*0x2896ee8*/ void UnloadAsset(UnityEngine.Object assetToUnload);
        static /*0x2896f50*/ void UnloadAssetImplResourceManager(UnityEngine.Object assetToUnload);
        static /*0x2896f8c*/ UnityEngine.AsyncOperation UnloadUnusedAssets();
        static /*0x2896fb4*/ UnityEngine.Object InstanceIDToObject(int instanceID);
        static /*0x2896ff0*/ void InstanceIDToObjectList(nint instanceIDs, int instanceCount, System.Collections.Generic.List<UnityEngine.Object> objects);
        static /*0x2897044*/ void InstanceIDToObjectList(Unity.Collections.NativeArray<int> instanceIDs, System.Collections.Generic.List<UnityEngine.Object> objects);
        /*0x28971e0*/ Resources();
    }

    class IconAttribute : System.Attribute
    {
        /*0x10*/ string m_IconPath;

        /*0x28971f0*/ IconAttribute();
        /*0x28971f8*/ IconAttribute(string path);
        /*0x28971e8*/ string get_path();
    }

    class iPhoneSettings
    {
        static /*0x2897220*/ bool get_verticalOrientation();
        static /*0x2897228*/ bool get_screenCanDarken();
        static /*0x2897230*/ void StartLocationServiceUpdates(float desiredAccuracyInMeters, float updateDistanceInMeters);
        static /*0x2897234*/ void StartLocationServiceUpdates(float desiredAccuracyInMeters);
        static /*0x2897238*/ void StartLocationServiceUpdates();
        static /*0x289723c*/ void StopLocationServiceUpdates();
        static /*0x2897240*/ bool get_locationServiceEnabledByUser();
        /*0x2897248*/ iPhoneSettings();
    }

    class ScrollWaitDefinitions
    {
        static int firstWait = 250;
        static int regularWait = 30;
    }

    struct SortingLayer
    {
        /*0x10*/ int m_Id;

        static /*0x2897348*/ UnityEngine.SortingLayer[] get_layers();
        static /*0x2897408*/ int[] GetSortingLayerIDsInternal();
        static /*0x289730c*/ int GetLayerValueFromID(int id);
        static /*0x2897430*/ int GetLayerValueFromName(string name);
        static /*0x289746c*/ int NameToID(string name);
        static /*0x2897294*/ string IDToName(int id);
        static /*0x28974a8*/ bool IsValid(int id);
        /*0x2897250*/ int get_id();
        /*0x2897258*/ string get_name();
        /*0x28972d0*/ int get_value();
    }

    class Gizmos
    {
        static /*0x28974e4*/ void DrawRay(UnityEngine.Ray r);
        static /*0x28975ac*/ void DrawRay(UnityEngine.Vector3 from, UnityEngine.Vector3 direction);
        static /*0x28975bc*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
        static /*0x2897698*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position);
        static /*0x289776c*/ void DrawMesh(UnityEngine.Mesh mesh);
        static /*0x2897680*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale);
        static /*0x28978ec*/ void DrawMesh(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
        static /*0x28979b4*/ void DrawMesh(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Vector3 position);
        static /*0x2897a8c*/ void DrawMesh(UnityEngine.Mesh mesh, int submeshIndex);
        static /*0x2897b9c*/ void DrawWireMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
        static /*0x2897c78*/ void DrawWireMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position);
        static /*0x2897d4c*/ void DrawWireMesh(UnityEngine.Mesh mesh);
        static /*0x2897c60*/ void DrawWireMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale);
        static /*0x2897ecc*/ void DrawWireMesh(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
        static /*0x2897f94*/ void DrawWireMesh(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Vector3 position);
        static /*0x289806c*/ void DrawWireMesh(UnityEngine.Mesh mesh, int submeshIndex);
        static /*0x289817c*/ void DrawIcon(UnityEngine.Vector3 center, string name);
        static /*0x28981ac*/ void DrawGUITexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture);
        static /*0x28981c4*/ void DrawGUITexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Material mat);
        static /*0x2898268*/ void DrawGUITexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder);
        static /*0x289755c*/ void DrawLine(UnityEngine.Vector3 from, UnityEngine.Vector3 to);
        static /*0x28982b4*/ void DrawWireSphere(UnityEngine.Vector3 center, float radius);
        static /*0x2898354*/ void DrawSphere(UnityEngine.Vector3 center, float radius);
        static /*0x28983f4*/ void DrawWireCube(UnityEngine.Vector3 center, UnityEngine.Vector3 size);
        static /*0x2898488*/ void DrawCube(UnityEngine.Vector3 center, UnityEngine.Vector3 size);
        static /*0x2897870*/ void DrawMesh(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale);
        static /*0x2897e50*/ void DrawWireMesh(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale);
        static /*0x2898194*/ void DrawIcon(UnityEngine.Vector3 center, string name, bool allowScaling);
        static /*0x28985f4*/ void DrawIcon(UnityEngine.Vector3 center, string name, bool allowScaling, UnityEngine.Color tint);
        static /*0x28981dc*/ void DrawGUITexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Material mat);
        static /*0x289873c*/ UnityEngine.Color get_color();
        static /*0x28987c0*/ void set_color(UnityEngine.Color value);
        static /*0x2898840*/ UnityEngine.Matrix4x4 get_matrix();
        static /*0x28988e0*/ void set_matrix(UnityEngine.Matrix4x4 value);
        static /*0x2898958*/ UnityEngine.Texture get_exposure();
        static /*0x2898980*/ void set_exposure(UnityEngine.Texture value);
        static /*0x28989bc*/ float get_probeSize();
        static /*0x28989e4*/ void DrawFrustum(UnityEngine.Vector3 center, float fov, float maxRange, float minRange, float aspect);
        static /*0x2898270*/ void DrawLine_Injected(ref UnityEngine.Vector3 from, ref UnityEngine.Vector3 to);
        static /*0x2898308*/ void DrawWireSphere_Injected(ref UnityEngine.Vector3 center, float radius);
        static /*0x28983a8*/ void DrawSphere_Injected(ref UnityEngine.Vector3 center, float radius);
        static /*0x2898444*/ void DrawWireCube_Injected(ref UnityEngine.Vector3 center, ref UnityEngine.Vector3 size);
        static /*0x28984d8*/ void DrawCube_Injected(ref UnityEngine.Vector3 center, ref UnityEngine.Vector3 size);
        static /*0x289851c*/ void DrawMesh_Injected(UnityEngine.Mesh mesh, int submeshIndex, ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation, ref UnityEngine.Vector3 scale);
        static /*0x2898588*/ void DrawWireMesh_Injected(UnityEngine.Mesh mesh, int submeshIndex, ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation, ref UnityEngine.Vector3 scale);
        static /*0x289865c*/ void DrawIcon_Injected(ref UnityEngine.Vector3 center, string name, bool allowScaling, ref UnityEngine.Color tint);
        static /*0x28986b8*/ void DrawGUITexture_Injected(ref UnityEngine.Rect screenRect, UnityEngine.Texture texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine.Material mat);
        static /*0x2898784*/ void get_color_Injected(ref UnityEngine.Color ret);
        static /*0x2898804*/ void set_color_Injected(ref UnityEngine.Color value);
        static /*0x28988a4*/ void get_matrix_Injected(ref UnityEngine.Matrix4x4 ret);
        static /*0x289891c*/ void set_matrix_Injected(ref UnityEngine.Matrix4x4 value);
        static /*0x2898a58*/ void DrawFrustum_Injected(ref UnityEngine.Vector3 center, float fov, float maxRange, float minRange, float aspect);
        /*0x2898ac4*/ Gizmos();
    }

    class Application
    {
        static /*0x0*/ UnityEngine.Application.LowMemoryCallback lowMemory;
        static /*0x8*/ UnityEngine.Application.LogCallback s_LogCallbackHandler;
        static /*0x10*/ UnityEngine.Application.LogCallback s_LogCallbackHandlerThreaded;
        static /*0x18*/ UnityEngine.Application.AdvertisingIdentifierCallback OnAdvertisingIdentifierCallback;
        static /*0x20*/ System.Action<bool> focusChanged;
        static /*0x28*/ System.Action<string> deepLinkActivated;
        static /*0x30*/ System.Func<bool> wantsToQuit;
        static /*0x38*/ System.Action quitting;
        static /*0x40*/ System.Action unloading;
        static /*0x48*/ UnityEngine.Application.LogCallback s_RegisterLogCallbackDeprecated;

        static /*0x2898acc*/ void Quit(int exitCode);
        static /*0x2898b08*/ void Quit();
        static /*0x2898b38*/ void CancelQuit();
        static /*0x2898b60*/ void Unload();
        static /*0x2898b88*/ bool get_isLoadingLevel();
        static /*0x2898bb0*/ float GetStreamProgressForLevel(int levelIndex);
        static /*0x2898c20*/ float GetStreamProgressForLevel(string levelName);
        static /*0x2898c28*/ int get_streamedBytes();
        static /*0x2898c30*/ bool get_webSecurityEnabled();
        static /*0x2898c38*/ bool CanStreamedLevelBeLoaded(int levelIndex);
        static /*0x2898ca4*/ bool CanStreamedLevelBeLoaded(string levelName);
        static /*0x2898ce0*/ bool get_isPlaying();
        static /*0x2898d08*/ bool IsPlaying(UnityEngine.Object obj);
        static /*0x2898d44*/ bool get_isFocused();
        static /*0x2898d6c*/ string[] GetBuildTags();
        static /*0x2898d94*/ void SetBuildTags(string[] buildTags);
        static /*0x2898dd0*/ string get_buildGUID();
        static /*0x2898df8*/ bool get_runInBackground();
        static /*0x2898e20*/ void set_runInBackground(bool value);
        static /*0x2898e5c*/ bool HasProLicense();
        static /*0x2898e84*/ bool get_isBatchMode();
        static /*0x2898eac*/ bool get_isTestRun();
        static /*0x2898ed4*/ bool get_isHumanControllingUs();
        static /*0x2898efc*/ bool HasARGV(string name);
        static /*0x2898f38*/ string GetValueForARGV(string name);
        static /*0x2898f74*/ string get_dataPath();
        static /*0x2898f9c*/ string get_streamingAssetsPath();
        static /*0x2898fc4*/ string get_persistentDataPath();
        static /*0x2898fec*/ string get_temporaryCachePath();
        static /*0x2899014*/ string get_absoluteURL();
        static /*0x289903c*/ void ExternalEval(string script);
        static /*0x28990e0*/ void Internal_ExternalCall(string script);
        static /*0x289911c*/ string get_unityVersion();
        static /*0x2899144*/ int get_unityVersionVer();
        static /*0x289916c*/ int get_unityVersionMaj();
        static /*0x2899194*/ int get_unityVersionMin();
        static /*0x28991bc*/ string get_version();
        static /*0x28991e4*/ string get_installerName();
        static /*0x289920c*/ string get_identifier();
        static /*0x2899234*/ UnityEngine.ApplicationInstallMode get_installMode();
        static /*0x289925c*/ UnityEngine.ApplicationSandboxType get_sandboxType();
        static /*0x2899284*/ string get_productName();
        static /*0x28992ac*/ string get_companyName();
        static /*0x28992d4*/ string get_cloudProjectId();
        static /*0x28992fc*/ bool RequestAdvertisingIdentifierAsync(UnityEngine.Application.AdvertisingIdentifierCallback delegateMethod);
        static /*0x2899338*/ void OpenURL(string url);
        static /*0x2899374*/ void ForceCrash(int mode);
        static /*0x289937c*/ int get_targetFrameRate();
        static /*0x28993a4*/ void set_targetFrameRate(int value);
        static /*0x28993e0*/ void SetLogCallbackDefined(bool defined);
        static /*0x289941c*/ UnityEngine.StackTraceLogType get_stackTraceLogType();
        static /*0x2899444*/ void set_stackTraceLogType(UnityEngine.StackTraceLogType value);
        static /*0x2899480*/ UnityEngine.StackTraceLogType GetStackTraceLogType(UnityEngine.LogType logType);
        static /*0x28994bc*/ void SetStackTraceLogType(UnityEngine.LogType logType, UnityEngine.StackTraceLogType stackTraceType);
        static /*0x2899500*/ string get_consoleLogPath();
        static /*0x2899528*/ UnityEngine.ThreadPriority get_backgroundLoadingPriority();
        static /*0x2899550*/ void set_backgroundLoadingPriority(UnityEngine.ThreadPriority value);
        static /*0x289958c*/ bool get_genuine();
        static /*0x28995b4*/ bool get_genuineCheckAvailable();
        static /*0x28995dc*/ UnityEngine.AsyncOperation RequestUserAuthorization(UnityEngine.UserAuthorization mode);
        static /*0x2899618*/ bool HasUserAuthorization(UnityEngine.UserAuthorization mode);
        static /*0x2899654*/ bool get_submitAnalytics();
        static /*0x289967c*/ bool get_isShowingSplashScreen();
        static /*0x2899698*/ UnityEngine.RuntimePlatform get_platform();
        static /*0x28996c0*/ bool get_isMobilePlatform();
        static /*0x289972c*/ bool get_isConsolePlatform();
        static /*0x289979c*/ UnityEngine.SystemLanguage get_systemLanguage();
        static /*0x28997c4*/ UnityEngine.NetworkReachability get_internetReachability();
        static /*0x28997ec*/ void add_lowMemory(UnityEngine.Application.LowMemoryCallback value);
        static /*0x28998a4*/ void remove_lowMemory(UnityEngine.Application.LowMemoryCallback value);
        static /*0x289995c*/ void CallLowMemory();
        static /*0x28999c0*/ void add_logMessageReceived(UnityEngine.Application.LogCallback value);
        static /*0x2899a8c*/ void remove_logMessageReceived(UnityEngine.Application.LogCallback value);
        static /*0x2899b34*/ void add_logMessageReceivedThreaded(UnityEngine.Application.LogCallback value);
        static /*0x2899c00*/ void remove_logMessageReceivedThreaded(UnityEngine.Application.LogCallback value);
        static /*0x2899ca8*/ void CallLogCallback(string logString, string stackTrace, UnityEngine.LogType type, bool invokedOnMainThread);
        static /*0x2899d64*/ void InvokeOnAdvertisingIdentifierCallback(string advertisingId, bool trackingEnabled);
        static /*0x2899e04*/ string ObjectToJSString(object o);
        static /*0x289a474*/ void ExternalCall(string functionName, object[] args);
        static /*0x289a4b4*/ string BuildInvocationForArguments(string functionName, object[] args);
        static /*0x289a5e8*/ bool get_isPlayer();
        static /*0x289a5f8*/ void DontDestroyOnLoad(UnityEngine.Object o);
        static /*0x289a680*/ void CaptureScreenshot(string filename, int superSize);
        static /*0x289a6d0*/ void CaptureScreenshot(string filename);
        static /*0x289a720*/ void add_onBeforeRender(UnityEngine.Events.UnityAction value);
        static /*0x289a778*/ void remove_onBeforeRender(UnityEngine.Events.UnityAction value);
        static /*0x289a7d0*/ void add_focusChanged(System.Action<bool> value);
        static /*0x289a8a0*/ void remove_focusChanged(System.Action<bool> value);
        static /*0x289a970*/ void add_deepLinkActivated(System.Action<string> value);
        static /*0x289aa40*/ void remove_deepLinkActivated(System.Action<string> value);
        static /*0x289ab10*/ void add_wantsToQuit(System.Func<bool> value);
        static /*0x289abe0*/ void remove_wantsToQuit(System.Func<bool> value);
        static /*0x289acb0*/ void add_quitting(System.Action value);
        static /*0x289ad6c*/ void remove_quitting(System.Action value);
        static /*0x289ae28*/ void add_unloading(System.Action value);
        static /*0x289aee4*/ void remove_unloading(System.Action value);
        static /*0x289afa0*/ bool Internal_ApplicationWantsToQuit();
        static /*0x289b164*/ void Internal_ApplicationQuit();
        static /*0x289b1c8*/ void Internal_ApplicationUnload();
        static /*0x289b22c*/ void InvokeOnBeforeRender();
        static /*0x289b27c*/ void InvokeFocusChanged(bool focus);
        static /*0x289b2e8*/ void InvokeDeepLinkActivated(string url);
        static /*0x289b354*/ void RegisterLogCallback(UnityEngine.Application.LogCallback handler);
        static /*0x289b428*/ void RegisterLogCallbackThreaded(UnityEngine.Application.LogCallback handler);
        static /*0x289b35c*/ void RegisterLogCallback(UnityEngine.Application.LogCallback handler, bool threaded);
        static /*0x289b430*/ int get_levelCount();
        static /*0x289b480*/ int get_loadedLevel();
        static /*0x289b4e8*/ string get_loadedLevelName();
        static /*0x289b550*/ void LoadLevel(int index);
        static /*0x289b5ac*/ void LoadLevel(string name);
        static /*0x289b608*/ void LoadLevelAdditive(int index);
        static /*0x289b664*/ void LoadLevelAdditive(string name);
        static /*0x289b6c0*/ UnityEngine.AsyncOperation LoadLevelAsync(int index);
        static /*0x289b71c*/ UnityEngine.AsyncOperation LoadLevelAsync(string levelName);
        static /*0x289b778*/ UnityEngine.AsyncOperation LoadLevelAdditiveAsync(int index);
        static /*0x289b7d4*/ UnityEngine.AsyncOperation LoadLevelAdditiveAsync(string levelName);
        static /*0x289b830*/ bool UnloadLevel(int index);
        static /*0x289b888*/ bool UnloadLevel(string scenePath);
        static /*0x289a5f0*/ bool get_isEditor();
        /*0x289b8e0*/ Application();

        class AdvertisingIdentifierCallback : System.MulticastDelegate
        {
            /*0x289b8e8*/ AdvertisingIdentifierCallback(object object, nint method);
            /*0x289b9c0*/ void Invoke(string advertisingId, bool trackingEnabled, string errorMsg);
        }

        class LowMemoryCallback : System.MulticastDelegate
        {
            /*0x289b9d8*/ LowMemoryCallback(object object, nint method);
            /*0x289ba94*/ void Invoke();
        }

        class LogCallback : System.MulticastDelegate
        {
            /*0x289baa8*/ LogCallback(object object, nint method);
            /*0x289bb80*/ void Invoke(string condition, string stackTrace, UnityEngine.LogType type);
        }
    }

    enum StackTraceLogType
    {
        None = 0,
        ScriptOnly = 1,
        Full = 2,
    }

    enum NetworkReachability
    {
        NotReachable = 0,
        ReachableViaCarrierDataNetwork = 1,
        ReachableViaLocalAreaNetwork = 2,
    }

    enum UserAuthorization
    {
        WebCam = 1,
        Microphone = 2,
    }

    enum ApplicationInstallMode
    {
        Unknown = 0,
        Store = 1,
        DeveloperBuild = 2,
        Adhoc = 3,
        Enterprise = 4,
        Editor = 5,
    }

    enum ApplicationSandboxType
    {
        Unknown = 0,
        NotSandboxed = 1,
        Sandboxed = 2,
        SandboxBroken = 3,
    }

    class LowerResBlitTexture : UnityEngine.Object
    {
        /*0x289bb98*/ LowerResBlitTexture();
        /*0x289bb94*/ void LowerResBlitTextureDontStripMe();
    }

    class PreloadData : UnityEngine.Object
    {
        /*0x289bbf4*/ PreloadData();
        /*0x289bbf0*/ void PreloadDataDontStripMe();
    }

    class FrameDebugger
    {
        static /*0x289bc4c*/ bool get_enabled();
        static /*0x289bca8*/ bool IsLocalEnabled();
        static /*0x289bcd0*/ bool IsRemoteEnabled();
    }

    enum RotationOrder
    {
        OrderXYZ = 0,
        OrderXZY = 1,
        OrderYZX = 2,
        OrderYXZ = 3,
        OrderZXY = 4,
        OrderZYX = 5,
    }

    class Transform : UnityEngine.Component, System.Collections.IEnumerable
    {
        static /*0x289ded4*/ UnityEngine.Transform FindRelativeTransformWithPath(UnityEngine.Transform transform, string path, bool isActiveOnly);
        /*0x289bcf8*/ Transform();
        /*0x289bd00*/ UnityEngine.Vector3 get_position();
        /*0x289bda0*/ void set_position(UnityEngine.Vector3 value);
        /*0x289be38*/ UnityEngine.Vector3 get_localPosition();
        /*0x289bed8*/ void set_localPosition(UnityEngine.Vector3 value);
        /*0x289bf70*/ UnityEngine.Vector3 GetLocalEulerAngles(UnityEngine.RotationOrder order);
        /*0x289c028*/ void SetLocalEulerAngles(UnityEngine.Vector3 euler, UnityEngine.RotationOrder order);
        /*0x289c0d8*/ void SetLocalEulerHint(UnityEngine.Vector3 euler);
        /*0x289c170*/ UnityEngine.Vector3 get_eulerAngles();
        /*0x289c1f0*/ void set_eulerAngles(UnityEngine.Vector3 value);
        /*0x289c270*/ UnityEngine.Vector3 get_localEulerAngles();
        /*0x289c2f0*/ void set_localEulerAngles(UnityEngine.Vector3 value);
        /*0x289c370*/ UnityEngine.Vector3 get_right();
        /*0x289c3e8*/ void set_right(UnityEngine.Vector3 value);
        /*0x289c468*/ UnityEngine.Vector3 get_up();
        /*0x289c4e0*/ void set_up(UnityEngine.Vector3 value);
        /*0x289c560*/ UnityEngine.Vector3 get_forward();
        /*0x289c5d8*/ void set_forward(UnityEngine.Vector3 value);
        /*0x289c198*/ UnityEngine.Quaternion get_rotation();
        /*0x289c21c*/ void set_rotation(UnityEngine.Quaternion value);
        /*0x289c298*/ UnityEngine.Quaternion get_localRotation();
        /*0x289c31c*/ void set_localRotation(UnityEngine.Quaternion value);
        /*0x289c700*/ UnityEngine.RotationOrder get_rotationOrder();
        /*0x289c778*/ void set_rotationOrder(UnityEngine.RotationOrder value);
        /*0x289c73c*/ int GetRotationOrderInternal();
        /*0x289c7bc*/ void SetRotationOrderInternal(UnityEngine.RotationOrder rotationOrder);
        /*0x289c800*/ UnityEngine.Vector3 get_localScale();
        /*0x289c8a0*/ void set_localScale(UnityEngine.Vector3 value);
        /*0x289c938*/ UnityEngine.Transform get_parent();
        /*0x289c9b0*/ void set_parent(UnityEngine.Transform value);
        /*0x289c974*/ UnityEngine.Transform get_parentInternal();
        /*0x289ca7c*/ void set_parentInternal(UnityEngine.Transform value);
        /*0x289cac4*/ UnityEngine.Transform GetParent();
        /*0x289cb00*/ void SetParent(UnityEngine.Transform p);
        /*0x289cb48*/ void SetParent(UnityEngine.Transform parent, bool worldPositionStays);
        /*0x289cb9c*/ UnityEngine.Matrix4x4 get_worldToLocalMatrix();
        /*0x289cc4c*/ UnityEngine.Matrix4x4 get_localToWorldMatrix();
        /*0x289ccfc*/ void SetPositionAndRotation(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
        /*0x289cdb0*/ void SetLocalPositionAndRotation(UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation);
        /*0x289ce64*/ void GetPositionAndRotation(ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation);
        /*0x289ceb8*/ void GetLocalPositionAndRotation(ref UnityEngine.Vector3 localPosition, ref UnityEngine.Quaternion localRotation);
        /*0x289cf0c*/ void Translate(UnityEngine.Vector3 translation, UnityEngine.Space relativeTo);
        /*0x289cffc*/ void Translate(UnityEngine.Vector3 translation);
        /*0x289d004*/ void Translate(float x, float y, float z, UnityEngine.Space relativeTo);
        /*0x289d008*/ void Translate(float x, float y, float z);
        /*0x289d010*/ void Translate(UnityEngine.Vector3 translation, UnityEngine.Transform relativeTo);
        /*0x289d0f4*/ void Translate(float x, float y, float z, UnityEngine.Transform relativeTo);
        /*0x289d0f8*/ void Rotate(UnityEngine.Vector3 eulers, UnityEngine.Space relativeTo);
        /*0x289d378*/ void Rotate(UnityEngine.Vector3 eulers);
        /*0x289d380*/ void Rotate(float xAngle, float yAngle, float zAngle, UnityEngine.Space relativeTo);
        /*0x289d384*/ void Rotate(float xAngle, float yAngle, float zAngle);
        /*0x289d38c*/ void RotateAroundInternal(UnityEngine.Vector3 axis, float angle);
        /*0x289d444*/ void Rotate(UnityEngine.Vector3 axis, float angle, UnityEngine.Space relativeTo);
        /*0x289d4d0*/ void Rotate(UnityEngine.Vector3 axis, float angle);
        /*0x289d4d8*/ void RotateAround(UnityEngine.Vector3 point, UnityEngine.Vector3 axis, float angle);
        /*0x289d594*/ void LookAt(UnityEngine.Transform target, UnityEngine.Vector3 worldUp);
        /*0x289d658*/ void LookAt(UnityEngine.Transform target);
        /*0x289d654*/ void LookAt(UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 worldUp);
        /*0x289d7b0*/ void LookAt(UnityEngine.Vector3 worldPosition);
        /*0x289d750*/ void Internal_LookAt(UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 worldUp);
        /*0x289cf94*/ UnityEngine.Vector3 TransformDirection(UnityEngine.Vector3 direction);
        /*0x289d8d4*/ UnityEngine.Vector3 TransformDirection(float x, float y, float z);
        /*0x289d8d8*/ UnityEngine.Vector3 InverseTransformDirection(UnityEngine.Vector3 direction);
        /*0x289d994*/ UnityEngine.Vector3 InverseTransformDirection(float x, float y, float z);
        /*0x289d998*/ UnityEngine.Vector3 TransformVector(UnityEngine.Vector3 vector);
        /*0x289da54*/ UnityEngine.Vector3 TransformVector(float x, float y, float z);
        /*0x289da58*/ UnityEngine.Vector3 InverseTransformVector(UnityEngine.Vector3 vector);
        /*0x289db14*/ UnityEngine.Vector3 InverseTransformVector(float x, float y, float z);
        /*0x289db18*/ UnityEngine.Vector3 TransformPoint(UnityEngine.Vector3 position);
        /*0x289dbd4*/ UnityEngine.Vector3 TransformPoint(float x, float y, float z);
        /*0x289dbd8*/ UnityEngine.Vector3 InverseTransformPoint(UnityEngine.Vector3 position);
        /*0x289dc94*/ UnityEngine.Vector3 InverseTransformPoint(float x, float y, float z);
        /*0x289dc98*/ UnityEngine.Transform get_root();
        /*0x289dcd4*/ UnityEngine.Transform GetRoot();
        /*0x289dd10*/ int get_childCount();
        /*0x289dd4c*/ void DetachChildren();
        /*0x289dd88*/ void SetAsFirstSibling();
        /*0x289ddc4*/ void SetAsLastSibling();
        /*0x289de00*/ void SetSiblingIndex(int index);
        /*0x289de44*/ void MoveAfterSibling(UnityEngine.Transform transform, bool notifyEditorAndMarkDirty);
        /*0x289de98*/ int GetSiblingIndex();
        /*0x289df28*/ UnityEngine.Transform Find(string n);
        /*0x289dfc0*/ void SendTransformChangedScale();
        /*0x289dffc*/ UnityEngine.Vector3 get_lossyScale();
        /*0x289e09c*/ bool IsChildOf(UnityEngine.Transform parent);
        /*0x289e0e0*/ bool get_hasChanged();
        /*0x289e11c*/ void set_hasChanged(bool value);
        /*0x289e160*/ UnityEngine.Transform FindChild(string n);
        /*0x289e164*/ System.Collections.IEnumerator GetEnumerator();
        /*0x289e200*/ void RotateAround(UnityEngine.Vector3 axis, float angle);
        /*0x289e2b8*/ void RotateAroundLocal(UnityEngine.Vector3 axis, float angle);
        /*0x289e370*/ UnityEngine.Transform GetChild(int index);
        /*0x289e3b4*/ int GetChildCount();
        /*0x289e3f0*/ int get_hierarchyCapacity();
        /*0x289e468*/ void set_hierarchyCapacity(int value);
        /*0x289e42c*/ int internal_getHierarchyCapacity();
        /*0x289e4ac*/ void internal_setHierarchyCapacity(int value);
        /*0x289e4f0*/ int get_hierarchyCount();
        /*0x289e52c*/ int internal_getHierarchyCount();
        /*0x289e568*/ bool IsNonUniformScaleTransform();
        /*0x289e5a4*/ bool get_constrainProportionsScale();
        /*0x289e61c*/ void set_constrainProportionsScale(bool value);
        /*0x289e660*/ void SetConstrainProportionsScale(bool isLinked);
        /*0x289e5e0*/ bool IsConstrainProportionsScale();
        /*0x289bd5c*/ void get_position_Injected(ref UnityEngine.Vector3 ret);
        /*0x289bdf4*/ void set_position_Injected(ref UnityEngine.Vector3 value);
        /*0x289be94*/ void get_localPosition_Injected(ref UnityEngine.Vector3 ret);
        /*0x289bf2c*/ void set_localPosition_Injected(ref UnityEngine.Vector3 value);
        /*0x289bfd4*/ void GetLocalEulerAngles_Injected(UnityEngine.RotationOrder order, ref UnityEngine.Vector3 ret);
        /*0x289c084*/ void SetLocalEulerAngles_Injected(ref UnityEngine.Vector3 euler, UnityEngine.RotationOrder order);
        /*0x289c12c*/ void SetLocalEulerHint_Injected(ref UnityEngine.Vector3 euler);
        /*0x289c5f0*/ void get_rotation_Injected(ref UnityEngine.Quaternion ret);
        /*0x289c634*/ void set_rotation_Injected(ref UnityEngine.Quaternion value);
        /*0x289c678*/ void get_localRotation_Injected(ref UnityEngine.Quaternion ret);
        /*0x289c6bc*/ void set_localRotation_Injected(ref UnityEngine.Quaternion value);
        /*0x289c85c*/ void get_localScale_Injected(ref UnityEngine.Vector3 ret);
        /*0x289c8f4*/ void set_localScale_Injected(ref UnityEngine.Vector3 value);
        /*0x289cc08*/ void get_worldToLocalMatrix_Injected(ref UnityEngine.Matrix4x4 ret);
        /*0x289ccb8*/ void get_localToWorldMatrix_Injected(ref UnityEngine.Matrix4x4 ret);
        /*0x289cd5c*/ void SetPositionAndRotation_Injected(ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation);
        /*0x289ce10*/ void SetLocalPositionAndRotation_Injected(ref UnityEngine.Vector3 localPosition, ref UnityEngine.Quaternion localRotation);
        /*0x289d3f0*/ void RotateAroundInternal_Injected(ref UnityEngine.Vector3 axis, float angle);
        /*0x289d82c*/ void Internal_LookAt_Injected(ref UnityEngine.Vector3 worldPosition, ref UnityEngine.Vector3 worldUp);
        /*0x289d880*/ void TransformDirection_Injected(ref UnityEngine.Vector3 direction, ref UnityEngine.Vector3 ret);
        /*0x289d940*/ void InverseTransformDirection_Injected(ref UnityEngine.Vector3 direction, ref UnityEngine.Vector3 ret);
        /*0x289da00*/ void TransformVector_Injected(ref UnityEngine.Vector3 vector, ref UnityEngine.Vector3 ret);
        /*0x289dac0*/ void InverseTransformVector_Injected(ref UnityEngine.Vector3 vector, ref UnityEngine.Vector3 ret);
        /*0x289db80*/ void TransformPoint_Injected(ref UnityEngine.Vector3 position, ref UnityEngine.Vector3 ret);
        /*0x289dc40*/ void InverseTransformPoint_Injected(ref UnityEngine.Vector3 position, ref UnityEngine.Vector3 ret);
        /*0x289e058*/ void get_lossyScale_Injected(ref UnityEngine.Vector3 ret);
        /*0x289e264*/ void RotateAround_Injected(ref UnityEngine.Vector3 axis, float angle);
        /*0x289e31c*/ void RotateAroundLocal_Injected(ref UnityEngine.Vector3 axis, float angle);

        class Enumerator : System.Collections.IEnumerator
        {
            /*0x10*/ UnityEngine.Transform outer;
            /*0x18*/ int currentIndex;

            /*0x289e1d0*/ Enumerator(UnityEngine.Transform outer);
            /*0x289e6a4*/ object get_Current();
            /*0x289e6f0*/ bool MoveNext();
            /*0x289e750*/ void Reset();
        }
    }

    enum DrivenTransformProperties
    {
        None = 0,
        All = -1,
        AnchoredPositionX = 2,
        AnchoredPositionY = 4,
        AnchoredPositionZ = 8,
        Rotation = 16,
        ScaleX = 32,
        ScaleY = 64,
        ScaleZ = 128,
        AnchorMinX = 256,
        AnchorMinY = 512,
        AnchorMaxX = 1024,
        AnchorMaxY = 2048,
        SizeDeltaX = 4096,
        SizeDeltaY = 8192,
        PivotX = 16384,
        PivotY = 32768,
        AnchoredPosition = 6,
        AnchoredPosition3D = 14,
        Scale = 224,
        AnchorMin = 768,
        AnchorMax = 3072,
        Anchors = 3840,
        SizeDelta = 12288,
        Pivot = 49152,
    }

    struct DrivenRectTransformTracker
    {
        static /*0x289e75c*/ bool CanRecordModifications();
        /*0x289e764*/ void Add(UnityEngine.Object driver, UnityEngine.RectTransform rectTransform, UnityEngine.DrivenTransformProperties drivenProperties);
        /*0x289e768*/ void Clear(bool revertValues);
        /*0x289e76c*/ void Clear();
    }

    class RectTransform : UnityEngine.Transform
    {
        static /*0x0*/ UnityEngine.RectTransform.ReapplyDrivenProperties reapplyDrivenProperties;

        static /*0x289e770*/ void add_reapplyDrivenProperties(UnityEngine.RectTransform.ReapplyDrivenProperties value);
        static /*0x289e828*/ void remove_reapplyDrivenProperties(UnityEngine.RectTransform.ReapplyDrivenProperties value);
        static /*0x289f94c*/ void SendReapplyDrivenProperties(UnityEngine.RectTransform driven);
        /*0x289fbe0*/ RectTransform();
        /*0x289e8e0*/ UnityEngine.Rect get_rect();
        /*0x289e97c*/ UnityEngine.Vector2 get_anchorMin();
        /*0x289ea0c*/ void set_anchorMin(UnityEngine.Vector2 value);
        /*0x289ea98*/ UnityEngine.Vector2 get_anchorMax();
        /*0x289eb28*/ void set_anchorMax(UnityEngine.Vector2 value);
        /*0x289ebb4*/ UnityEngine.Vector2 get_anchoredPosition();
        /*0x289ec44*/ void set_anchoredPosition(UnityEngine.Vector2 value);
        /*0x289ecd0*/ UnityEngine.Vector2 get_sizeDelta();
        /*0x289ed60*/ void set_sizeDelta(UnityEngine.Vector2 value);
        /*0x289edec*/ UnityEngine.Vector2 get_pivot();
        /*0x289ee7c*/ void set_pivot(UnityEngine.Vector2 value);
        /*0x289ef08*/ UnityEngine.Vector3 get_anchoredPosition3D();
        /*0x289ef3c*/ void set_anchoredPosition3D(UnityEngine.Vector3 value);
        /*0x289ef6c*/ UnityEngine.Vector2 get_offsetMin();
        /*0x289efc0*/ void set_offsetMin(UnityEngine.Vector2 value);
        /*0x289f0b4*/ UnityEngine.Vector2 get_offsetMax();
        /*0x289f154*/ void set_offsetMax(UnityEngine.Vector2 value);
        /*0x289f250*/ UnityEngine.Object get_drivenByObject();
        /*0x289f28c*/ void set_drivenByObject(UnityEngine.Object value);
        /*0x289f2d0*/ UnityEngine.DrivenTransformProperties get_drivenProperties();
        /*0x289f30c*/ void set_drivenProperties(UnityEngine.DrivenTransformProperties value);
        /*0x289f350*/ void ForceUpdateRectTransforms();
        /*0x289f38c*/ void GetLocalCorners(UnityEngine.Vector3[] fourCornersArray);
        /*0x289f4c0*/ void GetWorldCorners(UnityEngine.Vector3[] fourCornersArray);
        /*0x289f61c*/ void SetInsetAndSizeFromParentEdge(UnityEngine.RectTransform.Edge edge, float inset, float size);
        /*0x289f730*/ void SetSizeWithCurrentAnchors(UnityEngine.RectTransform.Axis axis, float size);
        /*0x289f9b8*/ UnityEngine.Rect GetRectInParentSpace();
        /*0x289f82c*/ UnityEngine.Vector2 GetParentSize();
        /*0x289e938*/ void get_rect_Injected(ref UnityEngine.Rect ret);
        /*0x289e9c8*/ void get_anchorMin_Injected(ref UnityEngine.Vector2 ret);
        /*0x289ea54*/ void set_anchorMin_Injected(ref UnityEngine.Vector2 value);
        /*0x289eae4*/ void get_anchorMax_Injected(ref UnityEngine.Vector2 ret);
        /*0x289eb70*/ void set_anchorMax_Injected(ref UnityEngine.Vector2 value);
        /*0x289ec00*/ void get_anchoredPosition_Injected(ref UnityEngine.Vector2 ret);
        /*0x289ec8c*/ void set_anchoredPosition_Injected(ref UnityEngine.Vector2 value);
        /*0x289ed1c*/ void get_sizeDelta_Injected(ref UnityEngine.Vector2 ret);
        /*0x289eda8*/ void set_sizeDelta_Injected(ref UnityEngine.Vector2 value);
        /*0x289ee38*/ void get_pivot_Injected(ref UnityEngine.Vector2 ret);
        /*0x289eec4*/ void set_pivot_Injected(ref UnityEngine.Vector2 value);

        enum Edge
        {
            Left = 0,
            Right = 1,
            Top = 2,
            Bottom = 3,
        }

        enum Axis
        {
            Horizontal = 0,
            Vertical = 1,
        }

        class ReapplyDrivenProperties : System.MulticastDelegate
        {
            /*0x289fbe8*/ ReapplyDrivenProperties(object object, nint method);
            /*0x289fcbc*/ void Invoke(UnityEngine.RectTransform driven);
        }
    }

    enum SpriteDrawMode
    {
        Simple = 0,
        Sliced = 1,
        Tiled = 2,
    }

    enum SpriteTileMode
    {
        Continuous = 0,
        Adaptive = 1,
    }

    enum SpriteMaskInteraction
    {
        None = 0,
        VisibleInsideMask = 1,
        VisibleOutsideMask = 2,
    }

    class SpriteRenderer : UnityEngine.Renderer
    {
        /*0x18*/ UnityEngine.Events.UnityEvent<UnityEngine.SpriteRenderer> m_SpriteChangeEvent;

        /*0x28a06c8*/ SpriteRenderer();
        /*0x289fcd0*/ void RegisterSpriteChangeCallback(UnityEngine.Events.UnityAction<UnityEngine.SpriteRenderer> callback);
        /*0x289fd70*/ void UnregisterSpriteChangeCallback(UnityEngine.Events.UnityAction<UnityEngine.SpriteRenderer> callback);
        /*0x289fdd0*/ void InvokeSpriteChanged();
        /*0x289fec4*/ bool get_shouldSupportTiling();
        /*0x289ff00*/ UnityEngine.Sprite get_sprite();
        /*0x289ff3c*/ void set_sprite(UnityEngine.Sprite value);
        /*0x289ff80*/ UnityEngine.SpriteDrawMode get_drawMode();
        /*0x289ffbc*/ void set_drawMode(UnityEngine.SpriteDrawMode value);
        /*0x28a0000*/ UnityEngine.Vector2 get_size();
        /*0x28a0090*/ void set_size(UnityEngine.Vector2 value);
        /*0x28a011c*/ float get_adaptiveModeThreshold();
        /*0x28a0158*/ void set_adaptiveModeThreshold(float value);
        /*0x28a01a4*/ UnityEngine.SpriteTileMode get_tileMode();
        /*0x28a01e0*/ void set_tileMode(UnityEngine.SpriteTileMode value);
        /*0x28a0224*/ UnityEngine.Color get_color();
        /*0x28a02c0*/ void set_color(UnityEngine.Color value);
        /*0x28a0358*/ UnityEngine.SpriteMaskInteraction get_maskInteraction();
        /*0x28a0394*/ void set_maskInteraction(UnityEngine.SpriteMaskInteraction value);
        /*0x28a03d8*/ bool get_flipX();
        /*0x28a0414*/ void set_flipX(bool value);
        /*0x28a0458*/ bool get_flipY();
        /*0x28a0494*/ void set_flipY(bool value);
        /*0x28a04d8*/ UnityEngine.SpriteSortPoint get_spriteSortPoint();
        /*0x28a0514*/ void set_spriteSortPoint(UnityEngine.SpriteSortPoint value);
        /*0x28a0558*/ UnityEngine.Bounds Internal_GetSpriteBounds(UnityEngine.SpriteDrawMode mode);
        /*0x28a061c*/ UnityEngine.Bounds GetSpriteBounds();
        /*0x28a004c*/ void get_size_Injected(ref UnityEngine.Vector2 ret);
        /*0x28a00d8*/ void set_size_Injected(ref UnityEngine.Vector2 value);
        /*0x28a027c*/ void get_color_Injected(ref UnityEngine.Color ret);
        /*0x28a0314*/ void set_color_Injected(ref UnityEngine.Color value);
        /*0x28a05c8*/ void Internal_GetSpriteBounds_Injected(UnityEngine.SpriteDrawMode mode, ref UnityEngine.Bounds ret);
    }

    enum SpriteMeshType
    {
        FullRect = 0,
        Tight = 1,
    }

    enum SpriteAlignment
    {
        Center = 0,
        TopLeft = 1,
        TopCenter = 2,
        TopRight = 3,
        LeftCenter = 4,
        RightCenter = 5,
        BottomLeft = 6,
        BottomCenter = 7,
        BottomRight = 8,
        Custom = 9,
    }

    enum SpritePackingMode
    {
        Tight = 0,
        Rectangle = 1,
    }

    enum SpritePackingRotation
    {
        None = 0,
        FlipHorizontal = 1,
        FlipVertical = 2,
        Rotate180 = 3,
        Any = 15,
    }

    enum SpriteSortPoint
    {
        Center = 0,
        Pivot = 1,
    }

    struct SecondarySpriteTexture
    {
        /*0x10*/ string name;
        /*0x18*/ UnityEngine.Texture2D texture;
    }

    class Sprite : UnityEngine.Object
    {
        static /*0x28a0adc*/ UnityEngine.Sprite CreateSpriteWithoutTextureScripting(UnityEngine.Rect rect, UnityEngine.Vector2 pivot, float pixelsToUnits, UnityEngine.Texture2D texture);
        static /*0x28a0bac*/ UnityEngine.Sprite CreateSprite(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, float pixelsPerUnit, uint extrude, UnityEngine.SpriteMeshType meshType, UnityEngine.Vector4 border, bool generateFallbackPhysicsShape);
        static /*0x28a1630*/ void GetPhysicsShapeImpl(UnityEngine.Sprite sprite, int shapeIdx, System.Collections.Generic.List<UnityEngine.Vector2> physicsShape);
        static /*0x28a1ac8*/ void OverridePhysicsShapeCount(UnityEngine.Sprite sprite, int physicsShapeCount);
        static /*0x28a1b0c*/ void OverridePhysicsShape(UnityEngine.Sprite sprite, UnityEngine.Vector2[] physicsShape, int idx);
        static /*0x28a1bb4*/ UnityEngine.Sprite Create(UnityEngine.Rect rect, UnityEngine.Vector2 pivot, float pixelsToUnits, UnityEngine.Texture2D texture);
        static /*0x28a1bb8*/ UnityEngine.Sprite Create(UnityEngine.Rect rect, UnityEngine.Vector2 pivot, float pixelsToUnits);
        static /*0x28a1bc0*/ UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, float pixelsPerUnit, uint extrude, UnityEngine.SpriteMeshType meshType, UnityEngine.Vector4 border, bool generateFallbackPhysicsShape);
        static /*0x28a1fac*/ UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, float pixelsPerUnit, uint extrude, UnityEngine.SpriteMeshType meshType, UnityEngine.Vector4 border);
        static /*0x28a1fbc*/ UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, float pixelsPerUnit, uint extrude, UnityEngine.SpriteMeshType meshType);
        static /*0x28a20a0*/ UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, float pixelsPerUnit, uint extrude);
        static /*0x28a20a8*/ UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, float pixelsPerUnit);
        static /*0x28a20b4*/ UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot);
        static /*0x28a0b48*/ UnityEngine.Sprite CreateSpriteWithoutTextureScripting_Injected(ref UnityEngine.Rect rect, ref UnityEngine.Vector2 pivot, float pixelsToUnits, UnityEngine.Texture2D texture);
        static /*0x28a0c44*/ UnityEngine.Sprite CreateSprite_Injected(UnityEngine.Texture2D texture, ref UnityEngine.Rect rect, ref UnityEngine.Vector2 pivot, float pixelsPerUnit, uint extrude, UnityEngine.SpriteMeshType meshType, ref UnityEngine.Vector4 border, bool generateFallbackPhysicsShape);
        /*0x28a06d0*/ Sprite();
        /*0x28a0728*/ int GetPackingMode();
        /*0x28a0764*/ int GetPackingRotation();
        /*0x28a07a0*/ int GetPacked();
        /*0x28a07dc*/ UnityEngine.Rect GetTextureRect();
        /*0x28a0878*/ UnityEngine.Vector2 GetTextureRectOffset();
        /*0x28a0908*/ UnityEngine.Vector4 GetInnerUVs();
        /*0x28a09a4*/ UnityEngine.Vector4 GetOuterUVs();
        /*0x28a0a40*/ UnityEngine.Vector4 GetPadding();
        /*0x28a0cd8*/ UnityEngine.Bounds get_bounds();
        /*0x28a0d84*/ UnityEngine.Rect get_rect();
        /*0x28a0e20*/ UnityEngine.Vector4 get_border();
        /*0x28a0ebc*/ UnityEngine.Texture2D get_texture();
        /*0x28a0ef8*/ UnityEngine.Texture2D GetSecondaryTexture(int index);
        /*0x28a0f3c*/ float get_pixelsPerUnit();
        /*0x28a0f78*/ float get_spriteAtlasTextureScale();
        /*0x28a0fb4*/ UnityEngine.Texture2D get_associatedAlphaSplitTexture();
        /*0x28a0ff0*/ UnityEngine.Vector2 get_pivot();
        /*0x28a1080*/ bool get_packed();
        /*0x28a10c8*/ UnityEngine.SpritePackingMode get_packingMode();
        /*0x28a1104*/ UnityEngine.SpritePackingRotation get_packingRotation();
        /*0x28a1140*/ UnityEngine.Rect get_textureRect();
        /*0x28a11cc*/ UnityEngine.Vector2 get_textureRectOffset();
        /*0x28a1284*/ UnityEngine.Vector2[] get_vertices();
        /*0x28a12c0*/ ushort[] get_triangles();
        /*0x28a12fc*/ UnityEngine.Vector2[] get_uv();
        /*0x28a1338*/ int GetPhysicsShapeCount();
        /*0x28a1374*/ int GetPhysicsShapePointCount(int shapeIdx);
        /*0x28a1494*/ int Internal_GetPhysicsShapePointCount(int shapeIdx);
        /*0x28a14d8*/ int GetPhysicsShape(int shapeIdx, System.Collections.Generic.List<UnityEngine.Vector2> physicsShape);
        /*0x28a1684*/ void OverridePhysicsShape(System.Collections.Generic.IList<UnityEngine.Vector2[]> physicsShapes);
        /*0x28a1b60*/ void OverrideGeometry(UnityEngine.Vector2[] vertices, ushort[] triangles);
        /*0x28a0834*/ void GetTextureRect_Injected(ref UnityEngine.Rect ret);
        /*0x28a08c4*/ void GetTextureRectOffset_Injected(ref UnityEngine.Vector2 ret);
        /*0x28a0960*/ void GetInnerUVs_Injected(ref UnityEngine.Vector4 ret);
        /*0x28a09fc*/ void GetOuterUVs_Injected(ref UnityEngine.Vector4 ret);
        /*0x28a0a98*/ void GetPadding_Injected(ref UnityEngine.Vector4 ret);
        /*0x28a0d40*/ void get_bounds_Injected(ref UnityEngine.Bounds ret);
        /*0x28a0ddc*/ void get_rect_Injected(ref UnityEngine.Rect ret);
        /*0x28a0e78*/ void get_border_Injected(ref UnityEngine.Vector4 ret);
        /*0x28a103c*/ void get_pivot_Injected(ref UnityEngine.Vector2 ret);
    }

    namespace _Scripting
    {
        namespace APIUpdating
        {
            class APIUpdaterRuntimeHelpers
            {
                static /*0x28a20c8*/ bool GetMovedFromAttributeDataForType(System.Type sourceType, ref string assembly, ref string nsp, ref string klass);
                static /*0x28a2208*/ bool GetObsoleteTypeRedirection(System.Type sourceType, ref string assemblyName, ref string nsp, ref string className);
                /*0x28a24c4*/ APIUpdaterRuntimeHelpers();
            }
        }
    }

    namespace Sprites
    {
        class DataUtility
        {
            static /*0x28a24cc*/ UnityEngine.Vector4 GetInnerUV(UnityEngine.Sprite sprite);
            static /*0x28a24dc*/ UnityEngine.Vector4 GetOuterUV(UnityEngine.Sprite sprite);
            static /*0x28a24ec*/ UnityEngine.Vector4 GetPadding(UnityEngine.Sprite sprite);
            static /*0x28a24fc*/ UnityEngine.Vector2 GetMinSize(UnityEngine.Sprite sprite);
            /*0x28a254c*/ DataUtility();
        }
    }

    namespace U2D
    {
        class PixelPerfectRendering
        {
            static /*0x28a2554*/ float get_pixelSnapSpacing();
            static /*0x28a257c*/ void set_pixelSnapSpacing(float value);
        }

        class Light2DBase : UnityEngine.MonoBehaviour
        {
            /*0x28a25b4*/ Light2DBase();
        }

        enum Light2DType
        {
            Parametric = 0,
            Freeform = 1,
            Sprite = 2,
            Point = 3,
            Global = 4,
        }

        struct SpriteBone
        {
            /*0x10*/ string m_Name;
            /*0x18*/ string m_Guid;
            /*0x20*/ UnityEngine.Vector3 m_Position;
            /*0x2c*/ UnityEngine.Quaternion m_Rotation;
            /*0x3c*/ float m_Length;
            /*0x40*/ int m_ParentId;
            /*0x44*/ UnityEngine.Color32 m_Color;

            /*0x28a25bc*/ string get_name();
            /*0x28a25c4*/ void set_name(string value);
            /*0x28a25cc*/ string get_guid();
            /*0x28a25d4*/ void set_guid(string value);
            /*0x28a25dc*/ UnityEngine.Vector3 get_position();
            /*0x28a25e8*/ void set_position(UnityEngine.Vector3 value);
            /*0x28a25f4*/ UnityEngine.Quaternion get_rotation();
            /*0x28a2600*/ void set_rotation(UnityEngine.Quaternion value);
            /*0x28a260c*/ float get_length();
            /*0x28a2614*/ void set_length(float value);
            /*0x28a261c*/ int get_parentId();
            /*0x28a2624*/ void set_parentId(int value);
            /*0x28a262c*/ UnityEngine.Color32 get_color();
            /*0x28a2634*/ void set_color(UnityEngine.Color32 value);
        }

        struct SpriteChannelInfo
        {
            /*0x10*/ nint m_Buffer;
            /*0x18*/ int m_Count;
            /*0x1c*/ int m_Offset;
            /*0x20*/ int m_Stride;

            /*0x28a263c*/ void* get_buffer();
            /*0x28a2648*/ void set_buffer(void* value);
            /*0x28a2668*/ int get_count();
            /*0x28a2670*/ void set_count(int value);
            /*0x28a2678*/ int get_offset();
            /*0x28a2680*/ void set_offset(int value);
            /*0x28a2688*/ int get_stride();
            /*0x28a2690*/ void set_stride(int value);
        }

        class SpriteDataAccessExtensions
        {
            static void CheckAttributeTypeMatchesAndThrow<T>(UnityEngine.Rendering.VertexAttribute channel);
            static Unity.Collections.NativeSlice<T> GetVertexAttribute<T>(UnityEngine.Sprite sprite, UnityEngine.Rendering.VertexAttribute channel);
            static void SetVertexAttribute<T>(UnityEngine.Sprite sprite, UnityEngine.Rendering.VertexAttribute channel, Unity.Collections.NativeArray<T> src);
            static /*0x28a2698*/ Unity.Collections.NativeArray<UnityEngine.Matrix4x4> GetBindPoses(UnityEngine.Sprite sprite);
            static /*0x28a279c*/ void SetBindPoses(UnityEngine.Sprite sprite, Unity.Collections.NativeArray<UnityEngine.Matrix4x4> src);
            static /*0x28a2880*/ Unity.Collections.NativeArray<ushort> GetIndices(UnityEngine.Sprite sprite);
            static /*0x28a2984*/ void SetIndices(UnityEngine.Sprite sprite, Unity.Collections.NativeArray<ushort> src);
            static /*0x28a2a68*/ UnityEngine.U2D.SpriteBone[] GetBones(UnityEngine.Sprite sprite);
            static /*0x28a2ae0*/ void SetBones(UnityEngine.Sprite sprite, UnityEngine.U2D.SpriteBone[] src);
            static /*0x28a2b68*/ bool HasVertexAttribute(UnityEngine.Sprite sprite, UnityEngine.Rendering.VertexAttribute channel);
            static /*0x28a2bac*/ void SetVertexCount(UnityEngine.Sprite sprite, int count);
            static /*0x28a2bf0*/ int GetVertexCount(UnityEngine.Sprite sprite);
            static /*0x28a2734*/ UnityEngine.U2D.SpriteChannelInfo GetBindPoseInfo(UnityEngine.Sprite sprite);
            static /*0x28a282c*/ void SetBindPoseData(UnityEngine.Sprite sprite, void* src, int count);
            static /*0x28a291c*/ UnityEngine.U2D.SpriteChannelInfo GetIndicesInfo(UnityEngine.Sprite sprite);
            static /*0x28a2a14*/ void SetIndicesData(UnityEngine.Sprite sprite, void* src, int count);
            static /*0x28a2cb4*/ UnityEngine.U2D.SpriteChannelInfo GetChannelInfo(UnityEngine.Sprite sprite, UnityEngine.Rendering.VertexAttribute channel);
            static /*0x28a2d78*/ void SetChannelData(UnityEngine.Sprite sprite, UnityEngine.Rendering.VertexAttribute channel, void* src);
            static /*0x28a2aa4*/ UnityEngine.U2D.SpriteBone[] GetBoneInfo(UnityEngine.Sprite sprite);
            static /*0x28a2b24*/ void SetBoneData(UnityEngine.Sprite sprite, UnityEngine.U2D.SpriteBone[] src);
            static /*0x28a2dcc*/ int GetPrimaryVertexStreamSize(UnityEngine.Sprite sprite);
            static /*0x28a2c2c*/ void GetBindPoseInfo_Injected(UnityEngine.Sprite sprite, ref UnityEngine.U2D.SpriteChannelInfo ret);
            static /*0x28a2c70*/ void GetIndicesInfo_Injected(UnityEngine.Sprite sprite, ref UnityEngine.U2D.SpriteChannelInfo ret);
            static /*0x28a2d24*/ void GetChannelInfo_Injected(UnityEngine.Sprite sprite, UnityEngine.Rendering.VertexAttribute channel, ref UnityEngine.U2D.SpriteChannelInfo ret);
        }

        class SpriteRendererDataAccessExtensions
        {
            static /*0x28a2e08*/ void SetDeformableBuffer(UnityEngine.SpriteRenderer spriteRenderer, Unity.Collections.NativeArray<byte> src);
            static /*0x28a30c8*/ void SetDeformableBuffer(UnityEngine.SpriteRenderer spriteRenderer, Unity.Collections.NativeArray<UnityEngine.Vector3> src);
            static /*0x28a3320*/ void SetBatchDeformableBufferAndLocalAABBArray(UnityEngine.SpriteRenderer[] spriteRenderers, Unity.Collections.NativeArray<nint> buffers, Unity.Collections.NativeArray<int> bufferSizes, Unity.Collections.NativeArray<UnityEngine.Bounds> bounds);
            static /*0x28a3504*/ bool IsUsingDeformableBuffer(UnityEngine.SpriteRenderer spriteRenderer, nint buffer);
            static /*0x28a3598*/ void DeactivateDeformableBuffer(UnityEngine.SpriteRenderer renderer);
            static /*0x28a35d4*/ void SetLocalAABB(UnityEngine.SpriteRenderer renderer, UnityEngine.Bounds aabb);
            static /*0x28a3074*/ void SetDeformableBuffer(UnityEngine.SpriteRenderer spriteRenderer, void* src, int count);
            static /*0x28a3498*/ void SetBatchDeformableBufferAndLocalAABBArray(UnityEngine.SpriteRenderer[] spriteRenderers, void* buffers, void* bufferSizes, void* bounds, int count);
            static /*0x28a3554*/ bool IsUsingDeformableBuffer(UnityEngine.SpriteRenderer spriteRenderer, void* buffer);
            static /*0x28a3618*/ void SetLocalAABB_Injected(UnityEngine.SpriteRenderer renderer, ref UnityEngine.Bounds aabb);
        }

        class SpriteAtlasManager
        {
            static /*0x0*/ System.Action<string, System.Action<UnityEngine.U2D.SpriteAtlas>> atlasRequested;
            static /*0x8*/ System.Action<UnityEngine.U2D.SpriteAtlas> atlasRegistered;

            static /*0x28a365c*/ void add_atlasRequested(System.Action<string, System.Action<UnityEngine.U2D.SpriteAtlas>> value);
            static /*0x28a3728*/ void remove_atlasRequested(System.Action<string, System.Action<UnityEngine.U2D.SpriteAtlas>> value);
            static /*0x28a37f4*/ bool RequestAtlas(string tag);
            static /*0x28a38b4*/ void add_atlasRegistered(System.Action<UnityEngine.U2D.SpriteAtlas> value);
            static /*0x28a3984*/ void remove_atlasRegistered(System.Action<UnityEngine.U2D.SpriteAtlas> value);
            static /*0x28a3a54*/ void PostRegisteredAtlas(UnityEngine.U2D.SpriteAtlas spriteAtlas);
            static /*0x28a3ac0*/ void Register(UnityEngine.U2D.SpriteAtlas spriteAtlas);
            /*0x28a3afc*/ SpriteAtlasManager();
        }

        class SpriteAtlas : UnityEngine.Object
        {
            /*0x28a3d70*/ SpriteAtlas();
            /*0x28a3b04*/ bool get_isVariant();
            /*0x28a3b40*/ string get_tag();
            /*0x28a3b7c*/ int get_spriteCount();
            /*0x28a3bb8*/ bool CanBindTo(UnityEngine.Sprite sprite);
            /*0x28a3bfc*/ UnityEngine.Sprite GetSprite(string name);
            /*0x28a3c40*/ int GetSprites(UnityEngine.Sprite[] sprites);
            /*0x28a3cc8*/ int GetSprites(UnityEngine.Sprite[] sprites, string name);
            /*0x28a3c84*/ int GetSpritesScripting(UnityEngine.Sprite[] sprites);
            /*0x28a3d1c*/ int GetSpritesWithNameScripting(UnityEngine.Sprite[] sprites, string name);
        }
    }

    namespace Profiling
    {
        enum ProfilerArea
        {
            CPU = 0,
            GPU = 1,
            Rendering = 2,
            Memory = 3,
            Audio = 4,
            Video = 5,
            Physics = 6,
            Physics2D = 7,
            NetworkMessages = 8,
            NetworkOperations = 9,
            UI = 10,
            UIDetails = 11,
            GlobalIllumination = 12,
            VirtualTexturing = 13,
        }

        class Profiler
        {
            static uint invalidProfilerArea = 4294967295;

            static /*0x28a3dd0*/ bool get_supported();
            static /*0x28a3df8*/ string get_logFile();
            static /*0x28a3e20*/ void set_logFile(string value);
            static /*0x28a3e5c*/ bool get_enableBinaryLog();
            static /*0x28a3e84*/ void set_enableBinaryLog(bool value);
            static /*0x28a3ec0*/ int get_maxUsedMemory();
            static /*0x28a3ee8*/ void set_maxUsedMemory(int value);
            static /*0x28a3f24*/ bool get_enabled();
            static /*0x28a3f4c*/ void set_enabled(bool value);
            static /*0x28a3f88*/ bool get_enableAllocationCallstacks();
            static /*0x28a3fb0*/ void set_enableAllocationCallstacks(bool value);
            static /*0x28a3fec*/ void SetAreaEnabled(UnityEngine.Profiling.ProfilerArea area, bool enabled);
            static /*0x28a4030*/ int get_areaCount();
            static /*0x28a40e4*/ bool GetAreaEnabled(UnityEngine.Profiling.ProfilerArea area);
            static /*0x28a4120*/ void AddFramesFromFile(string file);
            static /*0x28a41d0*/ void AddFramesFromFile_Internal(string file, bool keepExistingFrames);
            static /*0x28a4214*/ void BeginThreadProfiling(string threadGroupName, string threadName);
            static /*0x28a4308*/ void BeginThreadProfilingInternal(string threadGroupName, string threadName);
            static /*0x28a434c*/ void EndThreadProfiling();
            static /*0x28a4350*/ void BeginSample(string name);
            static /*0x28a4440*/ void BeginSample(string name, UnityEngine.Object targetObject);
            static /*0x28a44f0*/ void ValidateArguments(string name);
            static /*0x28a43fc*/ void BeginSampleImpl(string name, UnityEngine.Object targetObject);
            static /*0x28a4570*/ void EndSample();
            static /*0x28a4598*/ int get_maxNumberOfSamplesPerFrame();
            static /*0x28a45a0*/ void set_maxNumberOfSamplesPerFrame(int value);
            static /*0x28a45a4*/ uint get_usedHeapSize();
            static /*0x28a45d4*/ long get_usedHeapSizeLong();
            static /*0x28a45fc*/ int GetRuntimeMemorySize(UnityEngine.Object o);
            static /*0x28a463c*/ long GetRuntimeMemorySizeLong(UnityEngine.Object o);
            static /*0x28a4678*/ uint GetMonoHeapSize();
            static /*0x28a46a8*/ long GetMonoHeapSizeLong();
            static /*0x28a46d0*/ uint GetMonoUsedSize();
            static /*0x28a4700*/ long GetMonoUsedSizeLong();
            static /*0x28a4728*/ bool SetTempAllocatorRequestedSize(uint size);
            static /*0x28a4764*/ uint GetTempAllocatorSize();
            static /*0x28a478c*/ uint GetTotalAllocatedMemory();
            static /*0x28a47bc*/ long GetTotalAllocatedMemoryLong();
            static /*0x28a47e4*/ uint GetTotalUnusedReservedMemory();
            static /*0x28a4814*/ long GetTotalUnusedReservedMemoryLong();
            static /*0x28a483c*/ uint GetTotalReservedMemory();
            static /*0x28a486c*/ long GetTotalReservedMemoryLong();
            static /*0x28a4894*/ long GetTotalFragmentationInfo(Unity.Collections.NativeArray<int> stats);
            static /*0x28a4924*/ long InternalGetTotalFragmentationInfo(nint pStats, int count);
            static /*0x28a4968*/ long GetAllocatedMemoryForGraphicsDriver();
            static /*0x28a4990*/ void EmitFrameMetaData(System.Guid id, int tag, System.Array data);
            static void EmitFrameMetaData<T>(System.Guid id, int tag, System.Collections.Generic.List<T> data);
            static void EmitFrameMetaData<T>(System.Guid id, int tag, Unity.Collections.NativeArray<T> data);
            static /*0x28a4b84*/ void EmitSessionMetaData(System.Guid id, int tag, System.Array data);
            static void EmitSessionMetaData<T>(System.Guid id, int tag, System.Collections.Generic.List<T> data);
            static void EmitSessionMetaData<T>(System.Guid id, int tag, Unity.Collections.NativeArray<T> data);
            static /*0x28a4b00*/ void Internal_EmitGlobalMetaData_Array(void* id, int idLen, int tag, System.Array data, int count, int elementSize, bool frameData);
            static /*0x28a4cf4*/ void Internal_EmitGlobalMetaData_Native(void* id, int idLen, int tag, nint data, int count, int elementSize, bool frameData);
            static /*0x28a4d78*/ void SetCategoryEnabled(Unity.Profiling.ProfilerCategory category, bool enabled);
            static /*0x28a4e9c*/ bool IsCategoryEnabled(Unity.Profiling.ProfilerCategory category);
            static /*0x28a4fb0*/ uint GetCategoriesCount();
            static /*0x28a4fd8*/ void GetAllCategories(Unity.Profiling.ProfilerCategory[] categories);
            static /*0x28a50c4*/ void GetAllCategories(Unity.Collections.NativeArray<Unity.Profiling.ProfilerCategory> categories);
            static /*0x28a4e58*/ void Internal_SetCategoryEnabled(ushort categoryId, bool enabled);
            static /*0x28a4f74*/ bool Internal_IsCategoryEnabled(ushort categoryId);
            /*0x28a3dc8*/ Profiler();
        }

        class Sampler
        {
            static /*0x0*/ UnityEngine.Profiling.Sampler s_InvalidSampler;
            /*0x10*/ nint m_Ptr;

            static /*0x28a5750*/ Sampler();
            static /*0x28a5370*/ UnityEngine.Profiling.Sampler Get(string name);
            static /*0x28a543c*/ int GetNames(System.Collections.Generic.List<string> names);
            /*0x28a51a8*/ Sampler();
            /*0x28a51b0*/ Sampler(nint ptr);
            /*0x28a51d8*/ bool get_isValid();
            /*0x28a522c*/ UnityEngine.Profiling.Recorder GetRecorder();
            /*0x28a5744*/ string get_name();
        }

        class CustomSampler : UnityEngine.Profiling.Sampler
        {
            static /*0x0*/ UnityEngine.Profiling.CustomSampler s_InvalidCustomSampler;

            static /*0x28a5980*/ CustomSampler();
            static /*0x28a5878*/ UnityEngine.Profiling.CustomSampler Create(string name, bool collectGpuData);
            /*0x28a57b4*/ CustomSampler();
            /*0x28a580c*/ CustomSampler(nint ptr);
            /*0x28a595c*/ void Begin();
            /*0x28a5968*/ void Begin(UnityEngine.Object targetObject);
            /*0x28a5974*/ void End();
        }

        class Recorder
        {
            static Unity.Profiling.ProfilerRecorderOptions s_RecorderDefaultOptions = 153;
            static /*0x0*/ UnityEngine.Profiling.Recorder s_InvalidRecorder;
            /*0x10*/ Unity.Profiling.ProfilerRecorder m_RecorderCPU;
            /*0x18*/ Unity.Profiling.ProfilerRecorder m_RecorderGPU;

            static /*0x28a5d60*/ Recorder();
            static /*0x28a5a94*/ UnityEngine.Profiling.Recorder Get(string samplerName);
            /*0x28a59e0*/ Recorder();
            /*0x28a52b8*/ Recorder(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle handle);
            /*0x28a59e8*/ void Finalize();
            /*0x28a5b4c*/ bool get_isValid();
            /*0x28a5b5c*/ bool get_enabled();
            /*0x28a5b68*/ void set_enabled(bool value);
            /*0x28a5be0*/ long get_elapsedNanoseconds();
            /*0x28a5c14*/ long get_gpuElapsedNanoseconds();
            /*0x28a5c48*/ int get_sampleBlockCount();
            /*0x28a5ca4*/ int get_gpuSampleBlockCount();
            /*0x28a5d00*/ void FilterToCurrentThread();
            /*0x28a5d30*/ void CollectFromAllThreads();
            /*0x28a5b70*/ void SetEnabled(bool state);
        }

        namespace Memory
        {
            namespace Experimental
            {
                enum CaptureFlags
                {
                    ManagedObjects = 1,
                    NativeObjects = 2,
                    NativeAllocations = 4,
                    NativeAllocationSites = 8,
                    NativeStackTraces = 16,
                }

                class MetaData
                {
                    /*0x10*/ string content;
                    /*0x18*/ string platform;

                    /*0x28a5dc4*/ MetaData();
                }

                class MemoryProfiler
                {
                    static /*0x0*/ System.Action<string, bool> m_SnapshotFinished;
                    static /*0x8*/ System.Action<string, bool, UnityEngine.Profiling.Experimental.DebugScreenCapture> m_SaveScreenshotToDisk;
                    static /*0x10*/ System.Action<UnityEngine.Profiling.Memory.Experimental.MetaData> createMetaData;

                    static /*0x28a5dcc*/ void add_m_SnapshotFinished(System.Action<string, bool> value);
                    static /*0x28a5e98*/ void remove_m_SnapshotFinished(System.Action<string, bool> value);
                    static /*0x28a5f64*/ void add_m_SaveScreenshotToDisk(System.Action<string, bool, UnityEngine.Profiling.Experimental.DebugScreenCapture> value);
                    static /*0x28a6034*/ void remove_m_SaveScreenshotToDisk(System.Action<string, bool, UnityEngine.Profiling.Experimental.DebugScreenCapture> value);
                    static /*0x28a6104*/ void add_createMetaData(System.Action<UnityEngine.Profiling.Memory.Experimental.MetaData> value);
                    static /*0x28a61d4*/ void remove_createMetaData(System.Action<UnityEngine.Profiling.Memory.Experimental.MetaData> value);
                    static /*0x28a62a4*/ void StartOperation(uint captureFlag, bool requestScreenshot, string path, bool isRemote);
                    static /*0x28a6300*/ void TakeSnapshot(string path, System.Action<string, bool> finishCallback, UnityEngine.Profiling.Memory.Experimental.CaptureFlags captureFlags);
                    static /*0x28a630c*/ void TakeSnapshot(string path, System.Action<string, bool> finishCallback, System.Action<string, bool, UnityEngine.Profiling.Experimental.DebugScreenCapture> screenshotCallback, UnityEngine.Profiling.Memory.Experimental.CaptureFlags captureFlags);
                    static /*0x28a643c*/ void TakeTempSnapshot(System.Action<string, bool> finishCallback, UnityEngine.Profiling.Memory.Experimental.CaptureFlags captureFlags);
                    static /*0x28a6544*/ byte[] PrepareMetadata();
                    static /*0x28a66b8*/ int WriteIntToByteArray(byte[] array, int offset, int value);
                    static /*0x28a6744*/ int WriteStringToByteArray(byte[] array, int offset, string value);
                    static /*0x28a67dc*/ void FinalizeSnapshot(string path, bool result);
                    static /*0x28a6860*/ void SaveScreenshotToDisk(string path, bool result, nint pixelsPtr, int pixelsCount, UnityEngine.TextureFormat format, int width, int height);
                    /*0x28a695c*/ MemoryProfiler();
                }
            }
        }

        namespace Experimental
        {
            struct DebugScreenCapture
            {
                /*0x10*/ Unity.Collections.NativeArray<byte> <rawImageDataReference>k__BackingField;
                /*0x20*/ UnityEngine.TextureFormat <imageFormat>k__BackingField;
                /*0x24*/ int <width>k__BackingField;
                /*0x28*/ int <height>k__BackingField;

                /*0x28a6964*/ Unity.Collections.NativeArray<byte> get_rawImageDataReference();
                /*0x28a6970*/ void set_rawImageDataReference(Unity.Collections.NativeArray<byte> value);
                /*0x28a6978*/ UnityEngine.TextureFormat get_imageFormat();
                /*0x28a6980*/ void set_imageFormat(UnityEngine.TextureFormat value);
                /*0x28a6988*/ int get_width();
                /*0x28a6990*/ void set_width(int value);
                /*0x28a6998*/ int get_height();
                /*0x28a69a0*/ void set_height(int value);
            }
        }
    }

    namespace Jobs
    {
        interface IJobParallelForTransform
        {
            void Execute(int index, UnityEngine.Jobs.TransformAccess transform);
        }

        class IJobParallelForTransformExtensions
        {
            static Unity.Jobs.JobHandle Schedule<T>(T jobData, UnityEngine.Jobs.TransformAccessArray transforms, Unity.Jobs.JobHandle dependsOn);
            static Unity.Jobs.JobHandle ScheduleReadOnly<T>(T jobData, UnityEngine.Jobs.TransformAccessArray transforms, int batchSize, Unity.Jobs.JobHandle dependsOn);
            static void RunReadOnly<T>(T jobData, UnityEngine.Jobs.TransformAccessArray transforms);

            struct TransformParallelForLoopStruct<T>
            {
                static /*0x0*/ nint jobReflectionData;

                static nint Initialize();
                static void Execute(ref T jobData, nint jobData2, nint bufferRangePatchData, ref Unity.Jobs.LowLevel.Unsafe.JobRanges ranges, int jobIndex);

                struct TransformJobData<T>
                {
                    /*0x0*/ nint TransformAccessArray;
                    /*0x0*/ int IsReadOnly;
                }

                class ExecuteJobFunction<T> : System.MulticastDelegate
                {
                    ExecuteJobFunction(object object, nint method);
                    void Invoke(ref T jobData, nint additionalPtr, nint bufferRangePatchData, ref Unity.Jobs.LowLevel.Unsafe.JobRanges ranges, int jobIndex);
                }
            }
        }

        struct TransformAccess
        {
            /*0x10*/ nint hierarchy;
            /*0x18*/ int index;

            static /*0x28a71cc*/ void SetPositionAndRotation_Internal(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation);
            static /*0x28a7280*/ void SetLocalPositionAndRotation_Internal(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Vector3 localPosition, ref UnityEngine.Quaternion localRotation);
            static /*0x28a7328*/ void GetPositionAndRotation_Internal(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation);
            static /*0x28a73d0*/ void GetLocalPositionAndRotation_Internal(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Vector3 localPosition, ref UnityEngine.Quaternion localRotation);
            static /*0x28a6a04*/ void GetPosition(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Vector3 p);
            static /*0x28a6a9c*/ void SetPosition(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Vector3 p);
            static /*0x28a6b38*/ void GetRotation(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Quaternion r);
            static /*0x28a6bd0*/ void SetRotation(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Quaternion r);
            static /*0x28a6c70*/ void GetLocalPosition(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Vector3 p);
            static /*0x28a6d08*/ void SetLocalPosition(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Vector3 p);
            static /*0x28a6da4*/ void GetLocalRotation(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Quaternion r);
            static /*0x28a6e3c*/ void SetLocalRotation(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Quaternion r);
            static /*0x28a6edc*/ void GetLocalScale(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Vector3 r);
            static /*0x28a6f74*/ void SetLocalScale(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Vector3 r);
            static /*0x28a7024*/ void GetLocalToWorldMatrix(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Matrix4x4 m);
            static /*0x28a70d4*/ void GetWorldToLocalMatrix(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Matrix4x4 m);
            /*0x28a69a8*/ UnityEngine.Vector3 get_position();
            /*0x28a6a48*/ void set_position(UnityEngine.Vector3 value);
            /*0x28a6ae0*/ UnityEngine.Quaternion get_rotation();
            /*0x28a6b7c*/ void set_rotation(UnityEngine.Quaternion value);
            /*0x28a6c14*/ UnityEngine.Vector3 get_localPosition();
            /*0x28a6cb4*/ void set_localPosition(UnityEngine.Vector3 value);
            /*0x28a6d4c*/ UnityEngine.Quaternion get_localRotation();
            /*0x28a6de8*/ void set_localRotation(UnityEngine.Quaternion value);
            /*0x28a6e80*/ UnityEngine.Vector3 get_localScale();
            /*0x28a6f20*/ void set_localScale(UnityEngine.Vector3 value);
            /*0x28a6fb8*/ UnityEngine.Matrix4x4 get_localToWorldMatrix();
            /*0x28a7068*/ UnityEngine.Matrix4x4 get_worldToLocalMatrix();
            /*0x28a7118*/ bool get_isValid();
            /*0x28a716c*/ void SetPositionAndRotation(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
            /*0x28a7220*/ void SetLocalPositionAndRotation(UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation);
            /*0x28a72d4*/ void GetPositionAndRotation(ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation);
            /*0x28a737c*/ void GetLocalPositionAndRotation(ref UnityEngine.Vector3 localPosition, ref UnityEngine.Quaternion localRotation);
            /*0x28a7424*/ void CheckHierarchyValid();
            /*0x28a7484*/ void MarkReadWrite();
            /*0x28a7488*/ void MarkReadOnly();
            /*0x28a748c*/ void CheckWriteAccess();
        }

        struct TransformAccessArray : System.IDisposable
        {
            /*0x10*/ nint m_TransformArray;

            static /*0x28a7520*/ void Allocate(int capacity, int desiredJobCount, ref UnityEngine.Jobs.TransformAccessArray array);
            static /*0x28a7614*/ nint Create(int capacity, int desiredJobCount);
            static /*0x28a7730*/ void DestroyTransformAccessArray(nint transformArray);
            static /*0x28a7578*/ void SetTransforms(nint transformArrayIntPtr, UnityEngine.Transform[] transforms);
            static /*0x28a7a60*/ void Add(nint transformArrayIntPtr, UnityEngine.Transform transform);
            static /*0x28a7ae8*/ void RemoveAtSwapBack(nint transformArrayIntPtr, int index);
            static /*0x28a7b70*/ nint GetSortedTransformAccess(nint transformArrayIntPtr);
            static /*0x28a7bac*/ nint GetSortedToUserIndex(nint transformArrayIntPtr);
            static /*0x28a79e0*/ int GetLength(nint transformArrayIntPtr);
            static /*0x28a78e0*/ int GetCapacity(nint transformArrayIntPtr);
            static /*0x28a7960*/ void SetCapacity(nint transformArrayIntPtr, int capacity);
            static /*0x28a77b8*/ UnityEngine.Transform GetTransform(nint transformArrayIntPtr, int index);
            static /*0x28a7850*/ void SetTransform(nint transformArrayIntPtr, int index, UnityEngine.Transform transform);
            /*0x28a7490*/ TransformAccessArray(UnityEngine.Transform[] transforms, int desiredJobCount);
            /*0x28a75bc*/ TransformAccessArray(int capacity, int desiredJobCount);
            /*0x28a7658*/ bool get_isCreated();
            /*0x28a76ac*/ void Dispose();
            /*0x28a776c*/ nint GetTransformAccessArrayForSchedule();
            /*0x28a7774*/ UnityEngine.Transform get_Item(int index);
            /*0x28a77fc*/ void set_Item(int index, UnityEngine.Transform value);
            /*0x28a78a4*/ int get_capacity();
            /*0x28a791c*/ void set_capacity(int value);
            /*0x28a79a4*/ int get_length();
            /*0x28a7a1c*/ void Add(UnityEngine.Transform transform);
            /*0x28a7aa4*/ void RemoveAtSwapBack(int index);
            /*0x28a7b2c*/ void SetTransforms(UnityEngine.Transform[] transforms);
        }
    }

    namespace Networking
    {
        namespace PlayerConnection
        {
            class PlayerEditorConnectionEvents
            {
                /*0x10*/ System.Collections.Generic.List<UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.MessageTypeSubscribers> messageTypeSubscribers;
                /*0x18*/ UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.ConnectionChangeEvent connectionEvent;
                /*0x20*/ UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.ConnectionChangeEvent disconnectionEvent;

                /*0x28a84d4*/ PlayerEditorConnectionEvents();
                /*0x28a7be8*/ void InvokeMessageIdSubscribers(System.Guid messageId, byte[] data, int playerId);
                /*0x28a809c*/ UnityEngine.Events.UnityEvent<UnityEngine.Networking.PlayerConnection.MessageEventArgs> AddAndCreate(System.Guid messageId);
                /*0x28a8360*/ void UnregisterManagedCallback(System.Guid messageId, UnityEngine.Events.UnityAction<UnityEngine.Networking.PlayerConnection.MessageEventArgs> callback);

                class MessageEvent : UnityEngine.Events.UnityEvent<UnityEngine.Networking.PlayerConnection.MessageEventArgs>
                {
                    /*0x28a8318*/ MessageEvent();
                }

                class ConnectionChangeEvent : UnityEngine.Events.UnityEvent<int>
                {
                    /*0x28a8594*/ ConnectionChangeEvent();
                }

                class MessageTypeSubscribers
                {
                    /*0x10*/ string m_messageTypeId;
                    /*0x18*/ int subscriberCount;
                    /*0x20*/ UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.MessageEvent messageCallback;

                    /*0x28a8284*/ MessageTypeSubscribers();
                    /*0x28a85dc*/ System.Guid get_MessageTypeId();
                    /*0x28a82ec*/ void set_MessageTypeId(System.Guid value);
                }

                class <>c__DisplayClass6_0
                {
                    /*0x10*/ System.Guid messageId;

                    /*0x28a808c*/ <>c__DisplayClass6_0();
                    /*0x28a8608*/ bool <InvokeMessageIdSubscribers>b__0(UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.MessageTypeSubscribers x);
                }

                class <>c__DisplayClass7_0
                {
                    /*0x10*/ System.Guid messageId;

                    /*0x28a827c*/ <>c__DisplayClass7_0();
                    /*0x28a86ac*/ bool <AddAndCreate>b__0(UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.MessageTypeSubscribers x);
                }

                class <>c__DisplayClass8_0
                {
                    /*0x10*/ System.Guid messageId;

                    /*0x28a84cc*/ <>c__DisplayClass8_0();
                    /*0x28a8750*/ bool <UnregisterManagedCallback>b__0(UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.MessageTypeSubscribers x);
                }
            }

            class PlayerConnection : UnityEngine.ScriptableObject, UnityEngine.Networking.PlayerConnection.IEditorPlayerConnection
            {
                static /*0x0*/ UnityEngine.IPlayerEditorConnectionNative connectionNative;
                static /*0x8*/ UnityEngine.Networking.PlayerConnection.PlayerConnection s_Instance;
                /*0x18*/ UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents m_PlayerEditorConnectionEvents;
                /*0x20*/ System.Collections.Generic.List<int> m_connectedPlayers;
                /*0x28*/ bool m_IsInitilized;

                static /*0x28a87f4*/ UnityEngine.Networking.PlayerConnection.PlayerConnection get_instance();
                static /*0x28a888c*/ UnityEngine.Networking.PlayerConnection.PlayerConnection CreateInstance();
                static /*0x28a9734*/ void MessageCallbackInternal(nint data, ulong size, ulong guid, string messageId);
                static /*0x28a984c*/ void ConnectedCallbackInternal(int playerId);
                static /*0x28a9928*/ void DisconnectedCallback(int playerId);
                /*0x28a99bc*/ PlayerConnection();
                /*0x28a8910*/ bool get_isConnected();
                /*0x28a8a2c*/ void OnEnable();
                /*0x28a89ac*/ UnityEngine.IPlayerEditorConnectionNative GetConnectionNativeApi();
                /*0x28a8aec*/ void Register(System.Guid messageId, UnityEngine.Events.UnityAction<UnityEngine.Networking.PlayerConnection.MessageEventArgs> callback);
                /*0x28a8d48*/ void Unregister(System.Guid messageId, UnityEngine.Events.UnityAction<UnityEngine.Networking.PlayerConnection.MessageEventArgs> callback);
                /*0x28a8ef8*/ void RegisterConnection(UnityEngine.Events.UnityAction<int> callback);
                /*0x28a9098*/ void RegisterDisconnection(UnityEngine.Events.UnityAction<int> callback);
                /*0x28a90f8*/ void UnregisterConnection(UnityEngine.Events.UnityAction<int> callback);
                /*0x28a9158*/ void UnregisterDisconnection(UnityEngine.Events.UnityAction<int> callback);
                /*0x28a91b8*/ void Send(System.Guid messageId, byte[] data);
                /*0x28a9324*/ bool TrySend(System.Guid messageId, byte[] data);
                /*0x28a9490*/ bool BlockUntilRecvMsg(System.Guid messageId, int timeout);
                /*0x28a9698*/ void DisconnectAll();

                class <>c__DisplayClass12_0
                {
                    /*0x10*/ System.Guid messageId;

                    /*0x28a8d40*/ <>c__DisplayClass12_0();
                    /*0x28a9a64*/ bool <Register>b__0(UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.MessageTypeSubscribers x);
                }

                class <>c__DisplayClass13_0
                {
                    /*0x10*/ System.Guid messageId;

                    /*0x28a8ef0*/ <>c__DisplayClass13_0();
                    /*0x28a9b08*/ bool <Unregister>b__0(UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.MessageTypeSubscribers x);
                }

                class <>c__DisplayClass20_0
                {
                    /*0x10*/ bool msgReceived;

                    /*0x28a9690*/ <>c__DisplayClass20_0();
                    /*0x28a9bac*/ void <BlockUntilRecvMsg>b__0(UnityEngine.Networking.PlayerConnection.MessageEventArgs args);
                }
            }

            enum ConnectionTarget
            {
                None = 0,
                Player = 1,
                Editor = 2,
            }

            interface IConnectionState : System.IDisposable
            {
                UnityEngine.Networking.PlayerConnection.ConnectionTarget get_connectedToTarget();
                string get_connectionName();
            }

            class MessageEventArgs
            {
                /*0x10*/ int playerId;
                /*0x18*/ byte[] data;

                /*0x28a8094*/ MessageEventArgs();
            }

            interface IEditorPlayerConnection
            {
                void Register(System.Guid messageId, UnityEngine.Events.UnityAction<UnityEngine.Networking.PlayerConnection.MessageEventArgs> callback);
                void Unregister(System.Guid messageId, UnityEngine.Events.UnityAction<UnityEngine.Networking.PlayerConnection.MessageEventArgs> callback);
                void DisconnectAll();
                void RegisterConnection(UnityEngine.Events.UnityAction<int> callback);
                void RegisterDisconnection(UnityEngine.Events.UnityAction<int> callback);
                void UnregisterConnection(UnityEngine.Events.UnityAction<int> callback);
                void UnregisterDisconnection(UnityEngine.Events.UnityAction<int> callback);
                void Send(System.Guid messageId, byte[] data);
                bool TrySend(System.Guid messageId, byte[] data);
            }
        }
    }

    namespace Assertions
    {
        class Assert
        {
            static string UNITY_ASSERTIONS = "UNITY_ASSERTIONS";
            static /*0x0*/ bool raiseExceptions;

            static /*0x28ac18c*/ Assert();
            static /*0x28a9bb8*/ void IsTrue(bool condition);
            static /*0x28a9c24*/ void IsTrue(bool condition, string message);
            static /*0x28a9e5c*/ void IsFalse(bool condition);
            static /*0x28a9ec8*/ void IsFalse(bool condition, string message);
            static /*0x28a9f48*/ void AreApproximatelyEqual(float expected, float actual);
            static /*0x28aa000*/ void AreApproximatelyEqual(float expected, float actual, string message);
            static /*0x28aa0bc*/ void AreApproximatelyEqual(float expected, float actual, float tolerance);
            static /*0x28aa134*/ void AreApproximatelyEqual(float expected, float actual, float tolerance, string message);
            static /*0x28aa234*/ void AreNotApproximatelyEqual(float expected, float actual);
            static /*0x28aa2ec*/ void AreNotApproximatelyEqual(float expected, float actual, string message);
            static /*0x28aa3a8*/ void AreNotApproximatelyEqual(float expected, float actual, float tolerance);
            static /*0x28aa420*/ void AreNotApproximatelyEqual(float expected, float actual, float tolerance, string message);
            static void IsNull<T>(T value);
            static void IsNull<T>(T value, string message);
            static /*0x28aa4f4*/ void IsNull(UnityEngine.Object value, string message);
            static void IsNotNull<T>(T value);
            static void IsNotNull<T>(T value, string message);
            static /*0x28aa718*/ void IsNotNull(UnityEngine.Object value, string message);
            static /*0x28a9d34*/ void Fail(string message, string userMessage);
            static /*0x28aa848*/ bool Equals(object obj1, object obj2);
            static /*0x28aa898*/ bool ReferenceEquals(object obj1, object obj2);
            static void AreEqual<T>(T expected, T actual);
            static void AreEqual<T>(T expected, T actual, string message);
            static void AreEqual<T>(T expected, T actual, string message, System.Collections.Generic.IEqualityComparer<T> comparer);
            static /*0x28aa8e8*/ void AreEqual(UnityEngine.Object expected, UnityEngine.Object actual, string message);
            static void AreNotEqual<T>(T expected, T actual);
            static void AreNotEqual<T>(T expected, T actual, string message);
            static void AreNotEqual<T>(T expected, T actual, string message, System.Collections.Generic.IEqualityComparer<T> comparer);
            static /*0x28aaba4*/ void AreNotEqual(UnityEngine.Object expected, UnityEngine.Object actual, string message);
            static /*0x28aac6c*/ void AreEqual(sbyte expected, sbyte actual);
            static /*0x28aacfc*/ void AreEqual(sbyte expected, sbyte actual, string message);
            static /*0x28aad9c*/ void AreNotEqual(sbyte expected, sbyte actual);
            static /*0x28aae2c*/ void AreNotEqual(sbyte expected, sbyte actual, string message);
            static /*0x28aaecc*/ void AreEqual(byte expected, byte actual);
            static /*0x28aaf5c*/ void AreEqual(byte expected, byte actual, string message);
            static /*0x28aaffc*/ void AreNotEqual(byte expected, byte actual);
            static /*0x28ab08c*/ void AreNotEqual(byte expected, byte actual, string message);
            static /*0x28ab12c*/ void AreEqual(char expected, char actual);
            static /*0x28ab1bc*/ void AreEqual(char expected, char actual, string message);
            static /*0x28ab25c*/ void AreNotEqual(char expected, char actual);
            static /*0x28ab2ec*/ void AreNotEqual(char expected, char actual, string message);
            static /*0x28ab38c*/ void AreEqual(short expected, short actual);
            static /*0x28ab41c*/ void AreEqual(short expected, short actual, string message);
            static /*0x28ab4bc*/ void AreNotEqual(short expected, short actual);
            static /*0x28ab54c*/ void AreNotEqual(short expected, short actual, string message);
            static /*0x28ab5ec*/ void AreEqual(ushort expected, ushort actual);
            static /*0x28ab67c*/ void AreEqual(ushort expected, ushort actual, string message);
            static /*0x28ab71c*/ void AreNotEqual(ushort expected, ushort actual);
            static /*0x28ab7ac*/ void AreNotEqual(ushort expected, ushort actual, string message);
            static /*0x28ab84c*/ void AreEqual(int expected, int actual);
            static /*0x28ab8d8*/ void AreEqual(int expected, int actual, string message);
            static /*0x28ab974*/ void AreNotEqual(int expected, int actual);
            static /*0x28aba00*/ void AreNotEqual(int expected, int actual, string message);
            static /*0x28aba9c*/ void AreEqual(uint expected, uint actual);
            static /*0x28abb28*/ void AreEqual(uint expected, uint actual, string message);
            static /*0x28abbc4*/ void AreNotEqual(uint expected, uint actual);
            static /*0x28abc50*/ void AreNotEqual(uint expected, uint actual, string message);
            static /*0x28abcec*/ void AreEqual(long expected, long actual);
            static /*0x28abd78*/ void AreEqual(long expected, long actual, string message);
            static /*0x28abe14*/ void AreNotEqual(long expected, long actual);
            static /*0x28abea0*/ void AreNotEqual(long expected, long actual, string message);
            static /*0x28abf3c*/ void AreEqual(ulong expected, ulong actual);
            static /*0x28abfc8*/ void AreEqual(ulong expected, ulong actual, string message);
            static /*0x28ac064*/ void AreNotEqual(ulong expected, ulong actual);
            static /*0x28ac0f0*/ void AreNotEqual(ulong expected, ulong actual, string message);
        }

        class AssertionMessageUtil
        {
            static string k_Expected = "Expected:";
            static string k_AssertionFailed = "Assertion failure.";

            static /*0x28ac1d8*/ string GetMessage(string failureMessage);
            static /*0x28ac2c4*/ string GetMessage(string failureMessage, string expected);
            static /*0x28aa9b0*/ string GetEqualityMessage(object actual, object expected, bool expectEqual);
            static /*0x28aa5b0*/ string NullFailureMessage(object value, bool expectNull);
            static /*0x28a9ca4*/ string BooleanFailureMessage(bool expected);
            /*0x28ac41c*/ AssertionMessageUtil();
        }

        class AssertionException : System.Exception
        {
            /*0x90*/ string m_UserMessage;

            /*0x28aa7d4*/ AssertionException(string message, string userMessage);
            /*0x28ac424*/ string get_Message();
        }

        namespace Comparers
        {
            class FloatComparer : System.Collections.Generic.IEqualityComparer<float>
            {
                static float kEpsilon = 0.000009999999747378752;
                static /*0x0*/ UnityEngine.Assertions.Comparers.FloatComparer s_ComparerWithDefaultTolerance;
                /*0x10*/ float m_Error;
                /*0x14*/ bool m_Relative;

                static /*0x28ac6e0*/ FloatComparer();
                static /*0x28ac5c0*/ bool AreEqual(float expected, float actual, float error);
                static /*0x28ac634*/ bool AreEqualRelative(float expected, float actual, float error);
                /*0x28ac498*/ FloatComparer();
                /*0x28ac4f8*/ FloatComparer(bool relative);
                /*0x28aa208*/ FloatComparer(float error);
                /*0x28ac4c0*/ FloatComparer(float error, bool relative);
                /*0x28ac52c*/ bool Equals(float a, float b);
                /*0x28ac6d8*/ int GetHashCode(float obj);
            }
        }

        namespace Must
        {
            class MustExtensions
            {
                static /*0x28ac754*/ void MustBeApproximatelyEqual(float actual, float expected);
                static /*0x28ac7b8*/ void MustBeApproximatelyEqual(float actual, float expected, string message);
                static /*0x28ac824*/ void MustBeApproximatelyEqual(float actual, float expected, float tolerance);
                static /*0x28ac898*/ void MustBeApproximatelyEqual(float actual, float expected, float tolerance, string message);
                static /*0x28ac914*/ void MustNotBeApproximatelyEqual(float actual, float expected);
                static /*0x28ac978*/ void MustNotBeApproximatelyEqual(float actual, float expected, string message);
                static /*0x28ac9e4*/ void MustNotBeApproximatelyEqual(float actual, float expected, float tolerance);
                static /*0x28aca58*/ void MustNotBeApproximatelyEqual(float actual, float expected, float tolerance, string message);
                static void MustBeEqual<T>(T actual, T expected);
                static void MustBeEqual<T>(T actual, T expected, string message);
                static void MustNotBeEqual<T>(T actual, T expected);
                static void MustNotBeEqual<T>(T actual, T expected, string message);
                static /*0x28acad4*/ void MustBeTrue(bool value);
                static /*0x28acb28*/ void MustBeTrue(bool value, string message);
                static /*0x28acb8c*/ void MustBeFalse(bool value);
                static /*0x28acbe0*/ void MustBeFalse(bool value, string message);
                static void MustBeNull<T>(T expected);
                static void MustBeNull<T>(T expected, string message);
                static void MustNotBeNull<T>(T expected);
                static void MustNotBeNull<T>(T expected, string message);
            }
        }
    }

    namespace Scripting
    {
        class PreserveAttribute : System.Attribute
        {
            /*0x28acc44*/ PreserveAttribute();
        }

        class RequiredMemberAttribute : System.Attribute
        {
            /*0x28acc4c*/ RequiredMemberAttribute();
        }

        class GarbageCollector
        {
            static /*0x0*/ System.Action<UnityEngine.Scripting.GarbageCollector.Mode> GCModeChanged;

            static /*0x28acc54*/ void add_GCModeChanged(System.Action<UnityEngine.Scripting.GarbageCollector.Mode> value);
            static /*0x28acd20*/ void remove_GCModeChanged(System.Action<UnityEngine.Scripting.GarbageCollector.Mode> value);
            static /*0x28acdec*/ UnityEngine.Scripting.GarbageCollector.Mode get_GCMode();
            static /*0x28ace3c*/ void set_GCMode(UnityEngine.Scripting.GarbageCollector.Mode value);
            static /*0x28acefc*/ void SetMode(UnityEngine.Scripting.GarbageCollector.Mode mode);
            static /*0x28ace14*/ UnityEngine.Scripting.GarbageCollector.Mode GetMode();
            static /*0x28acf38*/ bool get_isIncremental();
            static /*0x28acf60*/ ulong get_incrementalTimeSliceNanoseconds();
            static /*0x28acf88*/ void set_incrementalTimeSliceNanoseconds(ulong value);
            static /*0x28acfc4*/ bool CollectIncremental(ulong nanoseconds);

            enum Mode
            {
                Disabled = 0,
                Enabled = 1,
                Manual = 2,
            }
        }

        class RequireDerivedAttribute : System.Attribute
        {
            /*0x28ad000*/ RequireDerivedAttribute();
        }

        class AlwaysLinkAssemblyAttribute : System.Attribute
        {
            /*0x28ad008*/ AlwaysLinkAssemblyAttribute();
        }

        class RequireAttributeUsagesAttribute : System.Attribute
        {
            /*0x28ad010*/ RequireAttributeUsagesAttribute();
        }

        class RequireImplementorsAttribute : System.Attribute
        {
            /*0x28ad018*/ RequireImplementorsAttribute();
        }

        class RequiredInterfaceAttribute : System.Attribute
        {
            /*0x28ad020*/ RequiredInterfaceAttribute(System.Type interfaceType);
        }

        namespace APIUpdating
        {
            struct MovedFromAttributeData
            {
                /*0x10*/ string className;
                /*0x18*/ string nameSpace;
                /*0x20*/ string assembly;
                /*0x28*/ bool classHasChanged;
                /*0x29*/ bool nameSpaceHasChanged;
                /*0x2a*/ bool assemblyHasChanged;
                /*0x2b*/ bool autoUdpateAPI;

                /*0x28ad028*/ void Set(bool autoUpdateAPI, string sourceNamespace, string sourceAssembly, string sourceClassName);
            }

            class MovedFromAttribute : System.Attribute
            {
                /*0x10*/ UnityEngine.Scripting.APIUpdating.MovedFromAttributeData data;

                /*0x28ad060*/ MovedFromAttribute(bool autoUpdateAPI, string sourceNamespace, string sourceAssembly, string sourceClassName);
                /*0x28ad0cc*/ MovedFromAttribute(string sourceNamespace);
                /*0x28ad110*/ bool get_AffectsAPIUpdater();
                /*0x28ad130*/ bool get_IsInDifferentAssembly();
            }
        }
    }

    namespace Device
    {
        class Screen
        {
            static /*0x28ad138*/ float get_brightness();
            static /*0x28ad140*/ void set_brightness(float value);
            static /*0x28ad148*/ bool get_autorotateToLandscapeLeft();
            static /*0x28ad150*/ void set_autorotateToLandscapeLeft(bool value);
            static /*0x28ad15c*/ bool get_autorotateToLandscapeRight();
            static /*0x28ad164*/ void set_autorotateToLandscapeRight(bool value);
            static /*0x28ad170*/ bool get_autorotateToPortrait();
            static /*0x28ad178*/ void set_autorotateToPortrait(bool value);
            static /*0x28ad184*/ bool get_autorotateToPortraitUpsideDown();
            static /*0x28ad18c*/ void set_autorotateToPortraitUpsideDown(bool value);
            static /*0x28ad198*/ UnityEngine.Resolution get_currentResolution();
            static /*0x28ad1b0*/ UnityEngine.Rect[] get_cutouts();
            static /*0x28ad1b8*/ float get_dpi();
            static /*0x28ad1c0*/ bool get_fullScreen();
            static /*0x28ad1c8*/ void set_fullScreen(bool value);
            static /*0x28ad1d4*/ UnityEngine.FullScreenMode get_fullScreenMode();
            static /*0x28ad1dc*/ void set_fullScreenMode(UnityEngine.FullScreenMode value);
            static /*0x28ad1e4*/ int get_height();
            static /*0x28ad1ec*/ int get_width();
            static /*0x28ad1f4*/ UnityEngine.ScreenOrientation get_orientation();
            static /*0x28ad1fc*/ void set_orientation(UnityEngine.ScreenOrientation value);
            static /*0x28ad204*/ UnityEngine.Resolution[] get_resolutions();
            static /*0x28ad20c*/ UnityEngine.Rect get_safeArea();
            static /*0x28ad214*/ int get_sleepTimeout();
            static /*0x28ad21c*/ void set_sleepTimeout(int value);
            static /*0x28ad224*/ void SetResolution(int width, int height, UnityEngine.FullScreenMode fullscreenMode, int preferredRefreshRate);
            static /*0x28ad22c*/ void SetResolution(int width, int height, UnityEngine.FullScreenMode fullscreenMode);
            static /*0x28ad238*/ void SetResolution(int width, int height, bool fullscreen, int preferredRefreshRate);
            static /*0x28ad24c*/ void SetResolution(int width, int height, bool fullscreen);
            static /*0x28ad264*/ UnityEngine.Vector2Int get_mainWindowPosition();
            static /*0x28ad26c*/ UnityEngine.DisplayInfo get_mainWindowDisplayInfo();
            static /*0x28ad2a0*/ void GetDisplayLayout(System.Collections.Generic.List<UnityEngine.DisplayInfo> displayLayout);
            static /*0x28ad2a8*/ UnityEngine.AsyncOperation MoveMainWindowTo(ref UnityEngine.DisplayInfo display, UnityEngine.Vector2Int position);
        }

        class SystemInfo
        {
            static string unsupportedIdentifier = "n/a";

            static /*0x28ad2b0*/ float get_batteryLevel();
            static /*0x28ad2b8*/ UnityEngine.BatteryStatus get_batteryStatus();
            static /*0x28ad2c0*/ string get_operatingSystem();
            static /*0x28ad2c8*/ UnityEngine.OperatingSystemFamily get_operatingSystemFamily();
            static /*0x28ad2d0*/ string get_processorType();
            static /*0x28ad2d8*/ int get_processorFrequency();
            static /*0x28ad2e0*/ int get_processorCount();
            static /*0x28ad2e8*/ int get_systemMemorySize();
            static /*0x28ad2f0*/ string get_deviceUniqueIdentifier();
            static /*0x28ad2f8*/ string get_deviceName();
            static /*0x28ad300*/ string get_deviceModel();
            static /*0x28ad308*/ bool get_supportsAccelerometer();
            static /*0x28ad310*/ bool get_supportsGyroscope();
            static /*0x28ad318*/ bool get_supportsLocationService();
            static /*0x28ad320*/ bool get_supportsVibration();
            static /*0x28ad328*/ bool get_supportsAudio();
            static /*0x28ad330*/ UnityEngine.DeviceType get_deviceType();
            static /*0x28ad338*/ int get_graphicsMemorySize();
            static /*0x28ad340*/ string get_graphicsDeviceName();
            static /*0x28ad348*/ string get_graphicsDeviceVendor();
            static /*0x28ad350*/ int get_graphicsDeviceID();
            static /*0x28ad358*/ int get_graphicsDeviceVendorID();
            static /*0x28ad360*/ UnityEngine.Rendering.GraphicsDeviceType get_graphicsDeviceType();
            static /*0x28ad368*/ bool get_graphicsUVStartsAtTop();
            static /*0x28ad370*/ string get_graphicsDeviceVersion();
            static /*0x28ad378*/ int get_graphicsShaderLevel();
            static /*0x28ad380*/ bool get_graphicsMultiThreaded();
            static /*0x28ad388*/ UnityEngine.Rendering.RenderingThreadingMode get_renderingThreadingMode();
            static /*0x28ad390*/ bool get_hasHiddenSurfaceRemovalOnGPU();
            static /*0x28ad398*/ bool get_hasDynamicUniformArrayIndexingInFragmentShaders();
            static /*0x28ad3a0*/ bool get_supportsShadows();
            static /*0x28ad3a8*/ bool get_supportsRawShadowDepthSampling();
            static /*0x28ad3b0*/ bool get_supportsMotionVectors();
            static /*0x28ad3b8*/ bool get_supports3DTextures();
            static /*0x28ad3c0*/ bool get_supportsCompressed3DTextures();
            static /*0x28ad3c8*/ bool get_supports2DArrayTextures();
            static /*0x28ad3d0*/ bool get_supports3DRenderTextures();
            static /*0x28ad3d8*/ bool get_supportsCubemapArrayTextures();
            static /*0x28ad3e0*/ bool get_supportsAnisotropicFilter();
            static /*0x28ad3e8*/ UnityEngine.Rendering.CopyTextureSupport get_copyTextureSupport();
            static /*0x28ad3f0*/ bool get_supportsComputeShaders();
            static /*0x28ad3f8*/ bool get_supportsGeometryShaders();
            static /*0x28ad400*/ bool get_supportsTessellationShaders();
            static /*0x28ad408*/ bool get_supportsRenderTargetArrayIndexFromVertexShader();
            static /*0x28ad410*/ bool get_supportsInstancing();
            static /*0x28ad418*/ bool get_supportsHardwareQuadTopology();
            static /*0x28ad420*/ bool get_supports32bitsIndexBuffer();
            static /*0x28ad428*/ bool get_supportsSparseTextures();
            static /*0x28ad430*/ int get_supportedRenderTargetCount();
            static /*0x28ad438*/ bool get_supportsSeparatedRenderTargetsBlend();
            static /*0x28ad440*/ int get_supportedRandomWriteTargetCount();
            static /*0x28ad448*/ int get_supportsMultisampledTextures();
            static /*0x28ad450*/ bool get_supportsMultisampled2DArrayTextures();
            static /*0x28ad458*/ bool get_supportsMultisampleAutoResolve();
            static /*0x28ad460*/ int get_supportsTextureWrapMirrorOnce();
            static /*0x28ad468*/ bool get_usesReversedZBuffer();
            static /*0x28ad470*/ bool SupportsRenderTextureFormat(UnityEngine.RenderTextureFormat format);
            static /*0x28ad478*/ bool SupportsBlendingOnRenderTextureFormat(UnityEngine.RenderTextureFormat format);
            static /*0x28ad480*/ bool SupportsTextureFormat(UnityEngine.TextureFormat format);
            static /*0x28ad488*/ bool SupportsVertexAttributeFormat(UnityEngine.Rendering.VertexAttributeFormat format, int dimension);
            static /*0x28ad490*/ UnityEngine.NPOTSupport get_npotSupport();
            static /*0x28ad498*/ int get_maxTextureSize();
            static /*0x28ad4a0*/ int get_maxTexture3DSize();
            static /*0x28ad4a8*/ int get_maxTextureArraySlices();
            static /*0x28ad4b0*/ int get_maxCubemapSize();
            static /*0x28ad4b8*/ int get_maxAnisotropyLevel();
            static /*0x28ad4c0*/ int get_maxComputeBufferInputsVertex();
            static /*0x28ad4c8*/ int get_maxComputeBufferInputsFragment();
            static /*0x28ad4d0*/ int get_maxComputeBufferInputsGeometry();
            static /*0x28ad4d8*/ int get_maxComputeBufferInputsDomain();
            static /*0x28ad4e0*/ int get_maxComputeBufferInputsHull();
            static /*0x28ad4e8*/ int get_maxComputeBufferInputsCompute();
            static /*0x28ad4f0*/ int get_maxComputeWorkGroupSize();
            static /*0x28ad4f8*/ int get_maxComputeWorkGroupSizeX();
            static /*0x28ad500*/ int get_maxComputeWorkGroupSizeY();
            static /*0x28ad508*/ int get_maxComputeWorkGroupSizeZ();
            static /*0x28ad510*/ int get_computeSubGroupSize();
            static /*0x28ad518*/ bool get_supportsAsyncCompute();
            static /*0x28ad520*/ bool get_supportsGpuRecorder();
            static /*0x28ad528*/ bool get_supportsGraphicsFence();
            static /*0x28ad530*/ bool get_supportsAsyncGPUReadback();
            static /*0x28ad538*/ bool get_supportsRayTracing();
            static /*0x28ad540*/ bool get_supportsSetConstantBuffer();
            static /*0x28ad548*/ int get_constantBufferOffsetAlignment();
            static /*0x28ad550*/ long get_maxGraphicsBufferSize();
            static /*0x28ad558*/ bool get_hasMipMaxLevel();
            static /*0x28ad560*/ bool get_supportsMipStreaming();
            static /*0x28ad568*/ bool get_usesLoadStoreActions();
            static /*0x28ad570*/ UnityEngine.HDRDisplaySupportFlags get_hdrDisplaySupportFlags();
            static /*0x28ad578*/ bool get_supportsConservativeRaster();
            static /*0x28ad580*/ bool get_supportsMultiview();
            static /*0x28ad588*/ bool get_supportsStoreAndResolveAction();
            static /*0x28ad590*/ bool get_supportsMultisampleResolveDepth();
            static /*0x28ad598*/ bool IsFormatSupported(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage);
            static /*0x28ad5a0*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetCompatibleFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage);
            static /*0x28ad5a8*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetGraphicsFormat(UnityEngine.Experimental.Rendering.DefaultFormat format);
            static /*0x28ad5b0*/ int GetRenderTextureSupportedMSAASampleCount(UnityEngine.RenderTextureDescriptor desc);
            static /*0x28ad5e8*/ bool SupportsRandomWriteOnRenderTextureFormat(UnityEngine.RenderTextureFormat format);
        }

        class Application
        {
            static /*0x28ad5f0*/ string get_absoluteURL();
            static /*0x28ad5f8*/ UnityEngine.ThreadPriority get_backgroundLoadingPriority();
            static /*0x28ad600*/ void set_backgroundLoadingPriority(UnityEngine.ThreadPriority value);
            static /*0x28ad608*/ string get_buildGUID();
            static /*0x28ad610*/ string get_cloudProjectId();
            static /*0x28ad618*/ string get_companyName();
            static /*0x28ad620*/ string get_consoleLogPath();
            static /*0x28ad628*/ string get_dataPath();
            static /*0x28ad630*/ bool get_genuine();
            static /*0x28ad638*/ bool get_genuineCheckAvailable();
            static /*0x28ad640*/ string get_identifier();
            static /*0x28ad648*/ string get_installerName();
            static /*0x28ad650*/ UnityEngine.ApplicationInstallMode get_installMode();
            static /*0x28ad658*/ UnityEngine.NetworkReachability get_internetReachability();
            static /*0x28ad660*/ bool get_isBatchMode();
            static /*0x28ad668*/ bool get_isConsolePlatform();
            static /*0x28ad670*/ bool get_isEditor();
            static /*0x28ad678*/ bool get_isFocused();
            static /*0x28ad680*/ bool get_isMobilePlatform();
            static /*0x28ad688*/ bool get_isPlaying();
            static /*0x28ad690*/ string get_persistentDataPath();
            static /*0x28ad698*/ UnityEngine.RuntimePlatform get_platform();
            static /*0x28ad6a0*/ string get_productName();
            static /*0x28ad6a8*/ bool get_runInBackground();
            static /*0x28ad6b0*/ void set_runInBackground(bool value);
            static /*0x28ad6bc*/ UnityEngine.ApplicationSandboxType get_sandboxType();
            static /*0x28ad6c4*/ string get_streamingAssetsPath();
            static /*0x28ad6cc*/ UnityEngine.SystemLanguage get_systemLanguage();
            static /*0x28ad6d4*/ int get_targetFrameRate();
            static /*0x28ad6dc*/ void set_targetFrameRate(int value);
            static /*0x28ad6e4*/ string get_temporaryCachePath();
            static /*0x28ad6ec*/ string get_unityVersion();
            static /*0x28ad6f4*/ string get_version();
            static /*0x28ad6fc*/ void add_deepLinkActivated(System.Action<string> value);
            static /*0x28ad704*/ void remove_deepLinkActivated(System.Action<string> value);
            static /*0x28ad70c*/ void add_focusChanged(System.Action<bool> value);
            static /*0x28ad714*/ void remove_focusChanged(System.Action<bool> value);
            static /*0x28ad71c*/ void add_logMessageReceived(UnityEngine.Application.LogCallback value);
            static /*0x28ad724*/ void remove_logMessageReceived(UnityEngine.Application.LogCallback value);
            static /*0x28ad72c*/ void add_logMessageReceivedThreaded(UnityEngine.Application.LogCallback value);
            static /*0x28ad734*/ void remove_logMessageReceivedThreaded(UnityEngine.Application.LogCallback value);
            static /*0x28ad73c*/ void add_lowMemory(UnityEngine.Application.LowMemoryCallback value);
            static /*0x28ad744*/ void remove_lowMemory(UnityEngine.Application.LowMemoryCallback value);
            static /*0x28ad74c*/ void add_onBeforeRender(UnityEngine.Events.UnityAction value);
            static /*0x28ad754*/ void remove_onBeforeRender(UnityEngine.Events.UnityAction value);
            static /*0x28ad75c*/ void add_quitting(System.Action value);
            static /*0x28ad764*/ void remove_quitting(System.Action value);
            static /*0x28ad76c*/ void add_wantsToQuit(System.Func<bool> value);
            static /*0x28ad774*/ void remove_wantsToQuit(System.Func<bool> value);
            static /*0x28ad77c*/ void add_unloading(System.Action value);
            static /*0x28ad784*/ void remove_unloading(System.Action value);
            static /*0x28ad78c*/ bool CanStreamedLevelBeLoaded(int levelIndex);
            static /*0x28ad794*/ bool CanStreamedLevelBeLoaded(string levelName);
            static /*0x28ad79c*/ string[] GetBuildTags();
            static /*0x28ad7a4*/ UnityEngine.StackTraceLogType GetStackTraceLogType(UnityEngine.LogType logType);
            static /*0x28ad7ac*/ bool HasProLicense();
            static /*0x28ad7b4*/ bool HasUserAuthorization(UnityEngine.UserAuthorization mode);
            static /*0x28ad7bc*/ bool IsPlaying(UnityEngine.Object obj);
            static /*0x28ad7c4*/ void OpenURL(string url);
            static /*0x28ad7cc*/ void Quit();
            static /*0x28ad7d4*/ void Quit(int exitCode);
            static /*0x28ad7dc*/ bool RequestAdvertisingIdentifierAsync(UnityEngine.Application.AdvertisingIdentifierCallback delegateMethod);
            static /*0x28ad7e4*/ UnityEngine.AsyncOperation RequestUserAuthorization(UnityEngine.UserAuthorization mode);
            static /*0x28ad7ec*/ void SetBuildTags(string[] buildTags);
            static /*0x28ad7f4*/ void SetStackTraceLogType(UnityEngine.LogType logType, UnityEngine.StackTraceLogType stackTraceType);
            static /*0x28ad7fc*/ void Unload();
        }
    }

    namespace Windows
    {
        class Input
        {
            static /*0x28ad804*/ void ForwardRawInput(nint rawInputHeaderIndices, nint rawInputDataIndices, uint indicesCount, nint rawInputData, uint rawInputDataSize);
            static /*0x28ad838*/ void ForwardRawInput(uint* rawInputHeaderIndices, uint* rawInputDataIndices, uint indicesCount, byte* rawInputData, uint rawInputDataSize);
        }
    }

    namespace Internal
    {
        interface ISubAssetNotDuplicatable
        {
        }

        class ExcludeFromDocsAttribute : System.Attribute
        {
            /*0x28ad878*/ ExcludeFromDocsAttribute();
        }

        class DefaultValueAttribute : System.Attribute
        {
            /*0x10*/ object DefaultValue;

            /*0x28ad880*/ DefaultValueAttribute(string value);
            /*0x28ad8a8*/ object get_Value();
            /*0x28ad8b0*/ bool Equals(object obj);
            /*0x28ad968*/ int GetHashCode();
        }
    }

    namespace SearchService
    {
        class ObjectSelectorHandlerWithLabelsAttribute : System.Attribute
        {
            /*0x10*/ string[] <labels>k__BackingField;
            /*0x18*/ bool <matchAll>k__BackingField;

            /*0x28ad99c*/ ObjectSelectorHandlerWithLabelsAttribute(string[] labels);
            /*0x28ad9cc*/ ObjectSelectorHandlerWithLabelsAttribute(bool matchAll, string[] labels);
            /*0x28ad98c*/ string[] get_labels();
            /*0x28ad994*/ bool get_matchAll();
        }

        class ObjectSelectorHandlerWithTagsAttribute : System.Attribute
        {
            /*0x10*/ string[] <tags>k__BackingField;

            /*0x28ada04*/ ObjectSelectorHandlerWithTagsAttribute(string[] tags);
            /*0x28ad9fc*/ string[] get_tags();
        }
    }

    namespace Search
    {
        enum SearchViewFlags
        {
            None = 0,
            Debug = 16,
            NoIndexing = 32,
            Packages = 256,
            OpenLeftSidePanel = 2048,
            OpenInspectorPreview = 4096,
            Centered = 8192,
            HideSearchBar = 16384,
            CompactView = 32768,
            ListView = 65536,
            GridView = 131072,
            TableView = 262144,
            EnableSearchQuery = 524288,
            DisableInspectorPreview = 1048576,
            DisableSavedSearchQuery = 2097152,
            OpenInBuilderMode = 4194304,
            OpenInTextMode = 8388608,
            DisableBuilderModeToggle = 16777216,
            Borderless = 33554432,
        }

        class SearchContextAttribute : UnityEngine.PropertyAttribute
        {
            /*0x18*/ string <query>k__BackingField;
            /*0x20*/ string[] <providerIds>k__BackingField;
            /*0x28*/ System.Type[] <instantiableProviders>k__BackingField;
            /*0x30*/ UnityEngine.Search.SearchViewFlags <flags>k__BackingField;

            /*0x28ada6c*/ SearchContextAttribute(string query);
            /*0x28ada90*/ SearchContextAttribute(string query, UnityEngine.Search.SearchViewFlags flags);
            /*0x28ada9c*/ SearchContextAttribute(string query, string providerIdsCommaSeparated);
            /*0x28ada7c*/ SearchContextAttribute(string query, string providerIdsCommaSeparated, UnityEngine.Search.SearchViewFlags flags);
            /*0x28adc14*/ SearchContextAttribute(string query, System.Type[] instantiableProviders);
            /*0x28adc24*/ SearchContextAttribute(string query, UnityEngine.Search.SearchViewFlags flags, System.Type[] instantiableProviders);
            /*0x28adaac*/ SearchContextAttribute(string query, UnityEngine.Search.SearchViewFlags flags, string providerIdsCommaSeparated, System.Type[] instantiableProviders);
            /*0x28ada2c*/ string get_query();
            /*0x28ada34*/ void set_query(string value);
            /*0x28ada3c*/ string[] get_providerIds();
            /*0x28ada44*/ void set_providerIds(string[] value);
            /*0x28ada4c*/ System.Type[] get_instantiableProviders();
            /*0x28ada54*/ void set_instantiableProviders(System.Type[] value);
            /*0x28ada5c*/ UnityEngine.Search.SearchViewFlags get_flags();
            /*0x28ada64*/ void set_flags(UnityEngine.Search.SearchViewFlags value);
        }
    }

    namespace Diagnostics
    {
        class PlayerConnection
        {
            static /*0x28adc30*/ bool get_connected();
            static /*0x28adc48*/ void SendFile(string remoteFilePath, byte[] data);
        }

        enum ForcedCrashCategory
        {
            AccessViolation = 0,
            FatalError = 1,
            Abort = 2,
            PureVirtualFunction = 3,
            MonoAbort = 4,
        }

        class Utils
        {
            static /*0x28adc4c*/ void ForceCrash(UnityEngine.Diagnostics.ForcedCrashCategory crashCategory);
            static /*0x28adc88*/ void NativeAssert(string message);
            static /*0x28adcc4*/ void NativeError(string message);
            static /*0x28add00*/ void NativeWarning(string message);
        }
    }

    namespace Rendering
    {
        class CommandBuffer : System.IDisposable
        {
            /*0x10*/ nint m_Ptr;

            static /*0x28aece4*/ nint InitBuffer();
            /*0x28b6a84*/ CommandBuffer();
            /*0x28add3c*/ void ConvertTexture(UnityEngine.Rendering.RenderTargetIdentifier src, UnityEngine.Rendering.RenderTargetIdentifier dst);
            /*0x28adeb4*/ void ConvertTexture(UnityEngine.Rendering.RenderTargetIdentifier src, int srcElement, UnityEngine.Rendering.RenderTargetIdentifier dst, int dstElement);
            /*0x28adf7c*/ void WaitAllAsyncReadbackRequests();
            /*0x28adfb8*/ void RequestAsyncReadback(UnityEngine.ComputeBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28ae09c*/ void RequestAsyncReadback(UnityEngine.GraphicsBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28ae180*/ void RequestAsyncReadback(UnityEngine.ComputeBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28ae294*/ void RequestAsyncReadback(UnityEngine.GraphicsBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28ae3a8*/ void RequestAsyncReadback(UnityEngine.Texture src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28ae48c*/ void RequestAsyncReadback(UnityEngine.Texture src, int mipIndex, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28ae588*/ void RequestAsyncReadback(UnityEngine.Texture src, int mipIndex, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28ae6fc*/ void RequestAsyncReadback(UnityEngine.Texture src, int mipIndex, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28ae79c*/ void RequestAsyncReadback(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28ae918*/ void RequestAsyncReadback(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28aeb0c*/ void RequestAsyncReadback(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.ComputeBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.ComputeBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.GraphicsBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.GraphicsBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, int mipIndex, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, int mipIndex, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, int mipIndex, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.ComputeBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.ComputeBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.GraphicsBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.GraphicsBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, int mipIndex, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, int mipIndex, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, int mipIndex, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            void RequestAsyncReadbackIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28ae040*/ void Internal_RequestAsyncReadback_1(UnityEngine.ComputeBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback, UnityEngine.Rendering.AsyncRequestNativeArrayData* nativeArrayData);
            /*0x28ae220*/ void Internal_RequestAsyncReadback_2(UnityEngine.ComputeBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback, UnityEngine.Rendering.AsyncRequestNativeArrayData* nativeArrayData);
            /*0x28ae430*/ void Internal_RequestAsyncReadback_3(UnityEngine.Texture src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback, UnityEngine.Rendering.AsyncRequestNativeArrayData* nativeArrayData);
            /*0x28ae51c*/ void Internal_RequestAsyncReadback_4(UnityEngine.Texture src, int mipIndex, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback, UnityEngine.Rendering.AsyncRequestNativeArrayData* nativeArrayData);
            /*0x28ae688*/ void Internal_RequestAsyncReadback_5(UnityEngine.Texture src, int mipIndex, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback, UnityEngine.Rendering.AsyncRequestNativeArrayData* nativeArrayData);
            /*0x28ae870*/ void Internal_RequestAsyncReadback_6(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback, UnityEngine.Rendering.AsyncRequestNativeArrayData* nativeArrayData);
            /*0x28aea54*/ void Internal_RequestAsyncReadback_7(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback, UnityEngine.Rendering.AsyncRequestNativeArrayData* nativeArrayData);
            /*0x28ae124*/ void Internal_RequestAsyncReadback_8(UnityEngine.GraphicsBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback, UnityEngine.Rendering.AsyncRequestNativeArrayData* nativeArrayData);
            /*0x28ae334*/ void Internal_RequestAsyncReadback_9(UnityEngine.GraphicsBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback, UnityEngine.Rendering.AsyncRequestNativeArrayData* nativeArrayData);
            /*0x28aebf0*/ void SetInvertCulling(bool invertCulling);
            /*0x28ade48*/ void ConvertTexture_Internal(UnityEngine.Rendering.RenderTargetIdentifier src, int srcElement, UnityEngine.Rendering.RenderTargetIdentifier dst, int dstElement);
            /*0x28aeca0*/ void Internal_SetSinglePassStereo(UnityEngine.Rendering.SinglePassStereoMode mode);
            /*0x28aed0c*/ nint CreateGPUFence_Internal(UnityEngine.Rendering.GraphicsFenceType fenceType, UnityEngine.Rendering.SynchronisationStageFlags stage);
            /*0x28aed60*/ void WaitOnGPUFence_Internal(nint fencePtr, UnityEngine.Rendering.SynchronisationStageFlags stage);
            /*0x28aedb4*/ void ReleaseBuffer();
            /*0x28aedf0*/ void SetComputeFloatParam(UnityEngine.ComputeShader computeShader, int nameID, float val);
            /*0x28aee54*/ void SetComputeIntParam(UnityEngine.ComputeShader computeShader, int nameID, int val);
            /*0x28aeeb0*/ void SetComputeVectorParam(UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.Vector4 val);
            /*0x28aef78*/ void SetComputeVectorArrayParam(UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.Vector4[] values);
            /*0x28aefd4*/ void SetComputeMatrixParam(UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.Matrix4x4 val);
            /*0x28af08c*/ void SetComputeMatrixArrayParam(UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.Matrix4x4[] values);
            /*0x28af0e8*/ void Internal_SetComputeFloats(UnityEngine.ComputeShader computeShader, int nameID, float[] values);
            /*0x28af144*/ void Internal_SetComputeInts(UnityEngine.ComputeShader computeShader, int nameID, int[] values);
            /*0x28af1a0*/ void Internal_SetComputeTextureParam(UnityEngine.ComputeShader computeShader, int kernelIndex, int nameID, ref UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel, UnityEngine.Rendering.RenderTextureSubElement element);
            /*0x28af224*/ void Internal_SetComputeBufferParam(UnityEngine.ComputeShader computeShader, int kernelIndex, int nameID, UnityEngine.ComputeBuffer buffer);
            /*0x28af290*/ void Internal_SetComputeGraphicsBufferParam(UnityEngine.ComputeShader computeShader, int kernelIndex, int nameID, UnityEngine.GraphicsBuffer buffer);
            /*0x28af2fc*/ void Internal_SetComputeConstantComputeBufferParam(UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.ComputeBuffer buffer, int offset, int size);
            /*0x28af370*/ void Internal_SetComputeConstantGraphicsBufferParam(UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.GraphicsBuffer buffer, int offset, int size);
            /*0x28af3e4*/ void Internal_DispatchCompute(UnityEngine.ComputeShader computeShader, int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ);
            /*0x28af458*/ void Internal_DispatchComputeIndirect(UnityEngine.ComputeShader computeShader, int kernelIndex, UnityEngine.ComputeBuffer indirectBuffer, uint argsOffset);
            /*0x28af4c4*/ void Internal_DispatchComputeIndirectGraphicsBuffer(UnityEngine.ComputeShader computeShader, int kernelIndex, UnityEngine.GraphicsBuffer indirectBuffer, uint argsOffset);
            /*0x28af530*/ void Internal_SetRayTracingBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.ComputeBuffer buffer);
            /*0x28af58c*/ void Internal_SetRayTracingConstantComputeBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.ComputeBuffer buffer, int offset, int size);
            /*0x28af600*/ void Internal_SetRayTracingConstantGraphicsBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.GraphicsBuffer buffer, int offset, int size);
            /*0x28af674*/ void Internal_SetRayTracingTextureParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, ref UnityEngine.Rendering.RenderTargetIdentifier rt);
            /*0x28af6d0*/ void Internal_SetRayTracingFloatParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, float val);
            /*0x28af734*/ void Internal_SetRayTracingIntParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, int val);
            /*0x28af790*/ void Internal_SetRayTracingVectorParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.Vector4 val);
            /*0x28af858*/ void Internal_SetRayTracingVectorArrayParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.Vector4[] values);
            /*0x28af8b4*/ void Internal_SetRayTracingMatrixParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.Matrix4x4 val);
            /*0x28af96c*/ void Internal_SetRayTracingMatrixArrayParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.Matrix4x4[] values);
            /*0x28af9c8*/ void Internal_SetRayTracingFloats(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, float[] values);
            /*0x28afa24*/ void Internal_SetRayTracingInts(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, int[] values);
            /*0x28afa80*/ void Internal_BuildRayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure accelerationStructure, UnityEngine.Vector3 relativeOrigin);
            /*0x28afb30*/ void Internal_SetRayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure accelerationStructure);
            /*0x28afb8c*/ void SetRayTracingShaderPass(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string passName);
            /*0x28afbe0*/ void Internal_DispatchRays(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string rayGenShaderName, uint width, uint height, uint depth, UnityEngine.Camera camera);
            /*0x28afc64*/ void Internal_GenerateMips(UnityEngine.Rendering.RenderTargetIdentifier rt);
            /*0x28afcec*/ void Internal_ResolveAntiAliasedSurface(UnityEngine.RenderTexture rt, UnityEngine.RenderTexture target);
            /*0x28afd40*/ void CopyCounterValueCC(UnityEngine.ComputeBuffer src, UnityEngine.ComputeBuffer dst, uint dstOffsetBytes);
            /*0x28afd9c*/ void CopyCounterValueGC(UnityEngine.GraphicsBuffer src, UnityEngine.ComputeBuffer dst, uint dstOffsetBytes);
            /*0x28afdf8*/ void CopyCounterValueCG(UnityEngine.ComputeBuffer src, UnityEngine.GraphicsBuffer dst, uint dstOffsetBytes);
            /*0x28afe54*/ void CopyCounterValueGG(UnityEngine.GraphicsBuffer src, UnityEngine.GraphicsBuffer dst, uint dstOffsetBytes);
            /*0x28afeb0*/ string get_name();
            /*0x28afeec*/ void set_name(string value);
            /*0x28aff30*/ int get_sizeInBytes();
            /*0x28aff6c*/ void Clear();
            /*0x28affa8*/ void Internal_DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int submeshIndex, int shaderPass, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b00b0*/ void Internal_DrawRenderer(UnityEngine.Renderer renderer, UnityEngine.Material material, int submeshIndex, int shaderPass);
            /*0x28b011c*/ void Internal_DrawRendererList(UnityEngine.Rendering.RendererUtils.RendererList rendererList);
            /*0x28b01b0*/ void Internal_DrawRenderer(UnityEngine.Renderer renderer, UnityEngine.Material material, int submeshIndex);
            /*0x28b0240*/ void Internal_DrawRenderer(UnityEngine.Renderer renderer, UnityEngine.Material material);
            /*0x28b02a8*/ void Internal_DrawProcedural(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b03c0*/ void Internal_DrawProceduralIndexed(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int indexCount, int instanceCount, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b04f8*/ void Internal_DrawProceduralIndirect(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b0610*/ void Internal_DrawProceduralIndexedIndirect(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b0748*/ void Internal_DrawProceduralIndirectGraphicsBuffer(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b0860*/ void Internal_DrawProceduralIndexedIndirectGraphicsBuffer(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b0998*/ void Internal_DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.Matrix4x4[] matrices, int count, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b0a24*/ void Internal_DrawMeshInstancedProcedural(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, int count, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b0aa8*/ void Internal_DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b0b34*/ void Internal_DrawMeshInstancedIndirectGraphicsBuffer(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b0bc0*/ void Internal_DrawOcclusionMesh(UnityEngine.RectInt normalizedCamViewport);
            /*0x28b0c54*/ void SetRandomWriteTarget_Texture(int index, ref UnityEngine.Rendering.RenderTargetIdentifier rt);
            /*0x28b0ca8*/ void SetRandomWriteTarget_Buffer(int index, UnityEngine.ComputeBuffer uav, bool preserveCounterValue);
            /*0x28b0d04*/ void SetRandomWriteTarget_GraphicsBuffer(int index, UnityEngine.GraphicsBuffer uav, bool preserveCounterValue);
            /*0x28b0d60*/ void ClearRandomWriteTargets();
            /*0x28b0d9c*/ void SetViewport(UnityEngine.Rect pixelRect);
            /*0x28b0e34*/ void EnableScissorRect(UnityEngine.Rect scissor);
            /*0x28b0ecc*/ void DisableScissorRect();
            /*0x28b0f08*/ void CopyTexture_Internal(ref UnityEngine.Rendering.RenderTargetIdentifier src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, ref UnityEngine.Rendering.RenderTargetIdentifier dst, int dstElement, int dstMip, int dstX, int dstY, int mode);
            /*0x28b0fd0*/ void Blit_Texture(UnityEngine.Texture source, ref UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Material mat, int pass, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset, int sourceDepthSlice, int destDepthSlice);
            /*0x28b110c*/ void Blit_Identifier(ref UnityEngine.Rendering.RenderTargetIdentifier source, ref UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Material mat, int pass, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset, int sourceDepthSlice, int destDepthSlice);
            /*0x28b1248*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.Experimental.Rendering.GraphicsFormat format, int antiAliasing, bool enableRandomWrite, UnityEngine.RenderTextureMemoryless memorylessMode, bool useDynamicScale);
            /*0x28b1304*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.Experimental.Rendering.GraphicsFormat format, int antiAliasing, bool enableRandomWrite, UnityEngine.RenderTextureMemoryless memorylessMode);
            /*0x28b13b0*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.Experimental.Rendering.GraphicsFormat format, int antiAliasing, bool enableRandomWrite);
            /*0x28b1464*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.Experimental.Rendering.GraphicsFormat format, int antiAliasing);
            /*0x28b1508*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.Experimental.Rendering.GraphicsFormat format);
            /*0x28b15a8*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite, UnityEngine.RenderTextureMemoryless memorylessMode, bool useDynamicScale);
            /*0x28b16ac*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite, UnityEngine.RenderTextureMemoryless memorylessMode);
            /*0x28b16e4*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite);
            /*0x28b1718*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing);
            /*0x28b1744*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite);
            /*0x28b1770*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format);
            /*0x28b185c*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine.FilterMode filter);
            /*0x28b1908*/ void GetTemporaryRT(int nameID, int width, int height, int depthBuffer);
            /*0x28b1910*/ void GetTemporaryRT(int nameID, int width, int height);
            /*0x28b191c*/ void GetTemporaryRTWithDescriptor(int nameID, UnityEngine.RenderTextureDescriptor desc, UnityEngine.FilterMode filter);
            /*0x28b19d4*/ void GetTemporaryRT(int nameID, UnityEngine.RenderTextureDescriptor desc, UnityEngine.FilterMode filter);
            /*0x28b1a50*/ void GetTemporaryRT(int nameID, UnityEngine.RenderTextureDescriptor desc);
            /*0x28b1ac0*/ void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.Experimental.Rendering.GraphicsFormat format, int antiAliasing, bool enableRandomWrite, bool useDynamicScale);
            /*0x28b1b7c*/ void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.Experimental.Rendering.GraphicsFormat format, int antiAliasing, bool enableRandomWrite);
            /*0x28b1c28*/ void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.Experimental.Rendering.GraphicsFormat format, int antiAliasing);
            /*0x28b1cd8*/ void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.Experimental.Rendering.GraphicsFormat format);
            /*0x28b1d80*/ void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite);
            /*0x28b1e7c*/ void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite, int antiAliasing);
            /*0x28b1f78*/ void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite);
            /*0x28b2078*/ void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter, UnityEngine.RenderTextureFormat format);
            /*0x28b2174*/ void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, UnityEngine.FilterMode filter);
            /*0x28b2228*/ void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer);
            /*0x28b2230*/ void GetTemporaryRTArray(int nameID, int width, int height, int slices);
            /*0x28b223c*/ void ReleaseTemporaryRT(int nameID);
            /*0x28b2280*/ void ClearRenderTarget(UnityEngine.Rendering.RTClearFlags clearFlags, UnityEngine.Color backgroundColor, float depth, uint stencil);
            /*0x28b2368*/ void ClearRenderTarget(bool clearDepth, bool clearColor, UnityEngine.Color backgroundColor);
            /*0x28b2414*/ void ClearRenderTarget(bool clearDepth, bool clearColor, UnityEngine.Color backgroundColor, float depth);
            /*0x28b24cc*/ void SetGlobalFloat(int nameID, float value);
            /*0x28b2520*/ void SetGlobalInt(int nameID, int value);
            /*0x28b2574*/ void SetGlobalInteger(int nameID, int value);
            /*0x28b25c8*/ void SetGlobalVector(int nameID, UnityEngine.Vector4 value);
            /*0x28b2678*/ void SetGlobalColor(int nameID, UnityEngine.Color value);
            /*0x28b2728*/ void SetGlobalMatrix(int nameID, UnityEngine.Matrix4x4 value);
            /*0x28b27d0*/ void EnableShaderKeyword(string keyword);
            /*0x28b2814*/ void EnableGlobalKeyword(UnityEngine.Rendering.GlobalKeyword keyword);
            /*0x28b28a8*/ void EnableMaterialKeyword(UnityEngine.Material material, UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b2950*/ void EnableComputeKeyword(UnityEngine.ComputeShader computeShader, UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b29f8*/ void EnableKeyword(ref UnityEngine.Rendering.GlobalKeyword keyword);
            /*0x28b2a04*/ void EnableKeyword(UnityEngine.Material material, ref UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b2a68*/ void EnableKeyword(UnityEngine.ComputeShader computeShader, ref UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b2acc*/ void DisableShaderKeyword(string keyword);
            /*0x28b2b10*/ void DisableGlobalKeyword(UnityEngine.Rendering.GlobalKeyword keyword);
            /*0x28b2ba4*/ void DisableMaterialKeyword(UnityEngine.Material material, UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b2c4c*/ void DisableComputeKeyword(UnityEngine.ComputeShader computeShader, UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b2cf4*/ void DisableKeyword(ref UnityEngine.Rendering.GlobalKeyword keyword);
            /*0x28b2d00*/ void DisableKeyword(UnityEngine.Material material, ref UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b2d64*/ void DisableKeyword(UnityEngine.ComputeShader computeShader, ref UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b2dc8*/ void SetGlobalKeyword(UnityEngine.Rendering.GlobalKeyword keyword, bool value);
            /*0x28b2e74*/ void SetMaterialKeyword(UnityEngine.Material material, UnityEngine.Rendering.LocalKeyword keyword, bool value);
            /*0x28b2f2c*/ void SetComputeKeyword(UnityEngine.ComputeShader computeShader, UnityEngine.Rendering.LocalKeyword keyword, bool value);
            /*0x28b2fe4*/ void SetKeyword(ref UnityEngine.Rendering.GlobalKeyword keyword, bool value);
            /*0x28b2ff8*/ void SetKeyword(UnityEngine.Material material, ref UnityEngine.Rendering.LocalKeyword keyword, bool value);
            /*0x28b306c*/ void SetKeyword(UnityEngine.ComputeShader computeShader, ref UnityEngine.Rendering.LocalKeyword keyword, bool value);
            /*0x28b30e0*/ void SetViewMatrix(UnityEngine.Matrix4x4 view);
            /*0x28b3168*/ void SetProjectionMatrix(UnityEngine.Matrix4x4 proj);
            /*0x28b31f0*/ void SetViewProjectionMatrices(UnityEngine.Matrix4x4 view, UnityEngine.Matrix4x4 proj);
            /*0x28b3298*/ void SetGlobalDepthBias(float bias, float slopeBias);
            /*0x28b32ec*/ void SetExecutionFlags(UnityEngine.Rendering.CommandBufferExecutionFlags flags);
            /*0x28addf4*/ bool ValidateAgainstExecutionFlags(UnityEngine.Rendering.CommandBufferExecutionFlags requiredFlags, UnityEngine.Rendering.CommandBufferExecutionFlags invalidFlags);
            /*0x28b3330*/ void SetGlobalFloatArrayListImpl(int nameID, object values);
            /*0x28b3384*/ void SetGlobalVectorArrayListImpl(int nameID, object values);
            /*0x28b33d8*/ void SetGlobalMatrixArrayListImpl(int nameID, object values);
            /*0x28b342c*/ void SetGlobalFloatArray(int nameID, float[] values);
            /*0x28b3480*/ void SetGlobalVectorArray(int nameID, UnityEngine.Vector4[] values);
            /*0x28b34d4*/ void SetGlobalMatrixArray(int nameID, UnityEngine.Matrix4x4[] values);
            /*0x28b3528*/ void SetLateLatchProjectionMatrices(UnityEngine.Matrix4x4[] projectionMat);
            /*0x28b356c*/ void MarkLateLatchMatrixShaderPropertyID(UnityEngine.Rendering.CameraLateLatchMatrixType matrixPropertyType, int shaderPropertyID);
            /*0x28b35c0*/ void UnmarkLateLatchMatrix(UnityEngine.Rendering.CameraLateLatchMatrixType matrixPropertyType);
            /*0x28b3604*/ void SetGlobalTexture_Impl(int nameID, ref UnityEngine.Rendering.RenderTargetIdentifier rt, UnityEngine.Rendering.RenderTextureSubElement element);
            /*0x28b3660*/ void SetGlobalBufferInternal(int nameID, UnityEngine.ComputeBuffer value);
            /*0x28b36b4*/ void SetGlobalGraphicsBufferInternal(int nameID, UnityEngine.GraphicsBuffer value);
            /*0x28b3708*/ void SetShadowSamplingMode_Impl(ref UnityEngine.Rendering.RenderTargetIdentifier shadowmap, UnityEngine.Rendering.ShadowSamplingMode mode);
            /*0x28b375c*/ void IssuePluginEventInternal(nint callback, int eventID);
            /*0x28b37b0*/ void BeginSample(string name);
            /*0x28b37f4*/ void EndSample(string name);
            /*0x28b3838*/ void BeginSample(UnityEngine.Profiling.CustomSampler sampler);
            /*0x28b38c0*/ void EndSample(UnityEngine.Profiling.CustomSampler sampler);
            /*0x28b387c*/ void BeginSample_CustomSampler(UnityEngine.Profiling.CustomSampler sampler);
            /*0x28b3904*/ void EndSample_CustomSampler(UnityEngine.Profiling.CustomSampler sampler);
            /*0x28b3948*/ void IssuePluginEventAndDataInternal(nint callback, int eventID, nint data);
            /*0x28b39a4*/ void IssuePluginCustomBlitInternal(nint callback, uint command, ref UnityEngine.Rendering.RenderTargetIdentifier source, ref UnityEngine.Rendering.RenderTargetIdentifier dest, uint commandParam, uint commandFlags);
            /*0x28b3a28*/ void IssuePluginCustomTextureUpdateInternal(nint callback, UnityEngine.Texture targetTexture, uint userData, bool useNewUnityRenderingExtTextureUpdateParamsV2);
            /*0x28b3a94*/ void SetGlobalConstantBufferInternal(UnityEngine.ComputeBuffer buffer, int nameID, int offset, int size);
            /*0x28b3b00*/ void SetGlobalConstantGraphicsBufferInternal(UnityEngine.GraphicsBuffer buffer, int nameID, int offset, int size);
            /*0x28b3b6c*/ void IncrementUpdateCount(UnityEngine.Rendering.RenderTargetIdentifier dest);
            /*0x28b3bf4*/ void SetInstanceMultiplier(uint multiplier);
            /*0x28b3c38*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt);
            /*0x28b3d4c*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt, UnityEngine.Rendering.RenderBufferLoadAction loadAction, UnityEngine.Rendering.RenderBufferStoreAction storeAction);
            /*0x28b3e50*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction);
            /*0x28b3f6c*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel);
            /*0x28b40d8*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel, UnityEngine.CubemapFace cubemapFace);
            /*0x28b4214*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel, UnityEngine.CubemapFace cubemapFace, int depthSlice);
            /*0x28b438c*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth);
            /*0x28b44dc*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth, int mipLevel);
            /*0x28b4638*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth, int mipLevel, UnityEngine.CubemapFace cubemapFace);
            /*0x28b4794*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth, int mipLevel, UnityEngine.CubemapFace cubemapFace, int depthSlice);
            /*0x28b4928*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction);
            /*0x28b4a68*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier[] colors, UnityEngine.Rendering.RenderTargetIdentifier depth);
            /*0x28b4cb4*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier[] colors, UnityEngine.Rendering.RenderTargetIdentifier depth, int mipLevel, UnityEngine.CubemapFace cubemapFace, int depthSlice);
            /*0x28b4f34*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetBinding binding, int mipLevel, UnityEngine.CubemapFace cubemapFace, int depthSlice);
            /*0x28b5484*/ void SetRenderTarget(UnityEngine.Rendering.RenderTargetBinding binding);
            /*0x28b3cd8*/ void SetRenderTargetSingle_Internal(UnityEngine.Rendering.RenderTargetIdentifier rt, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction);
            /*0x28b4450*/ void SetRenderTargetColorDepth_Internal(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction, UnityEngine.Rendering.RenderTargetFlags flags);
            /*0x28b4c28*/ void SetRenderTargetMulti_Internal(UnityEngine.Rendering.RenderTargetIdentifier[] colors, UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction[] colorLoadActions, UnityEngine.Rendering.RenderBufferStoreAction[] colorStoreActions, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction, UnityEngine.Rendering.RenderTargetFlags flags);
            /*0x28b53e0*/ void SetRenderTargetColorDepthSubtarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction, int mipLevel, UnityEngine.CubemapFace cubemapFace, int depthSlice);
            /*0x28b4e90*/ void SetRenderTargetMultiSubtarget(UnityEngine.Rendering.RenderTargetIdentifier[] colors, UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction[] colorLoadActions, UnityEngine.Rendering.RenderBufferStoreAction[] colorStoreActions, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction, int mipLevel, UnityEngine.CubemapFace cubemapFace, int depthSlice);
            /*0x28b5ba8*/ void Internal_ProcessVTFeedback(UnityEngine.Rendering.RenderTargetIdentifier rt, nint resolver, int slice, int x, int width, int y, int height, int mip);
            /*0x28b5ce0*/ void SetBufferData(UnityEngine.ComputeBuffer buffer, System.Array data);
            void SetBufferData<T>(UnityEngine.ComputeBuffer buffer, System.Collections.Generic.List<T> data);
            void SetBufferData<T>(UnityEngine.ComputeBuffer buffer, Unity.Collections.NativeArray<T> data);
            /*0x28b5edc*/ void SetBufferData(UnityEngine.ComputeBuffer buffer, System.Array data, int managedBufferStartIndex, int graphicsBufferStartIndex, int count);
            void SetBufferData<T>(UnityEngine.ComputeBuffer buffer, System.Collections.Generic.List<T> data, int managedBufferStartIndex, int graphicsBufferStartIndex, int count);
            void SetBufferData<T>(UnityEngine.ComputeBuffer buffer, Unity.Collections.NativeArray<T> data, int nativeBufferStartIndex, int graphicsBufferStartIndex, int count);
            /*0x28b6168*/ void SetBufferCounterValue(UnityEngine.ComputeBuffer buffer, uint counterValue);
            /*0x28b6210*/ void InternalSetComputeBufferNativeData(UnityEngine.ComputeBuffer buffer, nint data, int nativeBufferStartIndex, int graphicsBufferStartIndex, int count, int elemSize);
            /*0x28b5e58*/ void InternalSetComputeBufferData(UnityEngine.ComputeBuffer buffer, System.Array data, int managedBufferStartIndex, int graphicsBufferStartIndex, int count, int elemSize);
            /*0x28b61bc*/ void InternalSetComputeBufferCounterValue(UnityEngine.ComputeBuffer buffer, uint counterValue);
            /*0x28b6294*/ void SetBufferData(UnityEngine.GraphicsBuffer buffer, System.Array data);
            void SetBufferData<T>(UnityEngine.GraphicsBuffer buffer, System.Collections.Generic.List<T> data);
            void SetBufferData<T>(UnityEngine.GraphicsBuffer buffer, Unity.Collections.NativeArray<T> data);
            /*0x28b6490*/ void SetBufferData(UnityEngine.GraphicsBuffer buffer, System.Array data, int managedBufferStartIndex, int graphicsBufferStartIndex, int count);
            void SetBufferData<T>(UnityEngine.GraphicsBuffer buffer, System.Collections.Generic.List<T> data, int managedBufferStartIndex, int graphicsBufferStartIndex, int count);
            void SetBufferData<T>(UnityEngine.GraphicsBuffer buffer, Unity.Collections.NativeArray<T> data, int nativeBufferStartIndex, int graphicsBufferStartIndex, int count);
            /*0x28b671c*/ void SetBufferCounterValue(UnityEngine.GraphicsBuffer buffer, uint counterValue);
            /*0x28b67c4*/ void InternalSetGraphicsBufferNativeData(UnityEngine.GraphicsBuffer buffer, nint data, int nativeBufferStartIndex, int graphicsBufferStartIndex, int count, int elemSize);
            /*0x28b640c*/ void InternalSetGraphicsBufferData(UnityEngine.GraphicsBuffer buffer, System.Array data, int managedBufferStartIndex, int graphicsBufferStartIndex, int count, int elemSize);
            /*0x28b6770*/ void InternalSetGraphicsBufferCounterValue(UnityEngine.GraphicsBuffer buffer, uint counterValue);
            /*0x28b6848*/ void CopyBufferImpl(UnityEngine.GraphicsBuffer source, UnityEngine.GraphicsBuffer dest);
            /*0x28b689c*/ UnityEngine.Rendering.GPUFence CreateGPUFence(UnityEngine.Rendering.SynchronisationStage stage);
            /*0x28b68a4*/ UnityEngine.Rendering.GPUFence CreateGPUFence();
            /*0x28b68ac*/ void WaitOnGPUFence(UnityEngine.Rendering.GPUFence fence, UnityEngine.Rendering.SynchronisationStage stage);
            /*0x28b68b0*/ void WaitOnGPUFence(UnityEngine.Rendering.GPUFence fence);
            /*0x28b68b4*/ void SetComputeBufferData(UnityEngine.ComputeBuffer buffer, System.Array data);
            void SetComputeBufferData<T>(UnityEngine.ComputeBuffer buffer, System.Collections.Generic.List<T> data);
            void SetComputeBufferData<T>(UnityEngine.ComputeBuffer buffer, Unity.Collections.NativeArray<T> data);
            /*0x28b68b8*/ void SetComputeBufferData(UnityEngine.ComputeBuffer buffer, System.Array data, int managedBufferStartIndex, int graphicsBufferStartIndex, int count);
            void SetComputeBufferData<T>(UnityEngine.ComputeBuffer buffer, System.Collections.Generic.List<T> data, int managedBufferStartIndex, int graphicsBufferStartIndex, int count);
            void SetComputeBufferData<T>(UnityEngine.ComputeBuffer buffer, Unity.Collections.NativeArray<T> data, int nativeBufferStartIndex, int graphicsBufferStartIndex, int count);
            /*0x28b68bc*/ void SetComputeBufferCounterValue(UnityEngine.ComputeBuffer buffer, uint counterValue);
            /*0x28b6910*/ void Finalize();
            /*0x28b6a20*/ void Dispose();
            /*0x28b69a8*/ void Dispose(bool disposing);
            /*0x28b6acc*/ void Release();
            /*0x28b6ad0*/ UnityEngine.Rendering.GraphicsFence CreateAsyncGraphicsFence();
            /*0x28b6b5c*/ UnityEngine.Rendering.GraphicsFence CreateAsyncGraphicsFence(UnityEngine.Rendering.SynchronisationStage stage);
            /*0x28b6adc*/ UnityEngine.Rendering.GraphicsFence CreateGraphicsFence(UnityEngine.Rendering.GraphicsFenceType fenceType, UnityEngine.Rendering.SynchronisationStageFlags stage);
            /*0x28b6ce8*/ void WaitOnAsyncGraphicsFence(UnityEngine.Rendering.GraphicsFence fence);
            /*0x28b6cf0*/ void WaitOnAsyncGraphicsFence(UnityEngine.Rendering.GraphicsFence fence, UnityEngine.Rendering.SynchronisationStage stage);
            /*0x28b6d00*/ void WaitOnAsyncGraphicsFence(UnityEngine.Rendering.GraphicsFence fence, UnityEngine.Rendering.SynchronisationStageFlags stage);
            /*0x28b6e78*/ void SetComputeFloatParam(UnityEngine.ComputeShader computeShader, string name, float val);
            /*0x28b6ee8*/ void SetComputeIntParam(UnityEngine.ComputeShader computeShader, string name, int val);
            /*0x28b6f50*/ void SetComputeVectorParam(UnityEngine.ComputeShader computeShader, string name, UnityEngine.Vector4 val);
            /*0x28b6fb4*/ void SetComputeVectorArrayParam(UnityEngine.ComputeShader computeShader, string name, UnityEngine.Vector4[] values);
            /*0x28b701c*/ void SetComputeMatrixParam(UnityEngine.ComputeShader computeShader, string name, UnityEngine.Matrix4x4 val);
            /*0x28b70a0*/ void SetComputeMatrixArrayParam(UnityEngine.ComputeShader computeShader, string name, UnityEngine.Matrix4x4[] values);
            /*0x28b7108*/ void SetComputeFloatParams(UnityEngine.ComputeShader computeShader, string name, float[] values);
            /*0x28b7170*/ void SetComputeFloatParams(UnityEngine.ComputeShader computeShader, int nameID, float[] values);
            /*0x28b71cc*/ void SetComputeIntParams(UnityEngine.ComputeShader computeShader, string name, int[] values);
            /*0x28b7234*/ void SetComputeIntParams(UnityEngine.ComputeShader computeShader, int nameID, int[] values);
            /*0x28b7290*/ void SetComputeTextureParam(UnityEngine.ComputeShader computeShader, int kernelIndex, string name, UnityEngine.Rendering.RenderTargetIdentifier rt);
            /*0x28b7310*/ void SetComputeTextureParam(UnityEngine.ComputeShader computeShader, int kernelIndex, int nameID, UnityEngine.Rendering.RenderTargetIdentifier rt);
            /*0x28b7384*/ void SetComputeTextureParam(UnityEngine.ComputeShader computeShader, int kernelIndex, string name, UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel);
            /*0x28b7408*/ void SetComputeTextureParam(UnityEngine.ComputeShader computeShader, int kernelIndex, int nameID, UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel);
            /*0x28b7480*/ void SetComputeTextureParam(UnityEngine.ComputeShader computeShader, int kernelIndex, string name, UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel, UnityEngine.Rendering.RenderTextureSubElement element);
            /*0x28b7510*/ void SetComputeTextureParam(UnityEngine.ComputeShader computeShader, int kernelIndex, int nameID, UnityEngine.Rendering.RenderTargetIdentifier rt, int mipLevel, UnityEngine.Rendering.RenderTextureSubElement element);
            /*0x28b7594*/ void SetComputeBufferParam(UnityEngine.ComputeShader computeShader, int kernelIndex, int nameID, UnityEngine.ComputeBuffer buffer);
            /*0x28b7600*/ void SetComputeBufferParam(UnityEngine.ComputeShader computeShader, int kernelIndex, string name, UnityEngine.ComputeBuffer buffer);
            /*0x28b7678*/ void SetComputeBufferParam(UnityEngine.ComputeShader computeShader, int kernelIndex, int nameID, UnityEngine.GraphicsBuffer buffer);
            /*0x28b76e4*/ void SetComputeBufferParam(UnityEngine.ComputeShader computeShader, int kernelIndex, string name, UnityEngine.GraphicsBuffer buffer);
            /*0x28b775c*/ void SetComputeConstantBufferParam(UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.ComputeBuffer buffer, int offset, int size);
            /*0x28b77d0*/ void SetComputeConstantBufferParam(UnityEngine.ComputeShader computeShader, string name, UnityEngine.ComputeBuffer buffer, int offset, int size);
            /*0x28b7850*/ void SetComputeConstantBufferParam(UnityEngine.ComputeShader computeShader, int nameID, UnityEngine.GraphicsBuffer buffer, int offset, int size);
            /*0x28b78c4*/ void SetComputeConstantBufferParam(UnityEngine.ComputeShader computeShader, string name, UnityEngine.GraphicsBuffer buffer, int offset, int size);
            /*0x28b7944*/ void DispatchCompute(UnityEngine.ComputeShader computeShader, int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ);
            /*0x28b79b8*/ void DispatchCompute(UnityEngine.ComputeShader computeShader, int kernelIndex, UnityEngine.ComputeBuffer indirectBuffer, uint argsOffset);
            /*0x28b7a24*/ void DispatchCompute(UnityEngine.ComputeShader computeShader, int kernelIndex, UnityEngine.GraphicsBuffer indirectBuffer, uint argsOffset);
            /*0x28b7a90*/ void BuildRayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure accelerationStructure);
            /*0x28b7aa0*/ void BuildRayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure accelerationStructure, UnityEngine.Vector3 relativeOrigin);
            /*0x28b7aa4*/ void SetRayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure rayTracingAccelerationStructure);
            /*0x28b7b0c*/ void SetRayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure rayTracingAccelerationStructure);
            /*0x28b7b68*/ void SetRayTracingBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, UnityEngine.ComputeBuffer buffer);
            /*0x28b7bd0*/ void SetRayTracingBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.ComputeBuffer buffer);
            /*0x28b7c2c*/ void SetRayTracingConstantBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.ComputeBuffer buffer, int offset, int size);
            /*0x28b7ca0*/ void SetRayTracingConstantBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, UnityEngine.ComputeBuffer buffer, int offset, int size);
            /*0x28b7d20*/ void SetRayTracingConstantBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.GraphicsBuffer buffer, int offset, int size);
            /*0x28b7d94*/ void SetRayTracingConstantBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, UnityEngine.GraphicsBuffer buffer, int offset, int size);
            /*0x28b7e14*/ void SetRayTracingTextureParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, UnityEngine.Rendering.RenderTargetIdentifier rt);
            /*0x28b7e7c*/ void SetRayTracingTextureParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.Rendering.RenderTargetIdentifier rt);
            /*0x28b7ed8*/ void SetRayTracingFloatParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, float val);
            /*0x28b7f48*/ void SetRayTracingFloatParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, float val);
            /*0x28b7fac*/ void SetRayTracingFloatParams(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, float[] values);
            /*0x28b8014*/ void SetRayTracingFloatParams(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, float[] values);
            /*0x28b8070*/ void SetRayTracingIntParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, int val);
            /*0x28b80d8*/ void SetRayTracingIntParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, int val);
            /*0x28b8134*/ void SetRayTracingIntParams(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, int[] values);
            /*0x28b819c*/ void SetRayTracingIntParams(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, int[] values);
            /*0x28b81f8*/ void SetRayTracingVectorParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, UnityEngine.Vector4 val);
            /*0x28b825c*/ void SetRayTracingVectorParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.Vector4 val);
            /*0x28b8260*/ void SetRayTracingVectorArrayParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, UnityEngine.Vector4[] values);
            /*0x28b82c8*/ void SetRayTracingVectorArrayParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.Vector4[] values);
            /*0x28b8324*/ void SetRayTracingMatrixParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, UnityEngine.Matrix4x4 val);
            /*0x28b83a8*/ void SetRayTracingMatrixParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.Matrix4x4 val);
            /*0x28b841c*/ void SetRayTracingMatrixArrayParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string name, UnityEngine.Matrix4x4[] values);
            /*0x28b8484*/ void SetRayTracingMatrixArrayParam(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, UnityEngine.Matrix4x4[] values);
            /*0x28b84e0*/ void DispatchRays(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, string rayGenName, uint width, uint height, uint depth, UnityEngine.Camera camera);
            /*0x28b8564*/ void GenerateMips(UnityEngine.Rendering.RenderTargetIdentifier rt);
            /*0x28b85f4*/ void GenerateMips(UnityEngine.RenderTexture rt);
            /*0x28b8830*/ void ResolveAntiAliasedSurface(UnityEngine.RenderTexture rt, UnityEngine.RenderTexture target);
            /*0x28b891c*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int submeshIndex, int shaderPass, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b8ba0*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int submeshIndex, int shaderPass);
            /*0x28b8bd0*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int submeshIndex);
            /*0x28b8c04*/ void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material);
            /*0x28b8c3c*/ void DrawRenderer(UnityEngine.Renderer renderer, UnityEngine.Material material, int submeshIndex, int shaderPass);
            /*0x28b8e50*/ void DrawRenderer(UnityEngine.Renderer renderer, UnityEngine.Material material, int submeshIndex);
            /*0x28b8e58*/ void DrawRenderer(UnityEngine.Renderer renderer, UnityEngine.Material material);
            /*0x28b8e64*/ void DrawRendererList(UnityEngine.Rendering.RendererUtils.RendererList rendererList);
            /*0x28b8e68*/ void DrawProcedural(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b8fe0*/ void DrawProcedural(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount);
            /*0x28b9010*/ void DrawProcedural(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int vertexCount);
            /*0x28b9044*/ void DrawProcedural(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int indexCount, int instanceCount, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b91b4*/ void DrawProcedural(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int indexCount, int instanceCount);
            /*0x28b91e4*/ void DrawProcedural(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int indexCount);
            /*0x28b9218*/ void DrawProceduralIndirect(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b93b8*/ void DrawProceduralIndirect(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset);
            /*0x28b93e8*/ void DrawProceduralIndirect(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs);
            /*0x28b941c*/ void DrawProceduralIndirect(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b95b4*/ void DrawProceduralIndirect(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset);
            /*0x28b95e4*/ void DrawProceduralIndirect(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs);
            /*0x28b9618*/ void DrawProceduralIndirect(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b97b8*/ void DrawProceduralIndirect(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset);
            /*0x28b97e8*/ void DrawProceduralIndirect(UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs);
            /*0x28b981c*/ void DrawProceduralIndirect(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b99b4*/ void DrawProceduralIndirect(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset);
            /*0x28b99e4*/ void DrawProceduralIndirect(UnityEngine.GraphicsBuffer indexBuffer, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs);
            /*0x28b9a18*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.Matrix4x4[] matrices, int count, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b9dc0*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.Matrix4x4[] matrices, int count);
            /*0x28b9ddc*/ void DrawMeshInstanced(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.Matrix4x4[] matrices);
            /*0x28b9e04*/ void DrawMeshInstancedProcedural(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, int count, UnityEngine.MaterialPropertyBlock properties);
            /*0x28ba088*/ void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28ba2cc*/ void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset);
            /*0x28ba2e8*/ void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.ComputeBuffer bufferWithArgs);
            /*0x28ba308*/ void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28ba54c*/ void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset);
            /*0x28ba568*/ void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, int submeshIndex, UnityEngine.Material material, int shaderPass, UnityEngine.GraphicsBuffer bufferWithArgs);
            /*0x28ba588*/ void DrawOcclusionMesh(UnityEngine.RectInt normalizedCamViewport);
            /*0x28ba58c*/ void SetRandomWriteTarget(int index, UnityEngine.Rendering.RenderTargetIdentifier rt);
            /*0x28ba610*/ void SetRandomWriteTarget(int index, UnityEngine.ComputeBuffer buffer, bool preserveCounterValue);
            /*0x28ba69c*/ void SetRandomWriteTarget(int index, UnityEngine.ComputeBuffer buffer);
            /*0x28ba6a4*/ void SetRandomWriteTarget(int index, UnityEngine.GraphicsBuffer buffer, bool preserveCounterValue);
            /*0x28ba730*/ void SetRandomWriteTarget(int index, UnityEngine.GraphicsBuffer buffer);
            /*0x28ba738*/ void CopyCounterValue(UnityEngine.ComputeBuffer src, UnityEngine.ComputeBuffer dst, uint dstOffsetBytes);
            /*0x28ba794*/ void CopyCounterValue(UnityEngine.GraphicsBuffer src, UnityEngine.ComputeBuffer dst, uint dstOffsetBytes);
            /*0x28ba7f0*/ void CopyCounterValue(UnityEngine.ComputeBuffer src, UnityEngine.GraphicsBuffer dst, uint dstOffsetBytes);
            /*0x28ba84c*/ void CopyCounterValue(UnityEngine.GraphicsBuffer src, UnityEngine.GraphicsBuffer dst, uint dstOffsetBytes);
            /*0x28ba8a8*/ void CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier src, UnityEngine.Rendering.RenderTargetIdentifier dst);
            /*0x28ba93c*/ void CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier src, int srcElement, UnityEngine.Rendering.RenderTargetIdentifier dst, int dstElement);
            /*0x28ba9e0*/ void CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier src, int srcElement, int srcMip, UnityEngine.Rendering.RenderTargetIdentifier dst, int dstElement, int dstMip);
            /*0x28baa94*/ void CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, UnityEngine.Rendering.RenderTargetIdentifier dst, int dstElement, int dstMip, int dstX, int dstY);
            /*0x28bab58*/ void Blit(UnityEngine.Texture source, UnityEngine.Rendering.RenderTargetIdentifier dest);
            /*0x28babe4*/ void Blit(UnityEngine.Texture source, UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset);
            /*0x28bac90*/ void Blit(UnityEngine.Texture source, UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Material mat);
            /*0x28bad20*/ void Blit(UnityEngine.Texture source, UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Material mat, int pass);
            /*0x28badbc*/ void Blit(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest);
            /*0x28bae48*/ void Blit(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset);
            /*0x28baef4*/ void Blit(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Material mat);
            /*0x28baf84*/ void Blit(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Material mat, int pass);
            /*0x28bb020*/ void Blit(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest, int sourceDepthSlice, int destDepthSlice);
            /*0x28bb0b4*/ void Blit(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset, int sourceDepthSlice, int destDepthSlice);
            /*0x28bb168*/ void Blit(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Material mat, int pass, int destDepthSlice);
            /*0x28bb208*/ void SetGlobalFloat(string name, float value);
            /*0x28bb268*/ void SetGlobalInt(string name, int value);
            /*0x28bb2c8*/ void SetGlobalInteger(string name, int value);
            /*0x28bb328*/ void SetGlobalVector(string name, UnityEngine.Vector4 value);
            /*0x28bb37c*/ void SetGlobalColor(string name, UnityEngine.Color value);
            /*0x28bb3d0*/ void SetGlobalMatrix(string name, UnityEngine.Matrix4x4 value);
            /*0x28bb444*/ void SetGlobalFloatArray(string propertyName, System.Collections.Generic.List<float> values);
            /*0x28bb478*/ void SetGlobalFloatArray(int nameID, System.Collections.Generic.List<float> values);
            /*0x28bb57c*/ void SetGlobalFloatArray(string propertyName, float[] values);
            /*0x28bb5dc*/ void SetGlobalVectorArray(string propertyName, System.Collections.Generic.List<UnityEngine.Vector4> values);
            /*0x28bb610*/ void SetGlobalVectorArray(int nameID, System.Collections.Generic.List<UnityEngine.Vector4> values);
            /*0x28bb714*/ void SetGlobalVectorArray(string propertyName, UnityEngine.Vector4[] values);
            /*0x28bb774*/ void SetGlobalMatrixArray(string propertyName, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
            /*0x28bb7a8*/ void SetGlobalMatrixArray(int nameID, System.Collections.Generic.List<UnityEngine.Matrix4x4> values);
            /*0x28bb8ac*/ void SetGlobalMatrixArray(string propertyName, UnityEngine.Matrix4x4[] values);
            /*0x28bb90c*/ void SetGlobalTexture(string name, UnityEngine.Rendering.RenderTargetIdentifier value);
            /*0x28bb9e0*/ void SetGlobalTexture(int nameID, UnityEngine.Rendering.RenderTargetIdentifier value);
            /*0x28bba38*/ void SetGlobalTexture(string name, UnityEngine.Rendering.RenderTargetIdentifier value, UnityEngine.Rendering.RenderTextureSubElement element);
            /*0x28bb984*/ void SetGlobalTexture(int nameID, UnityEngine.Rendering.RenderTargetIdentifier value, UnityEngine.Rendering.RenderTextureSubElement element);
            /*0x28bbabc*/ void SetGlobalBuffer(string name, UnityEngine.ComputeBuffer value);
            /*0x28bbb1c*/ void SetGlobalBuffer(int nameID, UnityEngine.ComputeBuffer value);
            /*0x28bbb70*/ void SetGlobalBuffer(string name, UnityEngine.GraphicsBuffer value);
            /*0x28bbbd0*/ void SetGlobalBuffer(int nameID, UnityEngine.GraphicsBuffer value);
            /*0x28bbc24*/ void SetGlobalConstantBuffer(UnityEngine.ComputeBuffer buffer, int nameID, int offset, int size);
            /*0x28bbc90*/ void SetGlobalConstantBuffer(UnityEngine.ComputeBuffer buffer, string name, int offset, int size);
            /*0x28bbd08*/ void SetGlobalConstantBuffer(UnityEngine.GraphicsBuffer buffer, int nameID, int offset, int size);
            /*0x28bbd74*/ void SetGlobalConstantBuffer(UnityEngine.GraphicsBuffer buffer, string name, int offset, int size);
            /*0x28bbdec*/ void SetShadowSamplingMode(UnityEngine.Rendering.RenderTargetIdentifier shadowmap, UnityEngine.Rendering.ShadowSamplingMode mode);
            /*0x28bbe70*/ void SetSinglePassStereo(UnityEngine.Rendering.SinglePassStereoMode mode);
            /*0x28bbeb4*/ void IssuePluginEvent(nint callback, int eventID);
            /*0x28bbf98*/ void IssuePluginEventAndData(nint callback, int eventID, nint data);
            /*0x28bc0bc*/ void IssuePluginCustomBlit(nint callback, uint command, UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier dest, uint commandParam, uint commandFlags);
            /*0x28bc170*/ void IssuePluginCustomTextureUpdate(nint callback, UnityEngine.Texture targetTexture, uint userData);
            /*0x28bc1d0*/ void IssuePluginCustomTextureUpdateV1(nint callback, UnityEngine.Texture targetTexture, uint userData);
            /*0x28bc230*/ void IssuePluginCustomTextureUpdateV2(nint callback, UnityEngine.Texture targetTexture, uint userData);
            /*0x28bc2c0*/ void ProcessVTFeedback(UnityEngine.Rendering.RenderTargetIdentifier rt, nint resolver, int slice, int x, int width, int y, int height, int mip);
            /*0x28bc3a0*/ void CopyBuffer(UnityEngine.GraphicsBuffer source, UnityEngine.GraphicsBuffer dest);
            /*0x28aec34*/ void ConvertTexture_Internal_Injected(ref UnityEngine.Rendering.RenderTargetIdentifier src, int srcElement, ref UnityEngine.Rendering.RenderTargetIdentifier dst, int dstElement);
            /*0x28aef1c*/ void SetComputeVectorParam_Injected(UnityEngine.ComputeShader computeShader, int nameID, ref UnityEngine.Vector4 val);
            /*0x28af030*/ void SetComputeMatrixParam_Injected(UnityEngine.ComputeShader computeShader, int nameID, ref UnityEngine.Matrix4x4 val);
            /*0x28af7fc*/ void Internal_SetRayTracingVectorParam_Injected(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, ref UnityEngine.Vector4 val);
            /*0x28af910*/ void Internal_SetRayTracingMatrixParam_Injected(UnityEngine.Experimental.Rendering.RayTracingShader rayTracingShader, int nameID, ref UnityEngine.Matrix4x4 val);
            /*0x28afadc*/ void Internal_BuildRayTracingAccelerationStructure_Injected(UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure accelerationStructure, ref UnityEngine.Vector3 relativeOrigin);
            /*0x28afca8*/ void Internal_GenerateMips_Injected(ref UnityEngine.Rendering.RenderTargetIdentifier rt);
            /*0x28b002c*/ void Internal_DrawMesh_Injected(UnityEngine.Mesh mesh, ref UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int submeshIndex, int shaderPass, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b016c*/ void Internal_DrawRendererList_Injected(ref UnityEngine.Rendering.RendererUtils.RendererList rendererList);
            /*0x28b0334*/ void Internal_DrawProcedural_Injected(ref UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int vertexCount, int instanceCount, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b045c*/ void Internal_DrawProceduralIndexed_Injected(UnityEngine.GraphicsBuffer indexBuffer, ref UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, int indexCount, int instanceCount, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b0584*/ void Internal_DrawProceduralIndirect_Injected(ref UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b06ac*/ void Internal_DrawProceduralIndexedIndirect_Injected(UnityEngine.GraphicsBuffer indexBuffer, ref UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.ComputeBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b07d4*/ void Internal_DrawProceduralIndirectGraphicsBuffer_Injected(ref UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b08fc*/ void Internal_DrawProceduralIndexedIndirectGraphicsBuffer_Injected(UnityEngine.GraphicsBuffer indexBuffer, ref UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, int shaderPass, UnityEngine.MeshTopology topology, UnityEngine.GraphicsBuffer bufferWithArgs, int argsOffset, UnityEngine.MaterialPropertyBlock properties);
            /*0x28b0c10*/ void Internal_DrawOcclusionMesh_Injected(ref UnityEngine.RectInt normalizedCamViewport);
            /*0x28b0df0*/ void SetViewport_Injected(ref UnityEngine.Rect pixelRect);
            /*0x28b0e88*/ void EnableScissorRect_Injected(ref UnityEngine.Rect scissor);
            /*0x28b1070*/ void Blit_Texture_Injected(UnityEngine.Texture source, ref UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Material mat, int pass, ref UnityEngine.Vector2 scale, ref UnityEngine.Vector2 offset, int sourceDepthSlice, int destDepthSlice);
            /*0x28b11ac*/ void Blit_Identifier_Injected(ref UnityEngine.Rendering.RenderTargetIdentifier source, ref UnityEngine.Rendering.RenderTargetIdentifier dest, UnityEngine.Material mat, int pass, ref UnityEngine.Vector2 scale, ref UnityEngine.Vector2 offset, int sourceDepthSlice, int destDepthSlice);
            /*0x28b1978*/ void GetTemporaryRTWithDescriptor_Injected(int nameID, ref UnityEngine.RenderTextureDescriptor desc, UnityEngine.FilterMode filter);
            /*0x28b22fc*/ void ClearRenderTarget_Injected(UnityEngine.Rendering.RTClearFlags clearFlags, ref UnityEngine.Color backgroundColor, float depth, uint stencil);
            /*0x28b2624*/ void SetGlobalVector_Injected(int nameID, ref UnityEngine.Vector4 value);
            /*0x28b26d4*/ void SetGlobalColor_Injected(int nameID, ref UnityEngine.Color value);
            /*0x28b277c*/ void SetGlobalMatrix_Injected(int nameID, ref UnityEngine.Matrix4x4 value);
            /*0x28b2864*/ void EnableGlobalKeyword_Injected(ref UnityEngine.Rendering.GlobalKeyword keyword);
            /*0x28b28fc*/ void EnableMaterialKeyword_Injected(UnityEngine.Material material, ref UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b29a4*/ void EnableComputeKeyword_Injected(UnityEngine.ComputeShader computeShader, ref UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b2b60*/ void DisableGlobalKeyword_Injected(ref UnityEngine.Rendering.GlobalKeyword keyword);
            /*0x28b2bf8*/ void DisableMaterialKeyword_Injected(UnityEngine.Material material, ref UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b2ca0*/ void DisableComputeKeyword_Injected(UnityEngine.ComputeShader computeShader, ref UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28b2e20*/ void SetGlobalKeyword_Injected(ref UnityEngine.Rendering.GlobalKeyword keyword, bool value);
            /*0x28b2ed0*/ void SetMaterialKeyword_Injected(UnityEngine.Material material, ref UnityEngine.Rendering.LocalKeyword keyword, bool value);
            /*0x28b2f88*/ void SetComputeKeyword_Injected(UnityEngine.ComputeShader computeShader, ref UnityEngine.Rendering.LocalKeyword keyword, bool value);
            /*0x28b3124*/ void SetViewMatrix_Injected(ref UnityEngine.Matrix4x4 view);
            /*0x28b31ac*/ void SetProjectionMatrix_Injected(ref UnityEngine.Matrix4x4 proj);
            /*0x28b3244*/ void SetViewProjectionMatrices_Injected(ref UnityEngine.Matrix4x4 view, ref UnityEngine.Matrix4x4 proj);
            /*0x28b3bb0*/ void IncrementUpdateCount_Injected(ref UnityEngine.Rendering.RenderTargetIdentifier dest);
            /*0x28b58d4*/ void SetRenderTargetSingle_Internal_Injected(ref UnityEngine.Rendering.RenderTargetIdentifier rt, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction);
            /*0x28b5948*/ void SetRenderTargetColorDepth_Internal_Injected(ref UnityEngine.Rendering.RenderTargetIdentifier color, ref UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction, UnityEngine.Rendering.RenderTargetFlags flags);
            /*0x28b59d4*/ void SetRenderTargetMulti_Internal_Injected(UnityEngine.Rendering.RenderTargetIdentifier[] colors, ref UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction[] colorLoadActions, UnityEngine.Rendering.RenderBufferStoreAction[] colorStoreActions, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction, UnityEngine.Rendering.RenderTargetFlags flags);
            /*0x28b5a60*/ void SetRenderTargetColorDepthSubtarget_Injected(ref UnityEngine.Rendering.RenderTargetIdentifier color, ref UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction, int mipLevel, UnityEngine.CubemapFace cubemapFace, int depthSlice);
            /*0x28b5b04*/ void SetRenderTargetMultiSubtarget_Injected(UnityEngine.Rendering.RenderTargetIdentifier[] colors, ref UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction[] colorLoadActions, UnityEngine.Rendering.RenderBufferStoreAction[] colorStoreActions, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction, int mipLevel, UnityEngine.CubemapFace cubemapFace, int depthSlice);
            /*0x28b5c44*/ void Internal_ProcessVTFeedback_Injected(ref UnityEngine.Rendering.RenderTargetIdentifier rt, nint resolver, int slice, int x, int width, int y, int height, int mip);
        }

        enum SynchronisationStageFlags
        {
            VertexProcessing = 1,
            PixelProcessing = 2,
            ComputeProcessing = 4,
            AllGPUOperations = 7,
        }

        enum GraphicsFenceType
        {
            AsyncQueueSynchronisation = 0,
            CPUSynchronisation = 1,
        }

        struct GraphicsFence
        {
            /*0x10*/ nint m_Ptr;
            /*0x18*/ int m_Version;
            /*0x1c*/ UnityEngine.Rendering.GraphicsFenceType m_FenceType;

            static /*0x28b6b70*/ UnityEngine.Rendering.SynchronisationStageFlags TranslateSynchronizationStageToFlags(UnityEngine.Rendering.SynchronisationStage s);
            static /*0x28bc508*/ bool HasFencePassed_Internal(nint fencePtr);
            static /*0x28bc54c*/ int GetVersionNumber(nint fencePtr);
            /*0x28bc43c*/ bool get_passed();
            /*0x28b6b80*/ void InitPostAllocation();
            /*0x28b6ddc*/ bool IsFencePending();
            /*0x28b6c6c*/ void Validate();
            /*0x28bc544*/ int GetPlatformNotSupportedVersion();
        }

        class OnDemandRendering
        {
            static /*0x0*/ int m_RenderFrameInterval;

            static /*0x28bc804*/ OnDemandRendering();
            static /*0x28bc588*/ bool get_willCurrentFrameRender();
            static /*0x28bc5f8*/ int get_renderFrameInterval();
            static /*0x28bc650*/ void set_renderFrameInterval(int value);
            static /*0x28bc6e8*/ void GetRenderFrameInterval(ref int frameInterval);
            static /*0x28bc740*/ float GetEffectiveRenderFrameRate();
            static /*0x28bc768*/ int get_effectiveRenderFrameRate();
            /*0x28bc7fc*/ OnDemandRendering();
        }

        enum ShaderHardwareTier
        {
            Tier1 = 0,
            Tier2 = 1,
            Tier3 = 2,
        }

        class GraphicsSettings : UnityEngine.Object
        {
            static /*0x28bc8a8*/ UnityEngine.TransparencySortMode get_transparencySortMode();
            static /*0x28bc8d0*/ void set_transparencySortMode(UnityEngine.TransparencySortMode value);
            static /*0x28bc90c*/ UnityEngine.Vector3 get_transparencySortAxis();
            static /*0x28bc994*/ void set_transparencySortAxis(UnityEngine.Vector3 value);
            static /*0x28bca14*/ bool get_realtimeDirectRectangularAreaLights();
            static /*0x28bca3c*/ void set_realtimeDirectRectangularAreaLights(bool value);
            static /*0x28bca78*/ bool get_lightsUseLinearIntensity();
            static /*0x28bcaa0*/ void set_lightsUseLinearIntensity(bool value);
            static /*0x28bcadc*/ bool get_lightsUseColorTemperature();
            static /*0x28bcb04*/ void set_lightsUseColorTemperature(bool value);
            static /*0x28bcb40*/ uint get_defaultRenderingLayerMask();
            static /*0x28bcb68*/ void set_defaultRenderingLayerMask(uint value);
            static /*0x28bcba4*/ bool get_useScriptableRenderPipelineBatching();
            static /*0x28bcbcc*/ void set_useScriptableRenderPipelineBatching(bool value);
            static /*0x28bcc08*/ bool get_logWhenShaderIsCompiled();
            static /*0x28bcc30*/ void set_logWhenShaderIsCompiled(bool value);
            static /*0x28bcc6c*/ bool get_disableBuiltinCustomRenderTextureUpdate();
            static /*0x28bcc94*/ void set_disableBuiltinCustomRenderTextureUpdate(bool value);
            static /*0x28bccd0*/ UnityEngine.Rendering.VideoShadersIncludeMode get_videoShadersIncludeMode();
            static /*0x28bccf8*/ bool HasShaderDefine(UnityEngine.Rendering.GraphicsTier tier, UnityEngine.Rendering.BuiltinShaderDefine defineHash);
            static /*0x28bcd3c*/ bool HasShaderDefine(UnityEngine.Rendering.BuiltinShaderDefine defineHash);
            static /*0x28bcdc0*/ UnityEngine.ScriptableObject get_INTERNAL_currentRenderPipeline();
            static /*0x28bcde8*/ UnityEngine.Rendering.RenderPipelineAsset get_currentRenderPipeline();
            static /*0x28bce78*/ UnityEngine.Rendering.RenderPipelineAsset get_renderPipelineAsset();
            static /*0x28bcf0c*/ void set_renderPipelineAsset(UnityEngine.Rendering.RenderPipelineAsset value);
            static /*0x28bcf84*/ UnityEngine.ScriptableObject get_INTERNAL_defaultRenderPipeline();
            static /*0x28bcfac*/ void set_INTERNAL_defaultRenderPipeline(UnityEngine.ScriptableObject value);
            static /*0x28bce7c*/ UnityEngine.Rendering.RenderPipelineAsset get_defaultRenderPipeline();
            static /*0x28bcf48*/ void set_defaultRenderPipeline(UnityEngine.Rendering.RenderPipelineAsset value);
            static /*0x28bcfe8*/ UnityEngine.ScriptableObject[] GetAllConfiguredRenderPipelines();
            static /*0x28bd010*/ UnityEngine.Rendering.RenderPipelineAsset[] get_allConfiguredRenderPipelines();
            static /*0x28bd090*/ UnityEngine.Object GetGraphicsSettings();
            static /*0x28bd0b8*/ void SetShaderMode(UnityEngine.Rendering.BuiltinShaderType type, UnityEngine.Rendering.BuiltinShaderMode mode);
            static /*0x28bd0fc*/ UnityEngine.Rendering.BuiltinShaderMode GetShaderMode(UnityEngine.Rendering.BuiltinShaderType type);
            static /*0x28bd138*/ void SetCustomShader(UnityEngine.Rendering.BuiltinShaderType type, UnityEngine.Shader shader);
            static /*0x28bd17c*/ UnityEngine.Shader GetCustomShader(UnityEngine.Rendering.BuiltinShaderType type);
            static void RegisterRenderPipelineSettings<T>(UnityEngine.Rendering.RenderPipelineGlobalSettings settings);
            static /*0x28bd1b8*/ void RegisterRenderPipeline(string renderpipelineName, UnityEngine.Object settings);
            static void UnregisterRenderPipelineSettings<T>();
            static /*0x28bd1fc*/ void UnregisterRenderPipeline(string renderpipelineName);
            static UnityEngine.Rendering.RenderPipelineGlobalSettings GetSettingsForRenderPipeline<T>();
            static /*0x28bd238*/ UnityEngine.Object GetSettingsForRenderPipeline(string renderpipelineName);
            static /*0x28bd274*/ bool get_cameraRelativeLightCulling();
            static /*0x28bd29c*/ void set_cameraRelativeLightCulling(bool value);
            static /*0x28bd2d8*/ bool get_cameraRelativeShadowCulling();
            static /*0x28bd300*/ void set_cameraRelativeShadowCulling(bool value);
            static /*0x28bc958*/ void get_transparencySortAxis_Injected(ref UnityEngine.Vector3 ret);
            static /*0x28bc9d8*/ void set_transparencySortAxis_Injected(ref UnityEngine.Vector3 value);
            /*0x28bc850*/ GraphicsSettings();
        }

        enum IndexFormat
        {
            UInt16 = 0,
            UInt32 = 1,
        }

        enum MeshUpdateFlags
        {
            Default = 0,
            DontValidateIndices = 1,
            DontResetBoneBounds = 2,
            DontNotifyMeshUsers = 4,
            DontRecalculateBounds = 8,
        }

        enum VertexAttributeFormat
        {
            Float32 = 0,
            Float16 = 1,
            UNorm8 = 2,
            SNorm8 = 3,
            UNorm16 = 4,
            SNorm16 = 5,
            UInt8 = 6,
            SInt8 = 7,
            UInt16 = 8,
            SInt16 = 9,
            UInt32 = 10,
            SInt32 = 11,
        }

        enum VertexAttribute
        {
            Position = 0,
            Normal = 1,
            Tangent = 2,
            Color = 3,
            TexCoord0 = 4,
            TexCoord1 = 5,
            TexCoord2 = 6,
            TexCoord3 = 7,
            TexCoord4 = 8,
            TexCoord5 = 9,
            TexCoord6 = 10,
            TexCoord7 = 11,
            BlendWeight = 12,
            BlendIndices = 13,
        }

        enum ShaderParamType
        {
            Float = 0,
            Int = 1,
            Bool = 2,
            Half = 3,
            Short = 4,
            UInt = 5,
        }

        enum ShaderConstantType
        {
            Vector = 0,
            Matrix = 1,
            Struct = 2,
        }

        enum OpaqueSortMode
        {
            Default = 0,
            FrontToBack = 1,
            NoDistanceSort = 2,
        }

        enum RenderQueue
        {
            Background = 1000,
            Geometry = 2000,
            AlphaTest = 2450,
            GeometryLast = 2500,
            Transparent = 3000,
            Overlay = 4000,
        }

        enum RenderBufferLoadAction
        {
            Load = 0,
            Clear = 1,
            DontCare = 2,
        }

        enum RenderBufferStoreAction
        {
            Store = 0,
            Resolve = 1,
            StoreAndResolve = 2,
            DontCare = 3,
        }

        enum FastMemoryFlags
        {
            None = 0,
            SpillTop = 1,
            SpillBottom = 2,
        }

        enum BlendMode
        {
            Zero = 0,
            One = 1,
            DstColor = 2,
            SrcColor = 3,
            OneMinusDstColor = 4,
            SrcAlpha = 5,
            OneMinusSrcColor = 6,
            DstAlpha = 7,
            OneMinusDstAlpha = 8,
            SrcAlphaSaturate = 9,
            OneMinusSrcAlpha = 10,
        }

        enum BlendOp
        {
            Add = 0,
            Subtract = 1,
            ReverseSubtract = 2,
            Min = 3,
            Max = 4,
            LogicalClear = 5,
            LogicalSet = 6,
            LogicalCopy = 7,
            LogicalCopyInverted = 8,
            LogicalNoop = 9,
            LogicalInvert = 10,
            LogicalAnd = 11,
            LogicalNand = 12,
            LogicalOr = 13,
            LogicalNor = 14,
            LogicalXor = 15,
            LogicalEquivalence = 16,
            LogicalAndReverse = 17,
            LogicalAndInverted = 18,
            LogicalOrReverse = 19,
            LogicalOrInverted = 20,
            Multiply = 21,
            Screen = 22,
            Overlay = 23,
            Darken = 24,
            Lighten = 25,
            ColorDodge = 26,
            ColorBurn = 27,
            HardLight = 28,
            SoftLight = 29,
            Difference = 30,
            Exclusion = 31,
            HSLHue = 32,
            HSLSaturation = 33,
            HSLColor = 34,
            HSLLuminosity = 35,
        }

        enum CompareFunction
        {
            Disabled = 0,
            Never = 1,
            Less = 2,
            Equal = 3,
            LessEqual = 4,
            Greater = 5,
            NotEqual = 6,
            GreaterEqual = 7,
            Always = 8,
        }

        enum CullMode
        {
            Off = 0,
            Front = 1,
            Back = 2,
        }

        enum ColorWriteMask
        {
            Alpha = 1,
            Blue = 2,
            Green = 4,
            Red = 8,
            All = 15,
        }

        enum StencilOp
        {
            Keep = 0,
            Zero = 1,
            Replace = 2,
            IncrementSaturate = 3,
            DecrementSaturate = 4,
            Invert = 5,
            IncrementWrap = 6,
            DecrementWrap = 7,
        }

        enum AmbientMode
        {
            Skybox = 0,
            Trilight = 1,
            Flat = 3,
            Custom = 4,
        }

        enum DefaultReflectionMode
        {
            Skybox = 0,
            Custom = 1,
        }

        enum ReflectionCubemapCompression
        {
            Uncompressed = 0,
            Compressed = 1,
            Auto = 2,
        }

        enum CameraEvent
        {
            BeforeDepthTexture = 0,
            AfterDepthTexture = 1,
            BeforeDepthNormalsTexture = 2,
            AfterDepthNormalsTexture = 3,
            BeforeGBuffer = 4,
            AfterGBuffer = 5,
            BeforeLighting = 6,
            AfterLighting = 7,
            BeforeFinalPass = 8,
            AfterFinalPass = 9,
            BeforeForwardOpaque = 10,
            AfterForwardOpaque = 11,
            BeforeImageEffectsOpaque = 12,
            AfterImageEffectsOpaque = 13,
            BeforeSkybox = 14,
            AfterSkybox = 15,
            BeforeForwardAlpha = 16,
            AfterForwardAlpha = 17,
            BeforeImageEffects = 18,
            AfterImageEffects = 19,
            AfterEverything = 20,
            BeforeReflections = 21,
            AfterReflections = 22,
            BeforeHaloAndLensFlares = 23,
            AfterHaloAndLensFlares = 24,
        }

        class CameraEventUtils
        {
            static UnityEngine.Rendering.CameraEvent k_MinimumValue = 0;
            static UnityEngine.Rendering.CameraEvent k_MaximumValue = 24;

            static /*0x28bd33c*/ bool IsValid(UnityEngine.Rendering.CameraEvent value);
        }

        enum LightEvent
        {
            BeforeShadowMap = 0,
            AfterShadowMap = 1,
            BeforeScreenspaceMask = 2,
            AfterScreenspaceMask = 3,
            BeforeShadowMapPass = 4,
            AfterShadowMapPass = 5,
        }

        enum ShadowMapPass
        {
            PointlightPositiveX = 1,
            PointlightNegativeX = 2,
            PointlightPositiveY = 4,
            PointlightNegativeY = 8,
            PointlightPositiveZ = 16,
            PointlightNegativeZ = 32,
            DirectionalCascade0 = 64,
            DirectionalCascade1 = 128,
            DirectionalCascade2 = 256,
            DirectionalCascade3 = 512,
            Spotlight = 1024,
            Pointlight = 63,
            Directional = 960,
            All = 2047,
        }

        enum BuiltinRenderTextureType
        {
            PropertyName = -4,
            BufferPtr = -3,
            RenderTexture = -2,
            BindableTexture = -1,
            None = 0,
            CurrentActive = 1,
            CameraTarget = 2,
            Depth = 3,
            DepthNormals = 4,
            ResolvedDepth = 5,
            PrepassNormalsSpec = 7,
            PrepassLight = 8,
            PrepassLightSpec = 9,
            GBuffer0 = 10,
            GBuffer1 = 11,
            GBuffer2 = 12,
            GBuffer3 = 13,
            Reflections = 14,
            MotionVectors = 15,
            GBuffer4 = 16,
            GBuffer5 = 17,
            GBuffer6 = 18,
            GBuffer7 = 19,
        }

        enum PassType
        {
            Normal = 0,
            Vertex = 1,
            VertexLM = 2,
            VertexLMRGBM = 3,
            ForwardBase = 4,
            ForwardAdd = 5,
            LightPrePassBase = 6,
            LightPrePassFinal = 7,
            ShadowCaster = 8,
            Deferred = 10,
            Meta = 11,
            MotionVectors = 12,
            ScriptableRenderPipeline = 13,
            ScriptableRenderPipelineDefaultUnlit = 14,
            GrabPass = 15,
        }

        enum ShadowCastingMode
        {
            Off = 0,
            On = 1,
            TwoSided = 2,
            ShadowsOnly = 3,
        }

        enum LightShadowResolution
        {
            FromQualitySettings = -1,
            Low = 0,
            Medium = 1,
            High = 2,
            VeryHigh = 3,
        }

        enum GraphicsDeviceType
        {
            OpenGL2 = 0,
            Direct3D9 = 1,
            Direct3D11 = 2,
            PlayStation3 = 3,
            Null = 4,
            Xbox360 = 6,
            OpenGLES2 = 8,
            OpenGLES3 = 11,
            PlayStationVita = 12,
            PlayStation4 = 13,
            XboxOne = 14,
            PlayStationMobile = 15,
            Metal = 16,
            OpenGLCore = 17,
            Direct3D12 = 18,
            N3DS = 19,
            Vulkan = 21,
            Switch = 22,
            XboxOneD3D12 = 23,
            GameCoreXboxOne = 24,
            GameCoreScarlett = -1,
            GameCoreXboxSeries = 25,
            PlayStation5 = 26,
            PlayStation5NGGC = 27,
        }

        enum GraphicsTier
        {
            Tier1 = 0,
            Tier2 = 1,
            Tier3 = 2,
        }

        struct SubMeshDescriptor
        {
            /*0x10*/ UnityEngine.Bounds <bounds>k__BackingField;
            /*0x28*/ UnityEngine.MeshTopology <topology>k__BackingField;
            /*0x2c*/ int <indexStart>k__BackingField;
            /*0x30*/ int <indexCount>k__BackingField;
            /*0x34*/ int <baseVertex>k__BackingField;
            /*0x38*/ int <firstVertex>k__BackingField;
            /*0x3c*/ int <vertexCount>k__BackingField;

            /*0x28bd348*/ SubMeshDescriptor(int indexStart, int indexCount, UnityEngine.MeshTopology topology);
            /*0x28bd360*/ UnityEngine.Bounds get_bounds();
            /*0x28bd374*/ void set_bounds(UnityEngine.Bounds value);
            /*0x28bd388*/ UnityEngine.MeshTopology get_topology();
            /*0x28bd390*/ void set_topology(UnityEngine.MeshTopology value);
            /*0x28bd398*/ int get_indexStart();
            /*0x28bd3a0*/ void set_indexStart(int value);
            /*0x28bd3a8*/ int get_indexCount();
            /*0x28bd3b0*/ void set_indexCount(int value);
            /*0x28bd3b8*/ int get_baseVertex();
            /*0x28bd3c0*/ void set_baseVertex(int value);
            /*0x28bd3c8*/ int get_firstVertex();
            /*0x28bd3d0*/ void set_firstVertex(int value);
            /*0x28bd3d8*/ int get_vertexCount();
            /*0x28bd3e0*/ void set_vertexCount(int value);
            /*0x28bd3e8*/ string ToString();
        }

        struct VertexAttributeDescriptor : System.IEquatable<UnityEngine.Rendering.VertexAttributeDescriptor>
        {
            /*0x10*/ UnityEngine.Rendering.VertexAttribute <attribute>k__BackingField;
            /*0x14*/ UnityEngine.Rendering.VertexAttributeFormat <format>k__BackingField;
            /*0x18*/ int <dimension>k__BackingField;
            /*0x1c*/ int <stream>k__BackingField;

            static /*0x28bd9b8*/ bool op_Equality(UnityEngine.Rendering.VertexAttributeDescriptor lhs, UnityEngine.Rendering.VertexAttributeDescriptor rhs);
            static /*0x28bd9fc*/ bool op_Inequality(UnityEngine.Rendering.VertexAttributeDescriptor lhs, UnityEngine.Rendering.VertexAttributeDescriptor rhs);
            /*0x28bd6c4*/ VertexAttributeDescriptor(UnityEngine.Rendering.VertexAttribute attribute, UnityEngine.Rendering.VertexAttributeFormat format, int dimension, int stream);
            /*0x28bd684*/ UnityEngine.Rendering.VertexAttribute get_attribute();
            /*0x28bd68c*/ void set_attribute(UnityEngine.Rendering.VertexAttribute value);
            /*0x28bd694*/ UnityEngine.Rendering.VertexAttributeFormat get_format();
            /*0x28bd69c*/ void set_format(UnityEngine.Rendering.VertexAttributeFormat value);
            /*0x28bd6a4*/ int get_dimension();
            /*0x28bd6ac*/ void set_dimension(int value);
            /*0x28bd6b4*/ int get_stream();
            /*0x28bd6bc*/ void set_stream(int value);
            /*0x28bd6d0*/ string ToString();
            /*0x28bd8a4*/ int GetHashCode();
            /*0x28bd8cc*/ bool Equals(object other);
            /*0x28bd974*/ bool Equals(UnityEngine.Rendering.VertexAttributeDescriptor other);
        }

        enum FormatSwizzle
        {
            FormatSwizzleR = 0,
            FormatSwizzleG = 1,
            FormatSwizzleB = 2,
            FormatSwizzleA = 3,
            FormatSwizzle0 = 4,
            FormatSwizzle1 = 5,
        }

        struct RenderTargetIdentifier : System.IEquatable<UnityEngine.Rendering.RenderTargetIdentifier>
        {
            static int AllDepthSlices = -1;
            /*0x10*/ UnityEngine.Rendering.BuiltinRenderTextureType m_Type;
            /*0x14*/ int m_NameID;
            /*0x18*/ int m_InstanceID;
            /*0x20*/ nint m_BufferPointer;
            /*0x28*/ int m_MipLevel;
            /*0x2c*/ UnityEngine.CubemapFace m_CubeFace;
            /*0x30*/ int m_DepthSlice;

            static /*0x28bdeb4*/ UnityEngine.Rendering.RenderTargetIdentifier op_Implicit(UnityEngine.Rendering.BuiltinRenderTextureType type);
            static /*0x28bdf2c*/ UnityEngine.Rendering.RenderTargetIdentifier op_Implicit(string name);
            static /*0x28bdf7c*/ UnityEngine.Rendering.RenderTargetIdentifier op_Implicit(int nameID);
            static /*0x28bdfec*/ UnityEngine.Rendering.RenderTargetIdentifier op_Implicit(UnityEngine.Texture tex);
            static /*0x28be03c*/ UnityEngine.Rendering.RenderTargetIdentifier op_Implicit(UnityEngine.RenderBuffer buf);
            static /*0x28be47c*/ bool op_Equality(UnityEngine.Rendering.RenderTargetIdentifier lhs, UnityEngine.Rendering.RenderTargetIdentifier rhs);
            static /*0x28be4ac*/ bool op_Inequality(UnityEngine.Rendering.RenderTargetIdentifier lhs, UnityEngine.Rendering.RenderTargetIdentifier rhs);
            /*0x28bda40*/ RenderTargetIdentifier(UnityEngine.Rendering.BuiltinRenderTextureType type);
            /*0x28bdab4*/ RenderTargetIdentifier(UnityEngine.Rendering.BuiltinRenderTextureType type, int mipLevel, UnityEngine.CubemapFace cubeFace, int depthSlice);
            /*0x28bdb38*/ RenderTargetIdentifier(string name);
            /*0x28bdbb8*/ RenderTargetIdentifier(string name, int mipLevel, UnityEngine.CubemapFace cubeFace, int depthSlice);
            /*0x28bdc48*/ RenderTargetIdentifier(int nameID);
            /*0x28bdcbc*/ RenderTargetIdentifier(int nameID, int mipLevel, UnityEngine.CubemapFace cubeFace, int depthSlice);
            /*0x28b40ac*/ RenderTargetIdentifier(UnityEngine.Rendering.RenderTargetIdentifier renderTargetIdentifier, int mipLevel, UnityEngine.CubemapFace cubeFace, int depthSlice);
            /*0x28b86ec*/ RenderTargetIdentifier(UnityEngine.Texture tex);
            /*0x28bdd40*/ RenderTargetIdentifier(UnityEngine.Texture tex, int mipLevel, UnityEngine.CubemapFace cubeFace, int depthSlice);
            /*0x28bde94*/ RenderTargetIdentifier(UnityEngine.RenderBuffer buf, int mipLevel, UnityEngine.CubemapFace cubeFace, int depthSlice);
            /*0x28be060*/ string ToString();
            /*0x28be308*/ int GetHashCode();
            /*0x28be354*/ bool Equals(UnityEngine.Rendering.RenderTargetIdentifier rhs);
            /*0x28be3ec*/ bool Equals(object obj);
        }

        enum RenderTargetFlags
        {
            None = 0,
            ReadOnlyDepth = 1,
            ReadOnlyStencil = 2,
            ReadOnlyDepthStencil = 3,
        }

        struct RenderTargetBinding
        {
            /*0x10*/ UnityEngine.Rendering.RenderTargetIdentifier[] m_ColorRenderTargets;
            /*0x18*/ UnityEngine.Rendering.RenderTargetIdentifier m_DepthRenderTarget;
            /*0x40*/ UnityEngine.Rendering.RenderBufferLoadAction[] m_ColorLoadActions;
            /*0x48*/ UnityEngine.Rendering.RenderBufferStoreAction[] m_ColorStoreActions;
            /*0x50*/ UnityEngine.Rendering.RenderBufferLoadAction m_DepthLoadAction;
            /*0x54*/ UnityEngine.Rendering.RenderBufferStoreAction m_DepthStoreAction;
            /*0x58*/ UnityEngine.Rendering.RenderTargetFlags m_Flags;

            /*0x28be528*/ RenderTargetBinding(UnityEngine.Rendering.RenderTargetIdentifier[] colorRenderTargets, UnityEngine.Rendering.RenderBufferLoadAction[] colorLoadActions, UnityEngine.Rendering.RenderBufferStoreAction[] colorStoreActions, UnityEngine.Rendering.RenderTargetIdentifier depthRenderTarget, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction);
            /*0x28be550*/ RenderTargetBinding(UnityEngine.Rendering.RenderTargetIdentifier colorRenderTarget, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderTargetIdentifier depthRenderTarget, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction);
            /*0x28be6b0*/ RenderTargetBinding(UnityEngine.RenderTargetSetup setup);
            /*0x28b53a0*/ UnityEngine.Rendering.RenderTargetIdentifier[] get_colorRenderTargets();
            /*0x28be4e0*/ void set_colorRenderTargets(UnityEngine.Rendering.RenderTargetIdentifier[] value);
            /*0x28b53c0*/ UnityEngine.Rendering.RenderTargetIdentifier get_depthRenderTarget();
            /*0x28be4e8*/ void set_depthRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier value);
            /*0x28b53a8*/ UnityEngine.Rendering.RenderBufferLoadAction[] get_colorLoadActions();
            /*0x28be500*/ void set_colorLoadActions(UnityEngine.Rendering.RenderBufferLoadAction[] value);
            /*0x28b53b0*/ UnityEngine.Rendering.RenderBufferStoreAction[] get_colorStoreActions();
            /*0x28be508*/ void set_colorStoreActions(UnityEngine.Rendering.RenderBufferStoreAction[] value);
            /*0x28b53b8*/ UnityEngine.Rendering.RenderBufferLoadAction get_depthLoadAction();
            /*0x28be510*/ void set_depthLoadAction(UnityEngine.Rendering.RenderBufferLoadAction value);
            /*0x28b53d8*/ UnityEngine.Rendering.RenderBufferStoreAction get_depthStoreAction();
            /*0x28be518*/ void set_depthStoreAction(UnityEngine.Rendering.RenderBufferStoreAction value);
            /*0x28b58cc*/ UnityEngine.Rendering.RenderTargetFlags get_flags();
            /*0x28be520*/ void set_flags(UnityEngine.Rendering.RenderTargetFlags value);
        }

        enum ReflectionProbeUsage
        {
            Off = 0,
            BlendProbes = 1,
            BlendProbesAndSkybox = 2,
            Simple = 3,
        }

        enum ReflectionProbeType
        {
            Cube = 0,
            Card = 1,
        }

        enum ReflectionProbeClearFlags
        {
            Skybox = 1,
            SolidColor = 2,
        }

        enum ReflectionProbeMode
        {
            Baked = 0,
            Realtime = 1,
            Custom = 2,
        }

        struct ReflectionProbeBlendInfo
        {
            /*0x10*/ UnityEngine.ReflectionProbe probe;
            /*0x18*/ float weight;
        }

        enum ReflectionProbeRefreshMode
        {
            OnAwake = 0,
            EveryFrame = 1,
            ViaScripting = 2,
        }

        enum ReflectionProbeTimeSlicingMode
        {
            AllFacesAtOnce = 0,
            IndividualFaces = 1,
            NoTimeSlicing = 2,
        }

        enum ShadowSamplingMode
        {
            CompareDepths = 0,
            RawDepth = 1,
            None = 2,
        }

        enum LightProbeUsage
        {
            Off = 0,
            BlendProbes = 1,
            UseProxyVolume = 2,
            CustomProvided = 4,
        }

        enum BuiltinShaderType
        {
            DeferredShading = 0,
            DeferredReflections = 1,
            LegacyDeferredLighting = 2,
            ScreenSpaceShadows = 3,
            DepthNormals = 4,
            MotionVectors = 5,
            LightHalo = 6,
            LensFlare = 7,
        }

        enum BuiltinShaderMode
        {
            Disabled = 0,
            UseBuiltin = 1,
            UseCustom = 2,
        }

        enum BuiltinShaderDefine
        {
            UNITY_NO_DXT5nm = 0,
            UNITY_NO_RGBM = 1,
            UNITY_USE_NATIVE_HDR = 2,
            UNITY_ENABLE_REFLECTION_BUFFERS = 3,
            UNITY_FRAMEBUFFER_FETCH_AVAILABLE = 4,
            UNITY_ENABLE_NATIVE_SHADOW_LOOKUPS = 5,
            UNITY_METAL_SHADOWS_USE_POINT_FILTERING = 6,
            UNITY_NO_CUBEMAP_ARRAY = 7,
            UNITY_NO_SCREENSPACE_SHADOWS = 8,
            UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS = 9,
            UNITY_PBS_USE_BRDF1 = 10,
            UNITY_PBS_USE_BRDF2 = 11,
            UNITY_PBS_USE_BRDF3 = 12,
            UNITY_NO_FULL_STANDARD_SHADER = 13,
            UNITY_SPECCUBE_BOX_PROJECTION = 14,
            UNITY_SPECCUBE_BLENDING = 15,
            UNITY_ENABLE_DETAIL_NORMALMAP = 16,
            SHADER_API_MOBILE = 17,
            SHADER_API_DESKTOP = 18,
            UNITY_HARDWARE_TIER1 = 19,
            UNITY_HARDWARE_TIER2 = 20,
            UNITY_HARDWARE_TIER3 = 21,
            UNITY_COLORSPACE_GAMMA = 22,
            UNITY_LIGHT_PROBE_PROXY_VOLUME = 23,
            UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS = 24,
            UNITY_LIGHTMAP_DLDR_ENCODING = 25,
            UNITY_LIGHTMAP_RGBM_ENCODING = 26,
            UNITY_LIGHTMAP_FULL_HDR = 27,
            UNITY_VIRTUAL_TEXTURING = 28,
            UNITY_PRETRANSFORM_TO_DISPLAY_ORIENTATION = 29,
            UNITY_ASTC_NORMALMAP_ENCODING = 30,
            SHADER_API_GLES30 = 31,
            UNITY_UNIFIED_SHADER_PRECISION_MODEL = 32,
        }

        enum VideoShadersIncludeMode
        {
            Never = 0,
            Referenced = 1,
            Always = 2,
        }

        enum TextureDimension
        {
            Unknown = -1,
            None = 0,
            Any = 1,
            Tex2D = 2,
            Tex3D = 3,
            Cube = 4,
            Tex2DArray = 5,
            CubeArray = 6,
        }

        enum CopyTextureSupport
        {
            None = 0,
            Basic = 1,
            Copy3D = 2,
            DifferentTypes = 4,
            TextureToRT = 8,
            RTToTexture = 16,
        }

        enum CameraHDRMode
        {
            FP16 = 1,
            R11G11B10 = 2,
        }

        enum RealtimeGICPUUsage
        {
            Low = 25,
            Medium = 50,
            High = 75,
            Unlimited = 100,
        }

        enum ComputeQueueType
        {
            Default = 0,
            Background = 1,
            Urgent = 2,
        }

        enum SinglePassStereoMode
        {
            None = 0,
            SideBySide = 1,
            Instancing = 2,
            Multiview = 3,
        }

        enum CommandBufferExecutionFlags
        {
            None = 0,
            AsyncCompute = 2,
        }

        enum RTClearFlags
        {
            None = 0,
            Color = 1,
            Depth = 2,
            Stencil = 4,
            All = 7,
            DepthStencil = 6,
            ColorDepth = 3,
            ColorStencil = 5,
        }

        enum RenderTextureSubElement
        {
            Color = 0,
            Depth = 1,
            Stencil = 2,
            Default = 3,
        }

        enum RenderingThreadingMode
        {
            Direct = 0,
            SingleThreaded = 1,
            MultiThreaded = 2,
            LegacyJobified = 3,
            NativeGraphicsJobs = 4,
            NativeGraphicsJobsWithoutRenderThread = 5,
        }

        enum CameraLateLatchMatrixType
        {
            View = 0,
            InverseView = 1,
            ViewProjection = 2,
            InverseViewProjection = 3,
        }

        enum OpenGLESVersion
        {
            None = 0,
            OpenGLES20 = 1,
            OpenGLES30 = 2,
            OpenGLES31 = 3,
            OpenGLES31AEP = 4,
            OpenGLES32 = 5,
        }

        class SplashScreen
        {
            static /*0x28be88c*/ bool get_isFinished();
            static /*0x28be8b4*/ void CancelSplashScreen();
            static /*0x28be8dc*/ void BeginSplashScreenFade();
            static /*0x28be904*/ void Begin();
            static /*0x28be92c*/ void Stop(UnityEngine.Rendering.SplashScreen.StopBehavior stopBehavior);
            static /*0x28be97c*/ void Draw();
            static /*0x28be9a4*/ void SetTime(float time);
            /*0x28be9dc*/ SplashScreen();

            enum StopBehavior
            {
                StopImmediate = 0,
                FadeOut = 1,
            }
        }

        class CommandBufferExtensions
        {
            static /*0x28be9e4*/ void Internal_SwitchIntoFastMemory(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.RenderTargetIdentifier rt, UnityEngine.Rendering.FastMemoryFlags fastMemoryFlags, float residency, bool copyContents);
            static /*0x28bea50*/ void Internal_SwitchOutOfFastMemory(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.RenderTargetIdentifier rt, bool copyContents);
            static /*0x28beaa4*/ void SwitchIntoFastMemory(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RenderTargetIdentifier rid, UnityEngine.Rendering.FastMemoryFlags fastMemoryFlags, float residency, bool copyContents);
            static /*0x28beb10*/ void SwitchOutOfFastMemory(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RenderTargetIdentifier rid, bool copyContents);
        }

        struct AsyncGPUReadbackRequest
        {
            /*0x10*/ nint m_Ptr;
            /*0x18*/ int m_Version;

            static /*0x28beba0*/ void Update_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self);
            static /*0x28bec18*/ void WaitForCompletion_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self);
            static /*0x28bef9c*/ bool IsDone_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self);
            static /*0x28befd8*/ bool HasError_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self);
            static /*0x28bf014*/ int GetLayerCount_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self);
            static /*0x28bf050*/ int GetLayerDataSize_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self);
            static /*0x28bf08c*/ int GetWidth_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self);
            static /*0x28bf0c8*/ int GetHeight_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self);
            static /*0x28bf104*/ int GetDepth_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self);
            static /*0x28bf184*/ void SetScriptingCallback_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static /*0x28bf20c*/ nint GetDataRaw_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self, int layer);
            /*0x28beb64*/ void Update();
            /*0x28bebdc*/ void WaitForCompletion();
            Unity.Collections.NativeArray<T> GetData<T>(int layer);
            /*0x28bec54*/ bool get_done();
            /*0x28beccc*/ bool get_hasError();
            /*0x28bed44*/ int get_layerCount();
            /*0x28bedbc*/ int get_layerDataSize();
            /*0x28bee34*/ int get_width();
            /*0x28beeac*/ int get_height();
            /*0x28bef24*/ int get_depth();
            /*0x28bec90*/ bool IsDone();
            /*0x28bed08*/ bool HasError();
            /*0x28bed80*/ int GetLayerCount();
            /*0x28bedf8*/ int GetLayerDataSize();
            /*0x28bee70*/ int GetWidth();
            /*0x28beee8*/ int GetHeight();
            /*0x28bef60*/ int GetDepth();
            /*0x28bf140*/ void SetScriptingCallback(System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            /*0x28bf1c8*/ nint GetDataRaw(int layer);
        }

        struct AsyncRequestNativeArrayData
        {
            /*0x10*/ void* nativeArrayBuffer;
            /*0x18*/ long lengthInBytes;

            static UnityEngine.Rendering.AsyncRequestNativeArrayData CreateAndCheckAccess<T>(Unity.Collections.NativeArray<T> array);
            static UnityEngine.Rendering.AsyncRequestNativeArrayData CreateAndCheckAccess<T>(Unity.Collections.NativeSlice<T> array);
        }

        class AsyncGPUReadback
        {
            static /*0x28bf250*/ void ValidateFormat(UnityEngine.Texture src, UnityEngine.Experimental.Rendering.GraphicsFormat dstformat);
            static /*0x28bf34c*/ void WaitAllRequests();
            static /*0x28bf374*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request(UnityEngine.ComputeBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static /*0x28bf42c*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request(UnityEngine.ComputeBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static /*0x28bf4fc*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request(UnityEngine.GraphicsBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static /*0x28bf5b4*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request(UnityEngine.GraphicsBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static /*0x28bf684*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request(UnityEngine.Texture src, int mipIndex, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static /*0x28bf74c*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request(UnityEngine.Texture src, int mipIndex, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static /*0x28bf7ec*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request(UnityEngine.Texture src, int mipIndex, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static /*0x28bf8e0*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static /*0x28bf9f0*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static /*0x28bfad0*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.ComputeBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.ComputeBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.GraphicsBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.GraphicsBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, int mipIndex, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, int mipIndex, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, int mipIndex, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeArray<T>(ref Unity.Collections.NativeArray<T> output, UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.ComputeBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.ComputeBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.GraphicsBuffer src, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.GraphicsBuffer src, int size, int offset, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, int mipIndex, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, int mipIndex, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, int mipIndex, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.TextureFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static UnityEngine.Rendering.AsyncGPUReadbackRequest RequestIntoNativeSlice<T>(ref Unity.Collections.NativeSlice<T> output, UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, System.Action<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback);
            static /*0x28bf3d0*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request_Internal_ComputeBuffer_1(UnityEngine.ComputeBuffer buffer, UnityEngine.Rendering.AsyncRequestNativeArrayData* data);
            static /*0x28bf488*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request_Internal_ComputeBuffer_2(UnityEngine.ComputeBuffer src, int size, int offset, UnityEngine.Rendering.AsyncRequestNativeArrayData* data);
            static /*0x28bf558*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request_Internal_GraphicsBuffer_1(UnityEngine.GraphicsBuffer buffer, UnityEngine.Rendering.AsyncRequestNativeArrayData* data);
            static /*0x28bf610*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request_Internal_GraphicsBuffer_2(UnityEngine.GraphicsBuffer src, int size, int offset, UnityEngine.Rendering.AsyncRequestNativeArrayData* data);
            static /*0x28bf6e0*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request_Internal_Texture_1(UnityEngine.Texture src, int mipIndex, UnityEngine.Rendering.AsyncRequestNativeArrayData* data);
            static /*0x28bf86c*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request_Internal_Texture_2(UnityEngine.Texture src, int mipIndex, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, UnityEngine.Rendering.AsyncRequestNativeArrayData* data);
            static /*0x28bf93c*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request_Internal_Texture_3(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.Rendering.AsyncRequestNativeArrayData* data);
            static /*0x28bfb98*/ UnityEngine.Rendering.AsyncGPUReadbackRequest Request_Internal_Texture_4(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, UnityEngine.Rendering.AsyncRequestNativeArrayData* data);
            static /*0x28bfc54*/ void Request_Internal_ComputeBuffer_1_Injected(UnityEngine.ComputeBuffer buffer, UnityEngine.Rendering.AsyncRequestNativeArrayData* data, ref UnityEngine.Rendering.AsyncGPUReadbackRequest ret);
            static /*0x28bfca8*/ void Request_Internal_ComputeBuffer_2_Injected(UnityEngine.ComputeBuffer src, int size, int offset, UnityEngine.Rendering.AsyncRequestNativeArrayData* data, ref UnityEngine.Rendering.AsyncGPUReadbackRequest ret);
            static /*0x28bfd14*/ void Request_Internal_GraphicsBuffer_1_Injected(UnityEngine.GraphicsBuffer buffer, UnityEngine.Rendering.AsyncRequestNativeArrayData* data, ref UnityEngine.Rendering.AsyncGPUReadbackRequest ret);
            static /*0x28bfd68*/ void Request_Internal_GraphicsBuffer_2_Injected(UnityEngine.GraphicsBuffer src, int size, int offset, UnityEngine.Rendering.AsyncRequestNativeArrayData* data, ref UnityEngine.Rendering.AsyncGPUReadbackRequest ret);
            static /*0x28bfdd4*/ void Request_Internal_Texture_1_Injected(UnityEngine.Texture src, int mipIndex, UnityEngine.Rendering.AsyncRequestNativeArrayData* data, ref UnityEngine.Rendering.AsyncGPUReadbackRequest ret);
            static /*0x28bfe30*/ void Request_Internal_Texture_2_Injected(UnityEngine.Texture src, int mipIndex, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, UnityEngine.Rendering.AsyncRequestNativeArrayData* data, ref UnityEngine.Rendering.AsyncGPUReadbackRequest ret);
            static /*0x28bfe9c*/ void Request_Internal_Texture_3_Injected(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.Rendering.AsyncRequestNativeArrayData* data, ref UnityEngine.Rendering.AsyncGPUReadbackRequest ret);
            static /*0x28bff38*/ void Request_Internal_Texture_4_Injected(UnityEngine.Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat dstFormat, UnityEngine.Rendering.AsyncRequestNativeArrayData* data, ref UnityEngine.Rendering.AsyncGPUReadbackRequest ret);
        }

        enum SynchronisationStage
        {
            VertexProcessing = 0,
            PixelProcessing = 1,
        }

        struct GPUFence
        {
            /*0x28bffe0*/ bool get_passed();
        }

        class PIX
        {
            static /*0x28bffe8*/ void BeginGPUCapture();
            static /*0x28c0010*/ void EndGPUCapture();
            static /*0x28c0038*/ bool IsAttached();
            /*0x28c0060*/ PIX();
        }

        struct ScopedRenderPass : System.IDisposable
        {
            /*0x10*/ UnityEngine.Rendering.ScriptableRenderContext m_Context;

            /*0x28c0068*/ ScopedRenderPass(UnityEngine.Rendering.ScriptableRenderContext context);
            /*0x28c0070*/ void Dispose();
        }

        struct ScopedSubPass : System.IDisposable
        {
            /*0x10*/ UnityEngine.Rendering.ScriptableRenderContext m_Context;

            /*0x28c014c*/ ScopedSubPass(UnityEngine.Rendering.ScriptableRenderContext context);
            /*0x28c0154*/ void Dispose();
        }

        class RenderPipelineManager
        {
            static /*0x0*/ UnityEngine.Rendering.RenderPipelineAsset s_CurrentPipelineAsset;
            static /*0x8*/ System.Collections.Generic.List<UnityEngine.Camera> s_Cameras;
            static /*0x10*/ string s_currentPipelineType;
            static /*0x18*/ string s_builtinPipelineName;
            static /*0x20*/ UnityEngine.Rendering.RenderPipeline s_currentPipeline;
            static /*0x28*/ System.Action<UnityEngine.Rendering.ScriptableRenderContext, System.Collections.Generic.List<UnityEngine.Camera>> beginContextRendering;
            static /*0x30*/ System.Action<UnityEngine.Rendering.ScriptableRenderContext, System.Collections.Generic.List<UnityEngine.Camera>> endContextRendering;
            static /*0x38*/ System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera[]> beginFrameRendering;
            static /*0x40*/ System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> beginCameraRendering;
            static /*0x48*/ System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera[]> endFrameRendering;
            static /*0x50*/ System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> endCameraRendering;
            static /*0x58*/ System.Action activeRenderPipelineTypeChanged;

            static /*0x28c1c9c*/ RenderPipelineManager();
            static /*0x28c0230*/ UnityEngine.Rendering.RenderPipeline get_currentPipeline();
            static /*0x28c0288*/ void set_currentPipeline(UnityEngine.Rendering.RenderPipeline value);
            static /*0x28c0338*/ void add_beginContextRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, System.Collections.Generic.List<UnityEngine.Camera>> value);
            static /*0x28c042c*/ void remove_beginContextRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, System.Collections.Generic.List<UnityEngine.Camera>> value);
            static /*0x28c0520*/ void add_endContextRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, System.Collections.Generic.List<UnityEngine.Camera>> value);
            static /*0x28c0614*/ void remove_endContextRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, System.Collections.Generic.List<UnityEngine.Camera>> value);
            static /*0x28c0708*/ void add_beginFrameRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera[]> value);
            static /*0x28c07fc*/ void remove_beginFrameRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera[]> value);
            static /*0x28c08f0*/ void add_beginCameraRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> value);
            static /*0x28c09e4*/ void remove_beginCameraRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> value);
            static /*0x28c0ad8*/ void add_endFrameRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera[]> value);
            static /*0x28c0bcc*/ void remove_endFrameRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera[]> value);
            static /*0x28c0cc0*/ void add_endCameraRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> value);
            static /*0x28c0db4*/ void remove_endCameraRendering(System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> value);
            static /*0x28c0ea8*/ void add_activeRenderPipelineTypeChanged(System.Action value);
            static /*0x28c0f84*/ void remove_activeRenderPipelineTypeChanged(System.Action value);
            static /*0x28c1060*/ void BeginContextRendering(UnityEngine.Rendering.ScriptableRenderContext context, System.Collections.Generic.List<UnityEngine.Camera> cameras);
            static /*0x28c1154*/ void BeginCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera);
            static /*0x28c11e4*/ void EndContextRendering(UnityEngine.Rendering.ScriptableRenderContext context, System.Collections.Generic.List<UnityEngine.Camera> cameras);
            static /*0x28c12d8*/ void EndCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera);
            static /*0x28c1368*/ void OnActiveRenderPipelineTypeChanged();
            static /*0x28c13dc*/ void HandleRenderPipelineChange(UnityEngine.Rendering.RenderPipelineAsset pipelineAsset);
            static /*0x28c145c*/ void CleanupRenderPipeline();
            static /*0x28c15f0*/ string GetCurrentPipelineAssetType();
            static /*0x28c1648*/ void DoRenderLoop_Internal(UnityEngine.Rendering.RenderPipelineAsset pipe, nint loopPtr, System.Collections.Generic.List<UnityEngine.Camera.RenderRequest> renderRequests);
            static /*0x28c182c*/ void PrepareRenderPipeline(UnityEngine.Rendering.RenderPipelineAsset pipelineAsset);
        }

        struct VisibleLight : System.IEquatable<UnityEngine.Rendering.VisibleLight>
        {
            /*0x10*/ UnityEngine.LightType m_LightType;
            /*0x14*/ UnityEngine.Color m_FinalColor;
            /*0x24*/ UnityEngine.Rect m_ScreenRect;
            /*0x34*/ UnityEngine.Matrix4x4 m_LocalToWorldMatrix;
            /*0x74*/ float m_Range;
            /*0x78*/ float m_SpotAngle;
            /*0x7c*/ int m_InstanceId;
            /*0x80*/ UnityEngine.Rendering.VisibleLightFlags m_Flags;

            static /*0x28c2474*/ bool op_Equality(UnityEngine.Rendering.VisibleLight left, UnityEngine.Rendering.VisibleLight right);
            static /*0x28c24a8*/ bool op_Inequality(UnityEngine.Rendering.VisibleLight left, UnityEngine.Rendering.VisibleLight right);
            /*0x28c1d44*/ UnityEngine.Light get_light();
            /*0x28c1dd0*/ UnityEngine.LightType get_lightType();
            /*0x28c1dd8*/ void set_lightType(UnityEngine.LightType value);
            /*0x28c1de0*/ UnityEngine.Color get_finalColor();
            /*0x28c1dec*/ void set_finalColor(UnityEngine.Color value);
            /*0x28c1df8*/ UnityEngine.Rect get_screenRect();
            /*0x28c1e04*/ void set_screenRect(UnityEngine.Rect value);
            /*0x28c1e10*/ UnityEngine.Matrix4x4 get_localToWorldMatrix();
            /*0x28c1e2c*/ void set_localToWorldMatrix(UnityEngine.Matrix4x4 value);
            /*0x28c1e48*/ float get_range();
            /*0x28c1e50*/ void set_range(float value);
            /*0x28c1e58*/ float get_spotAngle();
            /*0x28c1e60*/ void set_spotAngle(float value);
            /*0x28c1e68*/ bool get_intersectsNearPlane();
            /*0x28c1e74*/ void set_intersectsNearPlane(bool value);
            /*0x28c1e90*/ bool get_intersectsFarPlane();
            /*0x28c1e9c*/ void set_intersectsFarPlane(bool value);
            /*0x28c1eb8*/ bool Equals(UnityEngine.Rendering.VisibleLight other);
            /*0x28c2130*/ bool Equals(object obj);
            /*0x28c21c0*/ int GetHashCode();
        }

        struct LODParameters : System.IEquatable<UnityEngine.Rendering.LODParameters>
        {
            /*0x10*/ int m_IsOrthographic;
            /*0x14*/ UnityEngine.Vector3 m_CameraPosition;
            /*0x20*/ float m_FieldOfView;
            /*0x24*/ float m_OrthoSize;
            /*0x28*/ int m_CameraPixelHeight;

            static /*0x28c27b0*/ bool op_Equality(UnityEngine.Rendering.LODParameters left, UnityEngine.Rendering.LODParameters right);
            static /*0x28c27e0*/ bool op_Inequality(UnityEngine.Rendering.LODParameters left, UnityEngine.Rendering.LODParameters right);
            /*0x28c24e0*/ bool get_isOrthographic();
            /*0x28c253c*/ void set_isOrthographic(bool value);
            /*0x28c25a8*/ UnityEngine.Vector3 get_cameraPosition();
            /*0x28c25b4*/ void set_cameraPosition(UnityEngine.Vector3 value);
            /*0x28c25c0*/ float get_fieldOfView();
            /*0x28c25c8*/ void set_fieldOfView(float value);
            /*0x28c25d0*/ float get_orthoSize();
            /*0x28c25d8*/ void set_orthoSize(float value);
            /*0x28c25e0*/ int get_cameraPixelHeight();
            /*0x28c25e8*/ void set_cameraPixelHeight(int value);
            /*0x28c25f0*/ bool Equals(UnityEngine.Rendering.LODParameters other);
            /*0x28c268c*/ bool Equals(object obj);
            /*0x28c271c*/ int GetHashCode();
        }

        struct RenderTargetBlendState : System.IEquatable<UnityEngine.Rendering.RenderTargetBlendState>
        {
            /*0x10*/ byte m_WriteMask;
            /*0x11*/ byte m_SourceColorBlendMode;
            /*0x12*/ byte m_DestinationColorBlendMode;
            /*0x13*/ byte m_SourceAlphaBlendMode;
            /*0x14*/ byte m_DestinationAlphaBlendMode;
            /*0x15*/ byte m_ColorBlendOperation;
            /*0x16*/ byte m_AlphaBlendOperation;
            /*0x17*/ byte m_Padding;

            static /*0x28c2814*/ UnityEngine.Rendering.RenderTargetBlendState get_defaultValue();
            static /*0x28c2a40*/ bool op_Equality(UnityEngine.Rendering.RenderTargetBlendState left, UnityEngine.Rendering.RenderTargetBlendState right);
            static /*0x28c2a5c*/ bool op_Inequality(UnityEngine.Rendering.RenderTargetBlendState left, UnityEngine.Rendering.RenderTargetBlendState right);
            /*0x28c2820*/ RenderTargetBlendState(UnityEngine.Rendering.ColorWriteMask writeMask, UnityEngine.Rendering.BlendMode sourceColorBlendMode, UnityEngine.Rendering.BlendMode destinationColorBlendMode, UnityEngine.Rendering.BlendMode sourceAlphaBlendMode, UnityEngine.Rendering.BlendMode destinationAlphaBlendMode, UnityEngine.Rendering.BlendOp colorBlendOperation, UnityEngine.Rendering.BlendOp alphaBlendOperation);
            /*0x28c2844*/ UnityEngine.Rendering.ColorWriteMask get_writeMask();
            /*0x28c284c*/ void set_writeMask(UnityEngine.Rendering.ColorWriteMask value);
            /*0x28c2854*/ UnityEngine.Rendering.BlendMode get_sourceColorBlendMode();
            /*0x28c285c*/ void set_sourceColorBlendMode(UnityEngine.Rendering.BlendMode value);
            /*0x28c2864*/ UnityEngine.Rendering.BlendMode get_destinationColorBlendMode();
            /*0x28c286c*/ void set_destinationColorBlendMode(UnityEngine.Rendering.BlendMode value);
            /*0x28c2874*/ UnityEngine.Rendering.BlendMode get_sourceAlphaBlendMode();
            /*0x28c287c*/ void set_sourceAlphaBlendMode(UnityEngine.Rendering.BlendMode value);
            /*0x28c2884*/ UnityEngine.Rendering.BlendMode get_destinationAlphaBlendMode();
            /*0x28c288c*/ void set_destinationAlphaBlendMode(UnityEngine.Rendering.BlendMode value);
            /*0x28c2894*/ UnityEngine.Rendering.BlendOp get_colorBlendOperation();
            /*0x28c289c*/ void set_colorBlendOperation(UnityEngine.Rendering.BlendOp value);
            /*0x28c28a4*/ UnityEngine.Rendering.BlendOp get_alphaBlendOperation();
            /*0x28c28ac*/ void set_alphaBlendOperation(UnityEngine.Rendering.BlendOp value);
            /*0x28c28b4*/ bool Equals(UnityEngine.Rendering.RenderTargetBlendState other);
            /*0x28c2928*/ bool Equals(object obj);
            /*0x28c29a0*/ int GetHashCode();
        }

        struct ShaderTagId : System.IEquatable<UnityEngine.Rendering.ShaderTagId>
        {
            static /*0x0*/ UnityEngine.Rendering.ShaderTagId none;
            /*0x10*/ int m_Id;

            static /*0x28c2b60*/ bool op_Equality(UnityEngine.Rendering.ShaderTagId tag1, UnityEngine.Rendering.ShaderTagId tag2);
            static /*0x28c2b6c*/ bool op_Inequality(UnityEngine.Rendering.ShaderTagId tag1, UnityEngine.Rendering.ShaderTagId tag2);
            static /*0x28c2b78*/ UnityEngine.Rendering.ShaderTagId op_Explicit(string name);
            static /*0x28c2b90*/ string op_Explicit(UnityEngine.Rendering.ShaderTagId tagId);
            /*0x28c2a7c*/ ShaderTagId(string name);
            /*0x28c2a9c*/ int get_id();
            /*0x28c2aa4*/ void set_id(int value);
            /*0x28c2aac*/ string get_name();
            /*0x28c2ab8*/ bool Equals(object obj);
            /*0x28c2b30*/ bool Equals(UnityEngine.Rendering.ShaderTagId other);
            /*0x28c2b40*/ int GetHashCode();
        }

        enum ReflectionProbeSortingCriteria
        {
            None = 0,
            Importance = 1,
            Size = 2,
            ImportanceThenSize = 3,
        }

        class RenderPipelineAsset : UnityEngine.ScriptableObject
        {
            /*0x28c2d40*/ RenderPipelineAsset();
            /*0x28c1998*/ UnityEngine.Rendering.RenderPipeline InternalCreatePipeline();
            /*0x28c2b98*/ string[] get_renderingLayerMaskNames();
            /*0x28c2ba0*/ string[] get_prefixedRenderingLayerMaskNames();
            /*0x28c2ba8*/ UnityEngine.Material get_defaultMaterial();
            /*0x28c2bb0*/ UnityEngine.Shader get_autodeskInteractiveShader();
            /*0x28c2bb8*/ UnityEngine.Shader get_autodeskInteractiveTransparentShader();
            /*0x28c2bc0*/ UnityEngine.Shader get_autodeskInteractiveMaskedShader();
            /*0x28c2bc8*/ UnityEngine.Shader get_terrainDetailLitShader();
            /*0x28c2bd0*/ UnityEngine.Shader get_terrainDetailGrassShader();
            /*0x28c2bd8*/ UnityEngine.Shader get_terrainDetailGrassBillboardShader();
            /*0x28c2be0*/ UnityEngine.Material get_defaultParticleMaterial();
            /*0x28c2be8*/ UnityEngine.Material get_defaultLineMaterial();
            /*0x28c2bf0*/ UnityEngine.Material get_defaultTerrainMaterial();
            /*0x28c2bf8*/ UnityEngine.Material get_defaultUIMaterial();
            /*0x28c2c00*/ UnityEngine.Material get_defaultUIOverdrawMaterial();
            /*0x28c2c08*/ UnityEngine.Material get_defaultUIETC1SupportedMaterial();
            /*0x28c2c10*/ UnityEngine.Material get_default2DMaterial();
            /*0x28c2c18*/ UnityEngine.Material get_default2DMaskMaterial();
            /*0x28c2c20*/ UnityEngine.Shader get_defaultShader();
            /*0x28c2c28*/ UnityEngine.Shader get_defaultSpeedTree7Shader();
            /*0x28c2c30*/ UnityEngine.Shader get_defaultSpeedTree8Shader();
            UnityEngine.Rendering.RenderPipeline CreatePipeline();
            /*0x28c2c38*/ void OnValidate();
            /*0x28c2cf4*/ void OnDisable();
        }

        struct RasterState : System.IEquatable<UnityEngine.Rendering.RasterState>
        {
            static /*0x0*/ UnityEngine.Rendering.RasterState defaultValue;
            /*0x10*/ UnityEngine.Rendering.CullMode m_CullingMode;
            /*0x14*/ int m_OffsetUnits;
            /*0x18*/ float m_OffsetFactor;
            /*0x1c*/ byte m_DepthClip;
            /*0x1d*/ byte m_Conservative;
            /*0x1e*/ byte m_Padding1;
            /*0x1f*/ byte m_Padding2;

            static /*0x28c3154*/ RasterState();
            static /*0x28c30f8*/ bool op_Equality(UnityEngine.Rendering.RasterState left, UnityEngine.Rendering.RasterState right);
            static /*0x28c3124*/ bool op_Inequality(UnityEngine.Rendering.RasterState left, UnityEngine.Rendering.RasterState right);
            /*0x28c2d48*/ RasterState(UnityEngine.Rendering.CullMode cullingMode, int offsetUnits, float offsetFactor, bool depthClip);
            /*0x28c2dec*/ UnityEngine.Rendering.CullMode get_cullingMode();
            /*0x28c2df4*/ void set_cullingMode(UnityEngine.Rendering.CullMode value);
            /*0x28c2dfc*/ bool get_depthClip();
            /*0x28c2e58*/ void set_depthClip(bool value);
            /*0x28c2ec4*/ bool get_conservative();
            /*0x28c2f20*/ void set_conservative(bool value);
            /*0x28c2f8c*/ int get_offsetUnits();
            /*0x28c2f94*/ void set_offsetUnits(int value);
            /*0x28c2f9c*/ float get_offsetFactor();
            /*0x28c2fa4*/ void set_offsetFactor(float value);
            /*0x28c2fac*/ bool Equals(UnityEngine.Rendering.RasterState other);
            /*0x28c3020*/ bool Equals(object obj);
            /*0x28c3098*/ int GetHashCode();
        }

        struct AttachmentDescriptor : System.IEquatable<UnityEngine.Rendering.AttachmentDescriptor>
        {
            /*0x10*/ UnityEngine.Rendering.RenderBufferLoadAction m_LoadAction;
            /*0x14*/ UnityEngine.Rendering.RenderBufferStoreAction m_StoreAction;
            /*0x18*/ UnityEngine.Experimental.Rendering.GraphicsFormat m_Format;
            /*0x20*/ UnityEngine.Rendering.RenderTargetIdentifier m_LoadStoreTarget;
            /*0x48*/ UnityEngine.Rendering.RenderTargetIdentifier m_ResolveTarget;
            /*0x70*/ UnityEngine.Color m_ClearColor;
            /*0x80*/ float m_ClearDepth;
            /*0x84*/ uint m_ClearStencil;

            static /*0x28c3864*/ bool op_Equality(UnityEngine.Rendering.AttachmentDescriptor left, UnityEngine.Rendering.AttachmentDescriptor right);
            static /*0x28c3898*/ bool op_Inequality(UnityEngine.Rendering.AttachmentDescriptor left, UnityEngine.Rendering.AttachmentDescriptor right);
            /*0x28c33e0*/ AttachmentDescriptor(UnityEngine.Experimental.Rendering.GraphicsFormat format);
            /*0x28c3498*/ AttachmentDescriptor(UnityEngine.RenderTextureFormat format);
            /*0x28c350c*/ AttachmentDescriptor(UnityEngine.RenderTextureFormat format, UnityEngine.Rendering.RenderTargetIdentifier target, bool loadExistingContents, bool storeResults, bool resolve);
            /*0x28c31c4*/ UnityEngine.Rendering.RenderBufferLoadAction get_loadAction();
            /*0x28c31cc*/ void set_loadAction(UnityEngine.Rendering.RenderBufferLoadAction value);
            /*0x28c31d4*/ UnityEngine.Rendering.RenderBufferStoreAction get_storeAction();
            /*0x28c31dc*/ void set_storeAction(UnityEngine.Rendering.RenderBufferStoreAction value);
            /*0x28c31e4*/ UnityEngine.Experimental.Rendering.GraphicsFormat get_graphicsFormat();
            /*0x28c31ec*/ void set_graphicsFormat(UnityEngine.Experimental.Rendering.GraphicsFormat value);
            /*0x28c31f4*/ UnityEngine.RenderTextureFormat get_format();
            /*0x28c3250*/ void set_format(UnityEngine.RenderTextureFormat value);
            /*0x28c32c0*/ UnityEngine.Rendering.RenderTargetIdentifier get_loadStoreTarget();
            /*0x28c32d4*/ void set_loadStoreTarget(UnityEngine.Rendering.RenderTargetIdentifier value);
            /*0x28c32e8*/ UnityEngine.Rendering.RenderTargetIdentifier get_resolveTarget();
            /*0x28c3300*/ void set_resolveTarget(UnityEngine.Rendering.RenderTargetIdentifier value);
            /*0x28c3318*/ UnityEngine.Color get_clearColor();
            /*0x28c3324*/ void set_clearColor(UnityEngine.Color value);
            /*0x28c3330*/ float get_clearDepth();
            /*0x28c3338*/ void set_clearDepth(float value);
            /*0x28c3340*/ uint get_clearStencil();
            /*0x28c3348*/ void set_clearStencil(uint value);
            /*0x28c3350*/ void ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier target, bool loadExistingContents, bool storeResults);
            /*0x28c3394*/ void ConfigureResolveTarget(UnityEngine.Rendering.RenderTargetIdentifier target);
            /*0x28c33c4*/ void ConfigureClear(UnityEngine.Color clearColor, float clearDepth, uint clearStencil);
            /*0x28c3580*/ bool Equals(UnityEngine.Rendering.AttachmentDescriptor other);
            /*0x28c36e0*/ bool Equals(object obj);
            /*0x28c3770*/ int GetHashCode();
        }

        enum RenderStateMask
        {
            Nothing = 0,
            Blend = 1,
            Raster = 2,
            Depth = 4,
            Stencil = 8,
            Everything = 15,
        }

        struct SortingLayerRange : System.IEquatable<UnityEngine.Rendering.SortingLayerRange>
        {
            /*0x10*/ short m_LowerBound;
            /*0x12*/ short m_UpperBound;

            static /*0x28c38fc*/ UnityEngine.Rendering.SortingLayerRange get_all();
            static /*0x28c39ac*/ bool op_Inequality(UnityEngine.Rendering.SortingLayerRange lhs, UnityEngine.Rendering.SortingLayerRange rhs);
            static /*0x28c39bc*/ bool op_Equality(UnityEngine.Rendering.SortingLayerRange lhs, UnityEngine.Rendering.SortingLayerRange rhs);
            /*0x28c38d0*/ SortingLayerRange(short lowerBound, short upperBound);
            /*0x28c38dc*/ short get_lowerBound();
            /*0x28c38e4*/ void set_lowerBound(short value);
            /*0x28c38ec*/ short get_upperBound();
            /*0x28c38f4*/ void set_upperBound(short value);
            /*0x28c3904*/ bool Equals(UnityEngine.Rendering.SortingLayerRange other);
            /*0x28c3928*/ bool Equals(object obj);
            /*0x28c39cc*/ int GetHashCode();
        }

        struct ShadowDrawingSettings : System.IEquatable<UnityEngine.Rendering.ShadowDrawingSettings>
        {
            /*0x10*/ UnityEngine.Rendering.CullingResults m_CullingResults;
            /*0x20*/ int m_LightIndex;
            /*0x24*/ int m_UseRenderingLayerMaskTest;
            /*0x28*/ UnityEngine.Rendering.ShadowSplitData m_SplitData;
            /*0xe4*/ UnityEngine.ShadowObjectsFilter m_ObjectsFilter;

            static /*0x28c4040*/ bool op_Equality(UnityEngine.Rendering.ShadowDrawingSettings left, UnityEngine.Rendering.ShadowDrawingSettings right);
            static /*0x28c409c*/ bool op_Inequality(UnityEngine.Rendering.ShadowDrawingSettings left, UnityEngine.Rendering.ShadowDrawingSettings right);
            /*0x28c3a58*/ ShadowDrawingSettings(UnityEngine.Rendering.CullingResults cullingResults, int lightIndex);
            /*0x28c39d4*/ UnityEngine.Rendering.CullingResults get_cullingResults();
            /*0x28c39e0*/ void set_cullingResults(UnityEngine.Rendering.CullingResults value);
            /*0x28c39e8*/ int get_lightIndex();
            /*0x28c39f0*/ void set_lightIndex(int value);
            /*0x28c39f8*/ bool get_useRenderingLayerMaskTest();
            /*0x28c3a08*/ void set_useRenderingLayerMaskTest(bool value);
            /*0x28c3a14*/ UnityEngine.Rendering.ShadowSplitData get_splitData();
            /*0x28c3a30*/ void set_splitData(UnityEngine.Rendering.ShadowSplitData value);
            /*0x28c3a48*/ UnityEngine.ShadowObjectsFilter get_objectsFilter();
            /*0x28c3a50*/ void set_objectsFilter(UnityEngine.ShadowObjectsFilter value);
            /*0x28c3b88*/ bool Equals(UnityEngine.Rendering.ShadowDrawingSettings other);
            /*0x28c3e84*/ bool Equals(object obj);
            /*0x28c3f3c*/ int GetHashCode();
        }

        enum GizmoSubset
        {
            PreImageEffects = 0,
            PostImageEffects = 1,
        }

        class RenderPipeline
        {
            /*0x10*/ bool <disposed>k__BackingField;

            static /*0x28c4100*/ void BeginFrameRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera[] cameras);
            static /*0x28c41b0*/ void BeginContextRendering(UnityEngine.Rendering.ScriptableRenderContext context, System.Collections.Generic.List<UnityEngine.Camera> cameras);
            static /*0x28c4218*/ void BeginCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera);
            static /*0x28c4280*/ void EndContextRendering(UnityEngine.Rendering.ScriptableRenderContext context, System.Collections.Generic.List<UnityEngine.Camera> cameras);
            static /*0x28c42e8*/ void EndFrameRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera[] cameras);
            static /*0x28c4398*/ void EndCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera);
            /*0x28c4698*/ RenderPipeline();
            void Render(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera[] cameras);
            /*0x28c40fc*/ void ProcessRenderRequests(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera, System.Collections.Generic.List<UnityEngine.Camera.RenderRequest> renderRequests);
            /*0x28c4400*/ void Render(UnityEngine.Rendering.ScriptableRenderContext context, System.Collections.Generic.List<UnityEngine.Camera> cameras);
            /*0x28c4478*/ void InternalRender(UnityEngine.Rendering.ScriptableRenderContext context, System.Collections.Generic.List<UnityEngine.Camera> cameras);
            /*0x28c4500*/ void InternalRenderWithRequests(UnityEngine.Rendering.ScriptableRenderContext context, System.Collections.Generic.List<UnityEngine.Camera> cameras, System.Collections.Generic.List<UnityEngine.Camera.RenderRequest> renderRequests);
            /*0x28c4600*/ bool get_disposed();
            /*0x28c4608*/ void set_disposed(bool value);
            /*0x28c4614*/ void Dispose();
            /*0x28c468c*/ void Dispose(bool disposing);
            /*0x28c4690*/ UnityEngine.Rendering.RenderPipelineGlobalSettings get_defaultSettings();
        }

        struct RenderQueueRange : System.IEquatable<UnityEngine.Rendering.RenderQueueRange>
        {
            static int k_MinimumBound = 0;
            static int k_MaximumBound = 5000;
            static /*0x0*/ int minimumBound;
            static /*0x4*/ int maximumBound;
            /*0x10*/ int m_LowerBound;
            /*0x14*/ int m_UpperBound;

            static /*0x28c4ae4*/ RenderQueueRange();
            static /*0x28c4834*/ UnityEngine.Rendering.RenderQueueRange get_all();
            static /*0x28c483c*/ UnityEngine.Rendering.RenderQueueRange get_opaque();
            static /*0x28c4844*/ UnityEngine.Rendering.RenderQueueRange get_transparent();
            static /*0x28c4aa4*/ bool op_Equality(UnityEngine.Rendering.RenderQueueRange left, UnityEngine.Rendering.RenderQueueRange right);
            static /*0x28c4ac4*/ bool op_Inequality(UnityEngine.Rendering.RenderQueueRange left, UnityEngine.Rendering.RenderQueueRange right);
            /*0x28c46a0*/ RenderQueueRange(int lowerBound, int upperBound);
            /*0x28c4850*/ int get_lowerBound();
            /*0x28c4858*/ void set_lowerBound(int value);
            /*0x28c4918*/ int get_upperBound();
            /*0x28c4920*/ void set_upperBound(int value);
            /*0x28c49e0*/ bool Equals(UnityEngine.Rendering.RenderQueueRange other);
            /*0x28c4a08*/ bool Equals(object obj);
            /*0x28c4a90*/ int GetHashCode();
        }

        enum DistanceMetric
        {
            Perspective = 0,
            Orthographic = 1,
            CustomAxis = 2,
        }

        struct SortingSettings : System.IEquatable<UnityEngine.Rendering.SortingSettings>
        {
            /*0x10*/ UnityEngine.Matrix4x4 m_WorldToCameraMatrix;
            /*0x50*/ UnityEngine.Vector3 m_CameraPosition;
            /*0x5c*/ UnityEngine.Vector3 m_CustomAxis;
            /*0x68*/ UnityEngine.Rendering.SortingCriteria m_Criteria;
            /*0x6c*/ UnityEngine.Rendering.DistanceMetric m_DistanceMetric;
            /*0x70*/ UnityEngine.Matrix4x4 m_PreviousVPMatrix;
            /*0xb0*/ UnityEngine.Matrix4x4 m_NonJitteredVPMatrix;

            static /*0x28c57dc*/ bool op_Equality(UnityEngine.Rendering.SortingSettings left, UnityEngine.Rendering.SortingSettings right);
            static /*0x28c5810*/ bool op_Inequality(UnityEngine.Rendering.SortingSettings left, UnityEngine.Rendering.SortingSettings right);
            /*0x28c4b34*/ SortingSettings(UnityEngine.Camera camera);
            /*0x28c4c04*/ UnityEngine.Matrix4x4 get_worldToCameraMatrix();
            /*0x28c4c18*/ void set_worldToCameraMatrix(UnityEngine.Matrix4x4 value);
            /*0x28c4c2c*/ UnityEngine.Vector3 get_cameraPosition();
            /*0x28c4c38*/ void set_cameraPosition(UnityEngine.Vector3 value);
            /*0x28c4c44*/ UnityEngine.Vector3 get_customAxis();
            /*0x28c4c50*/ void set_customAxis(UnityEngine.Vector3 value);
            /*0x28c4bfc*/ UnityEngine.Rendering.SortingCriteria get_criteria();
            /*0x28c4c5c*/ void set_criteria(UnityEngine.Rendering.SortingCriteria value);
            /*0x28c4c64*/ UnityEngine.Rendering.DistanceMetric get_distanceMetric();
            /*0x28c4c6c*/ void set_distanceMetric(UnityEngine.Rendering.DistanceMetric value);
            /*0x28c4c74*/ bool Equals(UnityEngine.Rendering.SortingSettings other);
            /*0x28c517c*/ bool Equals(object obj);
            /*0x28c5214*/ int GetHashCode();
        }

        struct BlendState : System.IEquatable<UnityEngine.Rendering.BlendState>
        {
            /*0x10*/ UnityEngine.Rendering.RenderTargetBlendState m_BlendState0;
            /*0x18*/ UnityEngine.Rendering.RenderTargetBlendState m_BlendState1;
            /*0x20*/ UnityEngine.Rendering.RenderTargetBlendState m_BlendState2;
            /*0x28*/ UnityEngine.Rendering.RenderTargetBlendState m_BlendState3;
            /*0x30*/ UnityEngine.Rendering.RenderTargetBlendState m_BlendState4;
            /*0x38*/ UnityEngine.Rendering.RenderTargetBlendState m_BlendState5;
            /*0x40*/ UnityEngine.Rendering.RenderTargetBlendState m_BlendState6;
            /*0x48*/ UnityEngine.Rendering.RenderTargetBlendState m_BlendState7;
            /*0x50*/ byte m_SeparateMRTBlendStates;
            /*0x51*/ byte m_AlphaToMask;
            /*0x52*/ short m_Padding;

            static /*0x28c5848*/ UnityEngine.Rendering.BlendState get_defaultValue();
            static /*0x28c5dec*/ bool op_Equality(UnityEngine.Rendering.BlendState left, UnityEngine.Rendering.BlendState right);
            static /*0x28c5e20*/ bool op_Inequality(UnityEngine.Rendering.BlendState left, UnityEngine.Rendering.BlendState right);
            /*0x28c58ac*/ BlendState(bool separateMRTBlend, bool alphaToMask);
            /*0x28c5990*/ bool get_separateMRTBlendStates();
            /*0x28c59ec*/ void set_separateMRTBlendStates(bool value);
            /*0x28c5a58*/ bool get_alphaToMask();
            /*0x28c5ab4*/ void set_alphaToMask(bool value);
            /*0x28c5b20*/ UnityEngine.Rendering.RenderTargetBlendState get_blendState0();
            /*0x28c5b28*/ void set_blendState0(UnityEngine.Rendering.RenderTargetBlendState value);
            /*0x28c5b30*/ UnityEngine.Rendering.RenderTargetBlendState get_blendState1();
            /*0x28c5b38*/ void set_blendState1(UnityEngine.Rendering.RenderTargetBlendState value);
            /*0x28c5b40*/ UnityEngine.Rendering.RenderTargetBlendState get_blendState2();
            /*0x28c5b48*/ void set_blendState2(UnityEngine.Rendering.RenderTargetBlendState value);
            /*0x28c5b50*/ UnityEngine.Rendering.RenderTargetBlendState get_blendState3();
            /*0x28c5b58*/ void set_blendState3(UnityEngine.Rendering.RenderTargetBlendState value);
            /*0x28c5b60*/ UnityEngine.Rendering.RenderTargetBlendState get_blendState4();
            /*0x28c5b68*/ void set_blendState4(UnityEngine.Rendering.RenderTargetBlendState value);
            /*0x28c5b70*/ UnityEngine.Rendering.RenderTargetBlendState get_blendState5();
            /*0x28c5b78*/ void set_blendState5(UnityEngine.Rendering.RenderTargetBlendState value);
            /*0x28c5b80*/ UnityEngine.Rendering.RenderTargetBlendState get_blendState6();
            /*0x28c5b88*/ void set_blendState6(UnityEngine.Rendering.RenderTargetBlendState value);
            /*0x28c5b90*/ UnityEngine.Rendering.RenderTargetBlendState get_blendState7();
            /*0x28c5b98*/ void set_blendState7(UnityEngine.Rendering.RenderTargetBlendState value);
            /*0x28c5ba0*/ bool Equals(UnityEngine.Rendering.BlendState other);
            /*0x28c5c80*/ bool Equals(object obj);
            /*0x28c5d10*/ int GetHashCode();
        }

        struct VisibleReflectionProbe : System.IEquatable<UnityEngine.Rendering.VisibleReflectionProbe>
        {
            /*0x10*/ UnityEngine.Bounds m_Bounds;
            /*0x28*/ UnityEngine.Matrix4x4 m_LocalToWorldMatrix;
            /*0x68*/ UnityEngine.Vector4 m_HdrData;
            /*0x78*/ UnityEngine.Vector3 m_Center;
            /*0x84*/ float m_BlendDistance;
            /*0x88*/ int m_Importance;
            /*0x8c*/ int m_BoxProjection;
            /*0x90*/ int m_InstanceId;
            /*0x94*/ int m_TextureId;

            static /*0x28c66f8*/ bool op_Equality(UnityEngine.Rendering.VisibleReflectionProbe left, UnityEngine.Rendering.VisibleReflectionProbe right);
            static /*0x28c672c*/ bool op_Inequality(UnityEngine.Rendering.VisibleReflectionProbe left, UnityEngine.Rendering.VisibleReflectionProbe right);
            /*0x28c5e58*/ UnityEngine.Texture get_texture();
            /*0x28c5f00*/ UnityEngine.ReflectionProbe get_reflectionProbe();
            /*0x28c5f8c*/ UnityEngine.Bounds get_bounds();
            /*0x28c5fa0*/ void set_bounds(UnityEngine.Bounds value);
            /*0x28c5fb4*/ UnityEngine.Matrix4x4 get_localToWorldMatrix();
            /*0x28c5fd0*/ void set_localToWorldMatrix(UnityEngine.Matrix4x4 value);
            /*0x28c5fec*/ UnityEngine.Vector4 get_hdrData();
            /*0x28c5ff8*/ void set_hdrData(UnityEngine.Vector4 value);
            /*0x28c6004*/ UnityEngine.Vector3 get_center();
            /*0x28c6010*/ void set_center(UnityEngine.Vector3 value);
            /*0x28c601c*/ float get_blendDistance();
            /*0x28c6024*/ void set_blendDistance(float value);
            /*0x28c602c*/ int get_importance();
            /*0x28c6034*/ void set_importance(int value);
            /*0x28c603c*/ bool get_isBoxProjection();
            /*0x28c6098*/ void set_isBoxProjection(bool value);
            /*0x28c6104*/ bool Equals(UnityEngine.Rendering.VisibleReflectionProbe other);
            /*0x28c6398*/ bool Equals(object obj);
            /*0x28c6428*/ int GetHashCode();
        }

        struct StencilState : System.IEquatable<UnityEngine.Rendering.StencilState>
        {
            /*0x10*/ byte m_Enabled;
            /*0x11*/ byte m_ReadMask;
            /*0x12*/ byte m_WriteMask;
            /*0x13*/ byte m_Padding;
            /*0x14*/ byte m_CompareFunctionFront;
            /*0x15*/ byte m_PassOperationFront;
            /*0x16*/ byte m_FailOperationFront;
            /*0x17*/ byte m_ZFailOperationFront;
            /*0x18*/ byte m_CompareFunctionBack;
            /*0x19*/ byte m_PassOperationBack;
            /*0x1a*/ byte m_FailOperationBack;
            /*0x1b*/ byte m_ZFailOperationBack;

            static /*0x28c6764*/ UnityEngine.Rendering.StencilState get_defaultValue();
            static /*0x28c6c84*/ bool op_Equality(UnityEngine.Rendering.StencilState left, UnityEngine.Rendering.StencilState right);
            static /*0x28c6cb8*/ bool op_Inequality(UnityEngine.Rendering.StencilState left, UnityEngine.Rendering.StencilState right);
            /*0x28c67c0*/ StencilState(bool enabled, byte readMask, byte writeMask, UnityEngine.Rendering.CompareFunction compareFunction, UnityEngine.Rendering.StencilOp passOperation, UnityEngine.Rendering.StencilOp failOperation, UnityEngine.Rendering.StencilOp zFailOperation);
            /*0x28c67ec*/ StencilState(bool enabled, byte readMask, byte writeMask, UnityEngine.Rendering.CompareFunction compareFunctionFront, UnityEngine.Rendering.StencilOp passOperationFront, UnityEngine.Rendering.StencilOp failOperationFront, UnityEngine.Rendering.StencilOp zFailOperationFront, UnityEngine.Rendering.CompareFunction compareFunctionBack, UnityEngine.Rendering.StencilOp passOperationBack, UnityEngine.Rendering.StencilOp failOperationBack, UnityEngine.Rendering.StencilOp zFailOperationBack);
            /*0x28c68d0*/ bool get_enabled();
            /*0x28c692c*/ void set_enabled(bool value);
            /*0x28c6998*/ byte get_readMask();
            /*0x28c69a0*/ void set_readMask(byte value);
            /*0x28c69a8*/ byte get_writeMask();
            /*0x28c69b0*/ void set_writeMask(byte value);
            /*0x28c69b8*/ void SetCompareFunction(UnityEngine.Rendering.CompareFunction value);
            /*0x28c69d4*/ void SetPassOperation(UnityEngine.Rendering.StencilOp value);
            /*0x28c69f0*/ void SetFailOperation(UnityEngine.Rendering.StencilOp value);
            /*0x28c6a0c*/ void SetZFailOperation(UnityEngine.Rendering.StencilOp value);
            /*0x28c6a28*/ UnityEngine.Rendering.CompareFunction get_compareFunctionFront();
            /*0x28c69c4*/ void set_compareFunctionFront(UnityEngine.Rendering.CompareFunction value);
            /*0x28c6a30*/ UnityEngine.Rendering.StencilOp get_passOperationFront();
            /*0x28c69e0*/ void set_passOperationFront(UnityEngine.Rendering.StencilOp value);
            /*0x28c6a38*/ UnityEngine.Rendering.StencilOp get_failOperationFront();
            /*0x28c69fc*/ void set_failOperationFront(UnityEngine.Rendering.StencilOp value);
            /*0x28c6a40*/ UnityEngine.Rendering.StencilOp get_zFailOperationFront();
            /*0x28c6a18*/ void set_zFailOperationFront(UnityEngine.Rendering.StencilOp value);
            /*0x28c6a48*/ UnityEngine.Rendering.CompareFunction get_compareFunctionBack();
            /*0x28c69cc*/ void set_compareFunctionBack(UnityEngine.Rendering.CompareFunction value);
            /*0x28c6a50*/ UnityEngine.Rendering.StencilOp get_passOperationBack();
            /*0x28c69e8*/ void set_passOperationBack(UnityEngine.Rendering.StencilOp value);
            /*0x28c6a58*/ UnityEngine.Rendering.StencilOp get_failOperationBack();
            /*0x28c6a04*/ void set_failOperationBack(UnityEngine.Rendering.StencilOp value);
            /*0x28c6a60*/ UnityEngine.Rendering.StencilOp get_zFailOperationBack();
            /*0x28c6a20*/ void set_zFailOperationBack(UnityEngine.Rendering.StencilOp value);
            /*0x28c6a68*/ bool Equals(UnityEngine.Rendering.StencilState other);
            /*0x28c6b18*/ bool Equals(object obj);
            /*0x28c6b94*/ int GetHashCode();
        }

        struct ShadowSplitData : System.IEquatable<UnityEngine.Rendering.ShadowSplitData>
        {
            static int k_MaximumCullingPlaneCount = 10;
            static /*0x0*/ int maximumCullingPlaneCount;
            /*0x10*/ int m_CullingPlaneCount;
            /*0x14*/ UnityEngine.Rendering.ShadowSplitData.<m_CullingPlanes> m_CullingPlanes;
            /*0xb4*/ UnityEngine.Vector4 m_CullingSphere;
            /*0xc4*/ float m_ShadowCascadeBlendCullingFactor;
            /*0xc8*/ float m_CullingNearPlane;

            static /*0x28c7198*/ ShadowSplitData();
            static /*0x28c70dc*/ bool op_Equality(UnityEngine.Rendering.ShadowSplitData left, UnityEngine.Rendering.ShadowSplitData right);
            static /*0x28c7138*/ bool op_Inequality(UnityEngine.Rendering.ShadowSplitData left, UnityEngine.Rendering.ShadowSplitData right);
            /*0x28c6cf0*/ int get_cullingPlaneCount();
            /*0x28c6cf8*/ void set_cullingPlaneCount(int value);
            /*0x28c6de4*/ UnityEngine.Vector4 get_cullingSphere();
            /*0x28c6df0*/ void set_cullingSphere(UnityEngine.Vector4 value);
            /*0x28c6dfc*/ float get_shadowCascadeBlendCullingFactor();
            /*0x28c3a8c*/ void set_shadowCascadeBlendCullingFactor(float value);
            /*0x28c6e04*/ UnityEngine.Plane GetCullingPlane(int index);
            /*0x28c6f14*/ void SetCullingPlane(int index, UnityEngine.Plane plane);
            /*0x28c3d48*/ bool Equals(UnityEngine.Rendering.ShadowSplitData other);
            /*0x28c7024*/ bool Equals(object obj);
            /*0x28c3fc4*/ int GetHashCode();

            struct <m_CullingPlanes>e__FixedBuffer
            {
                /*0x10*/ byte FixedElementField;
            }
        }

        struct CullingAllocationInfo
        {
            /*0x10*/ UnityEngine.Rendering.VisibleLight* visibleLightsPtr;
            /*0x18*/ UnityEngine.Rendering.VisibleLight* visibleOffscreenVertexLightsPtr;
            /*0x20*/ UnityEngine.Rendering.VisibleReflectionProbe* visibleReflectionProbesPtr;
            /*0x28*/ int visibleLightCount;
            /*0x2c*/ int visibleOffscreenVertexLightCount;
            /*0x30*/ int visibleReflectionProbeCount;
        }

        struct CullingResults : System.IEquatable<UnityEngine.Rendering.CullingResults>
        {
            /*0x10*/ nint ptr;
            /*0x18*/ UnityEngine.Rendering.CullingAllocationInfo* m_AllocationInfo;

            static /*0x28c7e4c*/ bool op_Equality(UnityEngine.Rendering.CullingResults left, UnityEngine.Rendering.CullingResults right);
            static /*0x28c7e78*/ bool op_Inequality(UnityEngine.Rendering.CullingResults left, UnityEngine.Rendering.CullingResults right);
            static /*0x28c7334*/ int GetLightIndexCount(nint cullingResultsPtr);
            static /*0x28c73ac*/ int GetReflectionProbeIndexCount(nint cullingResultsPtr);
            static /*0x28c74a4*/ void FillLightAndReflectionProbeIndices(nint cullingResultsPtr, UnityEngine.ComputeBuffer computeBuffer);
            static /*0x28c752c*/ void FillLightAndReflectionProbeIndicesGraphicsBuffer(nint cullingResultsPtr, UnityEngine.GraphicsBuffer buffer);
            static /*0x28c767c*/ int GetLightIndexMapSize(nint cullingResultsPtr);
            static /*0x28c7908*/ int GetReflectionProbeIndexMapSize(nint cullingResultsPtr);
            static /*0x28c76b8*/ void FillLightIndexMap(nint cullingResultsPtr, nint indexMapPtr, int indexMapSize);
            static /*0x28c7944*/ void FillReflectionProbeIndexMap(nint cullingResultsPtr, nint indexMapPtr, int indexMapSize);
            static /*0x28c77a8*/ void SetLightIndexMap(nint cullingResultsPtr, nint indexMapPtr, int indexMapSize);
            static /*0x28c7a34*/ void SetReflectionProbeIndexMap(nint cullingResultsPtr, nint indexMapPtr, int indexMapSize);
            static /*0x28c7adc*/ bool GetShadowCasterBounds(nint cullingResultsPtr, int lightIndex, ref UnityEngine.Bounds bounds);
            static /*0x28c7b9c*/ bool ComputeSpotShadowMatricesAndCullingPrimitives(nint cullingResultsPtr, int activeLightIndex, ref UnityEngine.Matrix4x4 viewMatrix, ref UnityEngine.Matrix4x4 projMatrix, ref UnityEngine.Rendering.ShadowSplitData shadowSplitData);
            static /*0x28c7c8c*/ bool ComputePointShadowMatricesAndCullingPrimitives(nint cullingResultsPtr, int activeLightIndex, UnityEngine.CubemapFace cubemapFace, float fovBias, ref UnityEngine.Matrix4x4 viewMatrix, ref UnityEngine.Matrix4x4 projMatrix, ref UnityEngine.Rendering.ShadowSplitData shadowSplitData);
            static /*0x28c7d18*/ bool ComputeDirectionalShadowMatricesAndCullingPrimitives(nint cullingResultsPtr, int activeLightIndex, int splitIndex, int splitCount, UnityEngine.Vector3 splitRatio, int shadowResolution, float shadowNearPlaneOffset, ref UnityEngine.Matrix4x4 viewMatrix, ref UnityEngine.Matrix4x4 projMatrix, ref UnityEngine.Rendering.ShadowSplitData shadowSplitData);
            static /*0x28c7ea8*/ bool ComputeDirectionalShadowMatricesAndCullingPrimitives_Injected(nint cullingResultsPtr, int activeLightIndex, int splitIndex, int splitCount, ref UnityEngine.Vector3 splitRatio, int shadowResolution, float shadowNearPlaneOffset, ref UnityEngine.Matrix4x4 viewMatrix, ref UnityEngine.Matrix4x4 projMatrix, ref UnityEngine.Rendering.ShadowSplitData shadowSplitData);
            /*0x28c71e4*/ Unity.Collections.NativeArray<UnityEngine.Rendering.VisibleLight> get_visibleLights();
            /*0x28c7240*/ Unity.Collections.NativeArray<UnityEngine.Rendering.VisibleLight> get_visibleOffscreenVertexLights();
            /*0x28c729c*/ Unity.Collections.NativeArray<UnityEngine.Rendering.VisibleReflectionProbe> get_visibleReflectionProbes();
            Unity.Collections.NativeArray<T> GetNativeArray<T>(void* dataPointer, int length);
            /*0x28c72f8*/ int get_lightIndexCount();
            /*0x28c7370*/ int get_reflectionProbeIndexCount();
            /*0x28c73e8*/ int get_lightAndReflectionProbeIndexCount();
            /*0x28c7460*/ void FillLightAndReflectionProbeIndices(UnityEngine.ComputeBuffer computeBuffer);
            /*0x28c74e8*/ void FillLightAndReflectionProbeIndices(UnityEngine.GraphicsBuffer buffer);
            /*0x28c7570*/ Unity.Collections.NativeArray<int> GetLightIndexMap(Unity.Collections.Allocator allocator);
            /*0x28c770c*/ void SetLightIndexMap(Unity.Collections.NativeArray<int> lightIndexMap);
            /*0x28c77fc*/ Unity.Collections.NativeArray<int> GetReflectionProbeIndexMap(Unity.Collections.Allocator allocator);
            /*0x28c7998*/ void SetReflectionProbeIndexMap(Unity.Collections.NativeArray<int> lightIndexMap);
            /*0x28c7a88*/ bool GetShadowCasterBounds(int lightIndex, ref UnityEngine.Bounds outBounds);
            /*0x28c7b30*/ bool ComputeSpotShadowMatricesAndCullingPrimitives(int activeLightIndex, ref UnityEngine.Matrix4x4 viewMatrix, ref UnityEngine.Matrix4x4 projMatrix, ref UnityEngine.Rendering.ShadowSplitData shadowSplitData);
            /*0x28c7c08*/ bool ComputePointShadowMatricesAndCullingPrimitives(int activeLightIndex, UnityEngine.CubemapFace cubemapFace, float fovBias, ref UnityEngine.Matrix4x4 viewMatrix, ref UnityEngine.Matrix4x4 projMatrix, ref UnityEngine.Rendering.ShadowSplitData shadowSplitData);
            /*0x28c7d10*/ bool ComputeDirectionalShadowMatricesAndCullingPrimitives(int activeLightIndex, int splitIndex, int splitCount, UnityEngine.Vector3 splitRatio, int shadowResolution, float shadowNearPlaneOffset, ref UnityEngine.Matrix4x4 viewMatrix, ref UnityEngine.Matrix4x4 projMatrix, ref UnityEngine.Rendering.ShadowSplitData shadowSplitData);
            /*0x28c7dd0*/ void Validate();
            /*0x28c3cb8*/ bool Equals(UnityEngine.Rendering.CullingResults other);
            /*0x28c7dd4*/ bool Equals(object obj);
            /*0x28c3f9c*/ int GetHashCode();
        }

        enum SortingCriteria
        {
            None = 0,
            SortingLayer = 1,
            RenderQueue = 2,
            BackToFront = 4,
            QuantizedFrontToBack = 8,
            OptimizeStateChanges = 16,
            CanvasOrder = 32,
            RendererPriority = 64,
            CommonOpaque = 59,
            CommonTransparent = 23,
        }

        class RenderPipelineGlobalSettings : UnityEngine.ScriptableObject
        {
            /*0x28c7f54*/ RenderPipelineGlobalSettings();
        }

        enum DrawRendererFlags
        {
            None = 0,
            EnableDynamicBatching = 1,
            EnableInstancing = 2,
        }

        enum VisibleLightFlags
        {
            IntersectsNearPlane = 1,
            IntersectsFarPlane = 2,
        }

        enum PerObjectData
        {
            None = 0,
            LightProbe = 1,
            ReflectionProbes = 2,
            LightProbeProxyVolume = 4,
            Lightmaps = 8,
            LightData = 16,
            MotionVectors = 32,
            LightIndices = 64,
            ReflectionProbeData = 128,
            OcclusionProbe = 256,
            OcclusionProbeProxyVolume = 512,
            ShadowMask = 1024,
        }

        struct FilteringSettings : System.IEquatable<UnityEngine.Rendering.FilteringSettings>
        {
            /*0x10*/ UnityEngine.Rendering.RenderQueueRange m_RenderQueueRange;
            /*0x18*/ int m_LayerMask;
            /*0x1c*/ uint m_RenderingLayerMask;
            /*0x20*/ int m_ExcludeMotionVectorObjects;
            /*0x24*/ UnityEngine.Rendering.SortingLayerRange m_SortingLayerRange;

            static /*0x28c7f5c*/ UnityEngine.Rendering.FilteringSettings get_defaultValue();
            static /*0x28c8274*/ bool op_Equality(UnityEngine.Rendering.FilteringSettings left, UnityEngine.Rendering.FilteringSettings right);
            static /*0x28c82d0*/ bool op_Inequality(UnityEngine.Rendering.FilteringSettings left, UnityEngine.Rendering.FilteringSettings right);
            /*0x28c8004*/ FilteringSettings(System.Nullable<UnityEngine.Rendering.RenderQueueRange> renderQueueRange, int layerMask, uint renderingLayerMask, int excludeMotionVectorObjects);
            /*0x28c80cc*/ UnityEngine.Rendering.RenderQueueRange get_renderQueueRange();
            /*0x28c80d4*/ void set_renderQueueRange(UnityEngine.Rendering.RenderQueueRange value);
            /*0x28c80dc*/ int get_layerMask();
            /*0x28c80e4*/ void set_layerMask(int value);
            /*0x28c80ec*/ uint get_renderingLayerMask();
            /*0x28c80f4*/ void set_renderingLayerMask(uint value);
            /*0x28c80fc*/ bool get_excludeMotionVectorObjects();
            /*0x28c810c*/ void set_excludeMotionVectorObjects(bool value);
            /*0x28c8118*/ UnityEngine.Rendering.SortingLayerRange get_sortingLayerRange();
            /*0x28c8120*/ void set_sortingLayerRange(UnityEngine.Rendering.SortingLayerRange value);
            /*0x28c8128*/ bool Equals(UnityEngine.Rendering.FilteringSettings other);
            /*0x28c8184*/ bool Equals(object obj);
            /*0x28c823c*/ int GetHashCode();
        }

        struct RenderStateBlock : System.IEquatable<UnityEngine.Rendering.RenderStateBlock>
        {
            /*0x10*/ UnityEngine.Rendering.BlendState m_BlendState;
            /*0x54*/ UnityEngine.Rendering.RasterState m_RasterState;
            /*0x64*/ UnityEngine.Rendering.DepthState m_DepthState;
            /*0x66*/ UnityEngine.Rendering.StencilState m_StencilState;
            /*0x74*/ int m_StencilReference;
            /*0x78*/ UnityEngine.Rendering.RenderStateMask m_Mask;

            static /*0x28c871c*/ bool op_Equality(UnityEngine.Rendering.RenderStateBlock left, UnityEngine.Rendering.RenderStateBlock right);
            static /*0x28c8750*/ bool op_Inequality(UnityEngine.Rendering.RenderStateBlock left, UnityEngine.Rendering.RenderStateBlock right);
            /*0x28c832c*/ RenderStateBlock(UnityEngine.Rendering.RenderStateMask mask);
            /*0x28c844c*/ UnityEngine.Rendering.BlendState get_blendState();
            /*0x28c8468*/ void set_blendState(UnityEngine.Rendering.BlendState value);
            /*0x28c847c*/ UnityEngine.Rendering.RasterState get_rasterState();
            /*0x28c848c*/ void set_rasterState(UnityEngine.Rendering.RasterState value);
            /*0x28c8498*/ UnityEngine.Rendering.DepthState get_depthState();
            /*0x28c84a0*/ void set_depthState(UnityEngine.Rendering.DepthState value);
            /*0x28c84a8*/ UnityEngine.Rendering.StencilState get_stencilState();
            /*0x28c84b8*/ void set_stencilState(UnityEngine.Rendering.StencilState value);
            /*0x28c84c4*/ int get_stencilReference();
            /*0x28c84cc*/ void set_stencilReference(int value);
            /*0x28c84d4*/ UnityEngine.Rendering.RenderStateMask get_mask();
            /*0x28c84dc*/ void set_mask(UnityEngine.Rendering.RenderStateMask value);
            /*0x28c84e4*/ bool Equals(UnityEngine.Rendering.RenderStateBlock other);
            /*0x28c85c0*/ bool Equals(object obj);
            /*0x28c8650*/ int GetHashCode();
        }

        struct DepthState : System.IEquatable<UnityEngine.Rendering.DepthState>
        {
            /*0x10*/ byte m_WriteEnabled;
            /*0x11*/ sbyte m_CompareFunction;

            static /*0x28c8428*/ UnityEngine.Rendering.DepthState get_defaultValue();
            static /*0x28c895c*/ bool op_Equality(UnityEngine.Rendering.DepthState left, UnityEngine.Rendering.DepthState right);
            static /*0x28c8980*/ bool op_Inequality(UnityEngine.Rendering.DepthState left, UnityEngine.Rendering.DepthState right);
            /*0x28c8788*/ DepthState(bool writeEnabled, UnityEngine.Rendering.CompareFunction compareFunction);
            /*0x28c87fc*/ bool get_writeEnabled();
            /*0x28c8858*/ void set_writeEnabled(bool value);
            /*0x28c88c4*/ UnityEngine.Rendering.CompareFunction get_compareFunction();
            /*0x28c88cc*/ void set_compareFunction(UnityEngine.Rendering.CompareFunction value);
            /*0x28c8598*/ bool Equals(UnityEngine.Rendering.DepthState other);
            /*0x28c88d4*/ bool Equals(object obj);
            /*0x28c86e0*/ int GetHashCode();
        }

        struct ScriptableRenderContext : System.IEquatable<UnityEngine.Rendering.ScriptableRenderContext>
        {
            static /*0x0*/ UnityEngine.Rendering.ShaderTagId kRenderTypeTag;
            /*0x10*/ nint m_Ptr;

            static /*0x28cb68c*/ ScriptableRenderContext();
            static /*0x28ca764*/ bool op_Equality(UnityEngine.Rendering.ScriptableRenderContext left, UnityEngine.Rendering.ScriptableRenderContext right);
            static /*0x28ca780*/ bool op_Inequality(UnityEngine.Rendering.ScriptableRenderContext left, UnityEngine.Rendering.ScriptableRenderContext right);
            static /*0x28c8aa8*/ void BeginRenderPass_Internal(nint self, int width, int height, int samples, nint colors, int colorCount, int depthAttachmentIndex);
            static /*0x28c8c78*/ void BeginSubPass_Internal(nint self, nint colors, int colorCount, nint inputs, int inputCount, bool isDepthReadOnly, bool isStencilReadOnly);
            static /*0x28c917c*/ void EndSubPass_Internal(nint self);
            static /*0x28c9230*/ void EndRenderPass_Internal(nint self);
            static /*0x28ca5e0*/ void Internal_Cull(ref UnityEngine.Rendering.ScriptableCullingParameters parameters, UnityEngine.Rendering.ScriptableRenderContext renderLoop, nint results);
            static /*0x28c4bb8*/ void InitializeSortSettings(UnityEngine.Camera camera, ref UnityEngine.Rendering.SortingSettings sortingSettings);
            static /*0x28cb1d8*/ void EmitGeometryForCamera(UnityEngine.Camera camera);
            static /*0x28cafd8*/ void Internal_Cull_Injected(ref UnityEngine.Rendering.ScriptableCullingParameters parameters, ref UnityEngine.Rendering.ScriptableRenderContext renderLoop, nint results);
            static /*0x28cb02c*/ void Submit_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self);
            static /*0x28cb068*/ bool SubmitForRenderPassValidation_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self);
            static /*0x28cb0a4*/ void GetCameras_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, System.Type listType, object resultList);
            static /*0x28cb0f8*/ void DrawRenderers_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, nint cullResults, ref UnityEngine.Rendering.DrawingSettings drawingSettings, ref UnityEngine.Rendering.FilteringSettings filteringSettings, ref UnityEngine.Rendering.ShaderTagId tagName, bool isPassTagName, nint tagValues, nint stateBlocks, int stateCount);
            static /*0x28cb194*/ void DrawShadows_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, nint shadowDrawingSettings);
            static /*0x28cb214*/ void ExecuteCommandBuffer_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, UnityEngine.Rendering.CommandBuffer commandBuffer);
            static /*0x28cb258*/ void ExecuteCommandBufferAsync_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, UnityEngine.Rendering.CommandBuffer commandBuffer, UnityEngine.Rendering.ComputeQueueType queueType);
            static /*0x28cb2ac*/ void SetupCameraProperties_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, UnityEngine.Camera camera, bool stereoSetup, int eye);
            static /*0x28cb308*/ void StereoEndRender_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, UnityEngine.Camera camera, int eye, bool isFinalPass);
            static /*0x28cb364*/ void StartMultiEye_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, UnityEngine.Camera camera, int eye);
            static /*0x28cb3b8*/ void StopMultiEye_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, UnityEngine.Camera camera);
            static /*0x28cb3fc*/ void DrawSkybox_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, UnityEngine.Camera camera);
            static /*0x28cb440*/ void InvokeOnRenderObjectCallback_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self);
            static /*0x28cb47c*/ void DrawGizmos_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, UnityEngine.Camera camera, UnityEngine.Rendering.GizmoSubset gizmoSubset);
            static /*0x28cb4d0*/ void DrawWireOverlay_Impl_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, UnityEngine.Camera camera);
            static /*0x28cb514*/ void DrawUIOverlay_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, UnityEngine.Camera camera);
            static /*0x28cb560*/ void CreateRendererList_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, nint cullResults, ref UnityEngine.Rendering.DrawingSettings drawingSettings, ref UnityEngine.Rendering.FilteringSettings filteringSettings, ref UnityEngine.Rendering.ShaderTagId tagName, bool isPassTagName, nint tagValues, nint stateBlocks, int stateCount, ref UnityEngine.Rendering.RendererUtils.RendererList ret);
            static /*0x28cb604*/ void PrepareRendererListsAsync_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, object rendererLists);
            static /*0x28cb648*/ UnityEngine.Rendering.RendererUtils.RendererListStatus QueryRendererListStatus_Internal_Injected(ref UnityEngine.Rendering.ScriptableRenderContext _unity_self, ref UnityEngine.Rendering.RendererUtils.RendererList handle);
            /*0x28c89a4*/ ScriptableRenderContext(nint ptr);
            /*0x28c89ac*/ void BeginRenderPass(int width, int height, int samples, Unity.Collections.NativeArray<UnityEngine.Rendering.AttachmentDescriptor> attachments, int depthAttachmentIndex);
            /*0x28c8b2c*/ UnityEngine.Rendering.ScopedRenderPass BeginScopedRenderPass(int width, int height, int samples, Unity.Collections.NativeArray<UnityEngine.Rendering.AttachmentDescriptor> attachments, int depthAttachmentIndex);
            /*0x28c8b60*/ void BeginSubPass(Unity.Collections.NativeArray<int> colors, Unity.Collections.NativeArray<int> inputs, bool isDepthReadOnly, bool isStencilReadOnly);
            /*0x28c8cfc*/ void BeginSubPass(Unity.Collections.NativeArray<int> colors, Unity.Collections.NativeArray<int> inputs, bool isDepthStencilReadOnly);
            /*0x28c8e08*/ void BeginSubPass(Unity.Collections.NativeArray<int> colors, bool isDepthReadOnly, bool isStencilReadOnly);
            /*0x28c8f14*/ void BeginSubPass(Unity.Collections.NativeArray<int> colors, bool isDepthStencilReadOnly);
            /*0x28c901c*/ UnityEngine.Rendering.ScopedSubPass BeginScopedSubPass(Unity.Collections.NativeArray<int> colors, Unity.Collections.NativeArray<int> inputs, bool isDepthReadOnly, bool isStencilReadOnly);
            /*0x28c9058*/ UnityEngine.Rendering.ScopedSubPass BeginScopedSubPass(Unity.Collections.NativeArray<int> colors, Unity.Collections.NativeArray<int> inputs, bool isDepthStencilReadOnly);
            /*0x28c9090*/ UnityEngine.Rendering.ScopedSubPass BeginScopedSubPass(Unity.Collections.NativeArray<int> colors, bool isDepthReadOnly, bool isStencilReadOnly);
            /*0x28c90cc*/ UnityEngine.Rendering.ScopedSubPass BeginScopedSubPass(Unity.Collections.NativeArray<int> colors, bool isDepthStencilReadOnly);
            /*0x28c9104*/ void EndSubPass();
            /*0x28c91b8*/ void EndRenderPass();
            /*0x28c926c*/ void Submit();
            /*0x28c92e4*/ bool SubmitForRenderPassValidation();
            /*0x28c935c*/ void GetCameras(System.Collections.Generic.List<UnityEngine.Camera> results);
            /*0x28c9474*/ void DrawRenderers(UnityEngine.Rendering.CullingResults cullingResults, ref UnityEngine.Rendering.DrawingSettings drawingSettings, ref UnityEngine.Rendering.FilteringSettings filteringSettings);
            /*0x28c95fc*/ void DrawRenderers(UnityEngine.Rendering.CullingResults cullingResults, ref UnityEngine.Rendering.DrawingSettings drawingSettings, ref UnityEngine.Rendering.FilteringSettings filteringSettings, ref UnityEngine.Rendering.RenderStateBlock stateBlock);
            /*0x28c96bc*/ void DrawRenderers(UnityEngine.Rendering.CullingResults cullingResults, ref UnityEngine.Rendering.DrawingSettings drawingSettings, ref UnityEngine.Rendering.FilteringSettings filteringSettings, Unity.Collections.NativeArray<UnityEngine.Rendering.ShaderTagId> renderTypes, Unity.Collections.NativeArray<UnityEngine.Rendering.RenderStateBlock> stateBlocks);
            /*0x28c99b0*/ void DrawRenderers(UnityEngine.Rendering.CullingResults cullingResults, ref UnityEngine.Rendering.DrawingSettings drawingSettings, ref UnityEngine.Rendering.FilteringSettings filteringSettings, UnityEngine.Rendering.ShaderTagId tagName, bool isPassTagName, Unity.Collections.NativeArray<UnityEngine.Rendering.ShaderTagId> tagValues, Unity.Collections.NativeArray<UnityEngine.Rendering.RenderStateBlock> stateBlocks);
            /*0x28c9c7c*/ void DrawShadows(ref UnityEngine.Rendering.ShadowDrawingSettings settings);
            /*0x28c9d24*/ void ExecuteCommandBuffer(UnityEngine.Rendering.CommandBuffer commandBuffer);
            /*0x28c9e98*/ void ExecuteCommandBufferAsync(UnityEngine.Rendering.CommandBuffer commandBuffer, UnityEngine.Rendering.ComputeQueueType queueType);
            /*0x28ca024*/ void SetupCameraProperties(UnityEngine.Camera camera, bool stereoSetup);
            /*0x28ca030*/ void SetupCameraProperties(UnityEngine.Camera camera, bool stereoSetup, int eye);
            /*0x28ca0d4*/ void StereoEndRender(UnityEngine.Camera camera);
            /*0x28ca0e8*/ void StereoEndRender(UnityEngine.Camera camera, int eye);
            /*0x28ca0e0*/ void StereoEndRender(UnityEngine.Camera camera, int eye, bool isFinalPass);
            /*0x28ca18c*/ void StartMultiEye(UnityEngine.Camera camera);
            /*0x28ca194*/ void StartMultiEye(UnityEngine.Camera camera, int eye);
            /*0x28ca224*/ void StopMultiEye(UnityEngine.Camera camera);
            /*0x28ca2ac*/ void DrawSkybox(UnityEngine.Camera camera);
            /*0x28ca334*/ void InvokeOnRenderObjectCallback();
            /*0x28ca3ac*/ void DrawGizmos(UnityEngine.Camera camera, UnityEngine.Rendering.GizmoSubset gizmoSubset);
            /*0x28ca43c*/ void DrawWireOverlay(UnityEngine.Camera camera);
            /*0x28ca4c4*/ void DrawUIOverlay(UnityEngine.Camera camera);
            /*0x28ca54c*/ UnityEngine.Rendering.CullingResults Cull(ref UnityEngine.Rendering.ScriptableCullingParameters parameters);
            /*0x28ca670*/ void Validate();
            /*0x28ca674*/ bool Equals(UnityEngine.Rendering.ScriptableRenderContext other);
            /*0x28ca6e4*/ bool Equals(object obj);
            /*0x28ca75c*/ int GetHashCode();
            /*0x28ca7a0*/ UnityEngine.Rendering.RendererUtils.RendererList CreateRendererList(UnityEngine.Rendering.RendererUtils.RendererListDesc desc);
            /*0x28caec4*/ void PrepareRendererListsAsync(System.Collections.Generic.List<UnityEngine.Rendering.RendererUtils.RendererList> rendererLists);
            /*0x28caf4c*/ UnityEngine.Rendering.RendererUtils.RendererListStatus QueryRendererListStatus(UnityEngine.Rendering.RendererUtils.RendererList rendererList);
            /*0x28c9270*/ void Submit_Internal();
            /*0x28c92e8*/ bool SubmitForRenderPassValidation_Internal();
            /*0x28c93e8*/ void GetCameras_Internal(System.Type listType, object resultList);
            /*0x28c9524*/ void DrawRenderers_Internal(nint cullResults, ref UnityEngine.Rendering.DrawingSettings drawingSettings, ref UnityEngine.Rendering.FilteringSettings filteringSettings, UnityEngine.Rendering.ShaderTagId tagName, bool isPassTagName, nint tagValues, nint stateBlocks, int stateCount);
            /*0x28c9ca0*/ void DrawShadows_Internal(nint shadowDrawingSettings);
            /*0x28c9e14*/ void ExecuteCommandBuffer_Internal(UnityEngine.Rendering.CommandBuffer commandBuffer);
            /*0x28c9f98*/ void ExecuteCommandBufferAsync_Internal(UnityEngine.Rendering.CommandBuffer commandBuffer, UnityEngine.Rendering.ComputeQueueType queueType);
            /*0x28ca038*/ void SetupCameraProperties_Internal(UnityEngine.Camera camera, bool stereoSetup, int eye);
            /*0x28ca0f0*/ void StereoEndRender_Internal(UnityEngine.Camera camera, int eye, bool isFinalPass);
            /*0x28ca198*/ void StartMultiEye_Internal(UnityEngine.Camera camera, int eye);
            /*0x28ca228*/ void StopMultiEye_Internal(UnityEngine.Camera camera);
            /*0x28ca2b0*/ void DrawSkybox_Internal(UnityEngine.Camera camera);
            /*0x28ca338*/ void InvokeOnRenderObjectCallback_Internal();
            /*0x28ca3b0*/ void DrawGizmos_Internal(UnityEngine.Camera camera, UnityEngine.Rendering.GizmoSubset gizmoSubset);
            /*0x28ca440*/ void DrawWireOverlay_Impl(UnityEngine.Camera camera);
            /*0x28ca4c8*/ void DrawUIOverlay_Internal(UnityEngine.Camera camera);
            /*0x28cb558*/ nint Internal_GetPtr();
            /*0x28caddc*/ UnityEngine.Rendering.RendererUtils.RendererList CreateRendererList_Internal(nint cullResults, ref UnityEngine.Rendering.DrawingSettings drawingSettings, ref UnityEngine.Rendering.FilteringSettings filteringSettings, UnityEngine.Rendering.ShaderTagId tagName, bool isPassTagName, nint tagValues, nint stateBlocks, int stateCount);
            /*0x28caec8*/ void PrepareRendererListsAsync_Internal(object rendererLists);
            /*0x28caf50*/ UnityEngine.Rendering.RendererUtils.RendererListStatus QueryRendererListStatus_Internal(UnityEngine.Rendering.RendererUtils.RendererList handle);
        }

        class SupportedRenderingFeatures
        {
            static /*0x0*/ UnityEngine.Rendering.SupportedRenderingFeatures s_Active;
            /*0x10*/ UnityEngine.Rendering.SupportedRenderingFeatures.ReflectionProbeModes <reflectionProbeModes>k__BackingField;
            /*0x14*/ UnityEngine.Rendering.SupportedRenderingFeatures.LightmapMixedBakeModes <defaultMixedLightingModes>k__BackingField;
            /*0x18*/ UnityEngine.Rendering.SupportedRenderingFeatures.LightmapMixedBakeModes <mixedLightingModes>k__BackingField;
            /*0x1c*/ UnityEngine.LightmapBakeType <lightmapBakeTypes>k__BackingField;
            /*0x20*/ UnityEngine.LightmapsMode <lightmapsModes>k__BackingField;
            /*0x24*/ bool <enlightenLightmapper>k__BackingField;
            /*0x25*/ bool <enlighten>k__BackingField;
            /*0x26*/ bool <lightProbeProxyVolumes>k__BackingField;
            /*0x27*/ bool <motionVectors>k__BackingField;
            /*0x28*/ bool <receiveShadows>k__BackingField;
            /*0x29*/ bool <reflectionProbes>k__BackingField;
            /*0x2a*/ bool <reflectionProbesBlendDistance>k__BackingField;
            /*0x2b*/ bool <rendererPriority>k__BackingField;
            /*0x2c*/ bool <rendersUIOverlay>k__BackingField;
            /*0x2d*/ bool <overridesEnvironmentLighting>k__BackingField;
            /*0x2e*/ bool <overridesFog>k__BackingField;
            /*0x2f*/ bool <overridesRealtimeReflectionProbes>k__BackingField;
            /*0x30*/ bool <overridesOtherLightingSettings>k__BackingField;
            /*0x31*/ bool <editableMaterialRenderQueue>k__BackingField;
            /*0x32*/ bool <overridesLODBias>k__BackingField;
            /*0x33*/ bool <overridesMaximumLODLevel>k__BackingField;
            /*0x34*/ bool <rendererProbes>k__BackingField;
            /*0x35*/ bool <particleSystemInstancing>k__BackingField;
            /*0x36*/ bool <autoAmbientProbeBaking>k__BackingField;
            /*0x37*/ bool <autoDefaultReflectionProbeBaking>k__BackingField;
            /*0x38*/ bool <overridesShadowmask>k__BackingField;
            /*0x40*/ string <overrideShadowmaskMessage>k__BackingField;

            static /*0x28cc334*/ SupportedRenderingFeatures();
            static /*0x28cb708*/ UnityEngine.Rendering.SupportedRenderingFeatures get_active();
            static /*0x28cb840*/ void set_active(UnityEngine.Rendering.SupportedRenderingFeatures value);
            static /*0x28cbaf4*/ UnityEngine.MixedLightingMode FallbackMixedLightingMode();
            static /*0x28cbb50*/ void FallbackMixedLightingModeByRef(nint fallbackModePtr);
            static /*0x28cbc84*/ bool IsMixedLightingModeSupported(UnityEngine.MixedLightingMode mixedMode);
            static /*0x28cbcf0*/ void IsMixedLightingModeSupportedByRef(UnityEngine.MixedLightingMode mixedMode, nint isSupportedPtr);
            static /*0x28cbdf8*/ bool IsLightmapBakeTypeSupported(UnityEngine.LightmapBakeType bakeType);
            static /*0x28cbe64*/ void IsLightmapBakeTypeSupportedByRef(UnityEngine.LightmapBakeType bakeType, nint isSupportedPtr);
            static /*0x28cbf54*/ bool IsLightmapsModeSupported(UnityEngine.LightmapsMode mode);
            static /*0x28cbfc0*/ void IsLightmapsModeSupportedByRef(UnityEngine.LightmapsMode mode, nint isSupportedPtr);
            static /*0x28cc04c*/ bool IsLightmapperSupported(int lightmapper);
            static /*0x28cc0b8*/ void IsLightmapperSupportedByRef(int lightmapper, nint isSupportedPtr);
            static /*0x28cc13c*/ void IsUIOverlayRenderedBySRP(nint isSupportedPtr);
            static /*0x28cc1b4*/ void IsAutoAmbientProbeBakingSupported(nint isSupportedPtr);
            static /*0x28cc22c*/ void IsAutoDefaultReflectionProbeBakingSupported(nint isSupportedPtr);
            static /*0x28cc2a4*/ int FallbackLightmapper();
            static /*0x28cc30c*/ void FallbackLightmapperByRef(nint lightmapperPtr);
            /*0x28cb7b0*/ SupportedRenderingFeatures();
            /*0x28cb89c*/ UnityEngine.Rendering.SupportedRenderingFeatures.ReflectionProbeModes get_reflectionProbeModes();
            /*0x28cb8a4*/ void set_reflectionProbeModes(UnityEngine.Rendering.SupportedRenderingFeatures.ReflectionProbeModes value);
            /*0x28cb8ac*/ UnityEngine.Rendering.SupportedRenderingFeatures.LightmapMixedBakeModes get_defaultMixedLightingModes();
            /*0x28cb8b4*/ void set_defaultMixedLightingModes(UnityEngine.Rendering.SupportedRenderingFeatures.LightmapMixedBakeModes value);
            /*0x28cb8bc*/ UnityEngine.Rendering.SupportedRenderingFeatures.LightmapMixedBakeModes get_mixedLightingModes();
            /*0x28cb8c4*/ void set_mixedLightingModes(UnityEngine.Rendering.SupportedRenderingFeatures.LightmapMixedBakeModes value);
            /*0x28cb8cc*/ UnityEngine.LightmapBakeType get_lightmapBakeTypes();
            /*0x28cb8d4*/ void set_lightmapBakeTypes(UnityEngine.LightmapBakeType value);
            /*0x28cb8dc*/ UnityEngine.LightmapsMode get_lightmapsModes();
            /*0x28cb8e4*/ void set_lightmapsModes(UnityEngine.LightmapsMode value);
            /*0x28cb8ec*/ bool get_enlightenLightmapper();
            /*0x28cb8f4*/ void set_enlightenLightmapper(bool value);
            /*0x28cb900*/ bool get_enlighten();
            /*0x28cb908*/ void set_enlighten(bool value);
            /*0x28cb914*/ bool get_lightProbeProxyVolumes();
            /*0x28cb91c*/ void set_lightProbeProxyVolumes(bool value);
            /*0x28cb928*/ bool get_motionVectors();
            /*0x28cb930*/ void set_motionVectors(bool value);
            /*0x28cb93c*/ bool get_receiveShadows();
            /*0x28cb944*/ void set_receiveShadows(bool value);
            /*0x28cb950*/ bool get_reflectionProbes();
            /*0x28cb958*/ void set_reflectionProbes(bool value);
            /*0x28cb964*/ bool get_reflectionProbesBlendDistance();
            /*0x28cb96c*/ void set_reflectionProbesBlendDistance(bool value);
            /*0x28cb978*/ bool get_rendererPriority();
            /*0x28cb980*/ void set_rendererPriority(bool value);
            /*0x28cb98c*/ bool get_rendersUIOverlay();
            /*0x28cb994*/ void set_rendersUIOverlay(bool value);
            /*0x28cb9a0*/ bool get_overridesEnvironmentLighting();
            /*0x28cb9a8*/ void set_overridesEnvironmentLighting(bool value);
            /*0x28cb9b4*/ bool get_overridesFog();
            /*0x28cb9bc*/ void set_overridesFog(bool value);
            /*0x28cb9c8*/ bool get_overridesRealtimeReflectionProbes();
            /*0x28cb9d0*/ void set_overridesRealtimeReflectionProbes(bool value);
            /*0x28cb9dc*/ bool get_overridesOtherLightingSettings();
            /*0x28cb9e4*/ void set_overridesOtherLightingSettings(bool value);
            /*0x28cb9f0*/ bool get_editableMaterialRenderQueue();
            /*0x28cb9f8*/ void set_editableMaterialRenderQueue(bool value);
            /*0x28cba04*/ bool get_overridesLODBias();
            /*0x28cba0c*/ void set_overridesLODBias(bool value);
            /*0x28cba18*/ bool get_overridesMaximumLODLevel();
            /*0x28cba20*/ void set_overridesMaximumLODLevel(bool value);
            /*0x28cba2c*/ bool get_rendererProbes();
            /*0x28cba34*/ void set_rendererProbes(bool value);
            /*0x28cba40*/ bool get_particleSystemInstancing();
            /*0x28cba48*/ void set_particleSystemInstancing(bool value);
            /*0x28cba54*/ bool get_autoAmbientProbeBaking();
            /*0x28cba5c*/ void set_autoAmbientProbeBaking(bool value);
            /*0x28cba68*/ bool get_autoDefaultReflectionProbeBaking();
            /*0x28cba70*/ void set_autoDefaultReflectionProbeBaking(bool value);
            /*0x28cba7c*/ bool get_overridesShadowmask();
            /*0x28cba84*/ void set_overridesShadowmask(bool value);
            /*0x28cba90*/ string get_overrideShadowmaskMessage();
            /*0x28cba98*/ void set_overrideShadowmaskMessage(string value);
            /*0x28cbaa0*/ string get_shadowmaskMessage();
            /*0x28cc328*/ bool get_terrainDetailUnsupported();
            /*0x28cc330*/ void set_terrainDetailUnsupported(bool value);

            enum ReflectionProbeModes
            {
                None = 0,
                Rotation = 1,
            }

            enum LightmapMixedBakeModes
            {
                None = 0,
                IndirectOnly = 1,
                Subtractive = 2,
                Shadowmask = 4,
            }
        }

        struct CoreCameraValues : System.IEquatable<UnityEngine.Rendering.CoreCameraValues>
        {
            /*0x10*/ int filterMode;
            /*0x14*/ uint cullingMask;
            /*0x18*/ int instanceID;

            static /*0x28cc480*/ bool op_Equality(UnityEngine.Rendering.CoreCameraValues left, UnityEngine.Rendering.CoreCameraValues right);
            static /*0x28cc4b0*/ bool op_Inequality(UnityEngine.Rendering.CoreCameraValues left, UnityEngine.Rendering.CoreCameraValues right);
            /*0x28cc394*/ bool Equals(UnityEngine.Rendering.CoreCameraValues other);
            /*0x28cc3c8*/ bool Equals(object obj);
            /*0x28cc460*/ int GetHashCode();
        }

        struct CameraProperties : System.IEquatable<UnityEngine.Rendering.CameraProperties>
        {
            static int k_NumLayers = 32;
            static int k_PlaneCount = 6;
            /*0x10*/ UnityEngine.Rect screenRect;
            /*0x20*/ UnityEngine.Vector3 viewDir;
            /*0x2c*/ float projectionNear;
            /*0x30*/ float projectionFar;
            /*0x34*/ float cameraNear;
            /*0x38*/ float cameraFar;
            /*0x3c*/ float cameraAspect;
            /*0x40*/ UnityEngine.Matrix4x4 cameraToWorld;
            /*0x80*/ UnityEngine.Matrix4x4 actualWorldToClip;
            /*0xc0*/ UnityEngine.Matrix4x4 cameraClipToWorld;
            /*0x100*/ UnityEngine.Matrix4x4 cameraWorldToClip;
            /*0x140*/ UnityEngine.Matrix4x4 implicitProjection;
            /*0x180*/ UnityEngine.Matrix4x4 stereoWorldToClipLeft;
            /*0x1c0*/ UnityEngine.Matrix4x4 stereoWorldToClipRight;
            /*0x200*/ UnityEngine.Matrix4x4 worldToCamera;
            /*0x240*/ UnityEngine.Vector3 up;
            /*0x24c*/ UnityEngine.Vector3 right;
            /*0x258*/ UnityEngine.Vector3 transformDirection;
            /*0x264*/ UnityEngine.Vector3 cameraEuler;
            /*0x270*/ UnityEngine.Vector3 velocity;
            /*0x27c*/ float farPlaneWorldSpaceLength;
            /*0x280*/ uint rendererCount;
            /*0x284*/ UnityEngine.Rendering.CameraProperties.<m_ShadowCullPlanes> m_ShadowCullPlanes;
            /*0x2e4*/ UnityEngine.Rendering.CameraProperties.<m_CameraCullPlanes> m_CameraCullPlanes;
            /*0x344*/ float baseFarDistance;
            /*0x348*/ UnityEngine.Vector3 shadowCullCenter;
            /*0x354*/ UnityEngine.Rendering.CameraProperties.<layerCullDistances> layerCullDistances;
            /*0x3d4*/ int layerCullSpherical;
            /*0x3d8*/ UnityEngine.Rendering.CoreCameraValues coreCameraValues;
            /*0x3e4*/ uint cameraType;
            /*0x3e8*/ int projectionIsOblique;
            /*0x3ec*/ int isImplicitProjectionMatrix;

            static /*0x28cea28*/ bool op_Equality(UnityEngine.Rendering.CameraProperties left, UnityEngine.Rendering.CameraProperties right);
            static /*0x28cea84*/ bool op_Inequality(UnityEngine.Rendering.CameraProperties left, UnityEngine.Rendering.CameraProperties right);
            /*0x28cc4e0*/ UnityEngine.Plane GetShadowCullingPlane(int index);
            /*0x28cc5cc*/ void SetShadowCullingPlane(int index, UnityEngine.Plane plane);
            /*0x28cc6b8*/ UnityEngine.Plane GetCameraCullingPlane(int index);
            /*0x28cc7a4*/ void SetCameraCullingPlane(int index, UnityEngine.Plane plane);
            /*0x28cc890*/ bool Equals(UnityEngine.Rendering.CameraProperties other);
            /*0x28cd7fc*/ bool Equals(object obj);
            /*0x28cd8b4*/ int GetHashCode();

            struct <m_ShadowCullPlanes>e__FixedBuffer
            {
                /*0x10*/ byte FixedElementField;
            }

            struct <m_CameraCullPlanes>e__FixedBuffer
            {
                /*0x10*/ byte FixedElementField;
            }

            struct <layerCullDistances>e__FixedBuffer
            {
                /*0x10*/ float FixedElementField;
            }
        }

        enum CullingOptions
        {
            None = 0,
            ForceEvenIfCameraIsNotActive = 1,
            OcclusionCull = 2,
            NeedsLighting = 4,
            NeedsReflectionProbes = 8,
            Stereo = 16,
            DisablePerObjectCulling = 32,
            ShadowCasters = 64,
        }

        struct ScriptableCullingParameters : System.IEquatable<UnityEngine.Rendering.ScriptableCullingParameters>
        {
            static int k_MaximumCullingPlaneCount = 10;
            static int k_LayerCount = 32;
            static int k_CullingJobCountLowerLimit = 1;
            static int k_CullingJobCountUpperLimit = 16;
            static /*0x0*/ int maximumCullingPlaneCount;
            static /*0x4*/ int layerCount;
            /*0x10*/ int m_IsOrthographic;
            /*0x14*/ UnityEngine.Rendering.LODParameters m_LODParameters;
            /*0x30*/ UnityEngine.Rendering.ScriptableCullingParameters.<m_CullingPlanes> m_CullingPlanes;
            /*0xd0*/ int m_CullingPlaneCount;
            /*0xd4*/ uint m_CullingMask;
            /*0xd8*/ ulong m_SceneMask;
            /*0xe0*/ UnityEngine.Rendering.ScriptableCullingParameters.<m_LayerFarCullDistances> m_LayerFarCullDistances;
            /*0x160*/ int m_LayerCull;
            /*0x164*/ UnityEngine.Matrix4x4 m_CullingMatrix;
            /*0x1a4*/ UnityEngine.Vector3 m_Origin;
            /*0x1b0*/ float m_ShadowDistance;
            /*0x1b4*/ float m_ShadowNearPlaneOffset;
            /*0x1b8*/ UnityEngine.Rendering.CullingOptions m_CullingOptions;
            /*0x1bc*/ UnityEngine.Rendering.ReflectionProbeSortingCriteria m_ReflectionProbeSortingCriteria;
            /*0x1c0*/ UnityEngine.Rendering.CameraProperties m_CameraProperties;
            /*0x5a0*/ float m_AccurateOcclusionThreshold;
            /*0x5a4*/ int m_MaximumPortalCullingJobs;
            /*0x5a8*/ UnityEngine.Matrix4x4 m_StereoViewMatrix;
            /*0x5e8*/ UnityEngine.Matrix4x4 m_StereoProjectionMatrix;
            /*0x628*/ float m_StereoSeparationDistance;
            /*0x62c*/ int m_maximumVisibleLights;
            /*0x630*/ bool m_ConservativeEnclosingSphere;
            /*0x634*/ int m_NumIterationsEnclosingSphere;

            static /*0x28d0314*/ ScriptableCullingParameters();
            static /*0x28cf008*/ int get_cullingJobsLowerLimit();
            static /*0x28cf010*/ int get_cullingJobsUpperLimit();
            static /*0x28d0258*/ bool op_Equality(UnityEngine.Rendering.ScriptableCullingParameters left, UnityEngine.Rendering.ScriptableCullingParameters right);
            static /*0x28d02b4*/ bool op_Inequality(UnityEngine.Rendering.ScriptableCullingParameters left, UnityEngine.Rendering.ScriptableCullingParameters right);
            /*0x28ceae4*/ int get_maximumVisibleLights();
            /*0x28ceaec*/ void set_maximumVisibleLights(int value);
            /*0x28ceaf4*/ bool get_conservativeEnclosingSphere();
            /*0x28ceafc*/ void set_conservativeEnclosingSphere(bool value);
            /*0x28ceb08*/ int get_numIterationsEnclosingSphere();
            /*0x28ceb10*/ void set_numIterationsEnclosingSphere(int value);
            /*0x28ceb18*/ int get_cullingPlaneCount();
            /*0x28ceb20*/ void set_cullingPlaneCount(int value);
            /*0x28cebfc*/ bool get_isOrthographic();
            /*0x28cec58*/ void set_isOrthographic(bool value);
            /*0x28cecc4*/ UnityEngine.Rendering.LODParameters get_lodParameters();
            /*0x28cecd8*/ void set_lodParameters(UnityEngine.Rendering.LODParameters value);
            /*0x28cecf4*/ uint get_cullingMask();
            /*0x28cecfc*/ void set_cullingMask(uint value);
            /*0x28ced04*/ UnityEngine.Matrix4x4 get_cullingMatrix();
            /*0x28ced1c*/ void set_cullingMatrix(UnityEngine.Matrix4x4 value);
            /*0x28ced34*/ UnityEngine.Vector3 get_origin();
            /*0x28ced44*/ void set_origin(UnityEngine.Vector3 value);
            /*0x28ced54*/ float get_shadowDistance();
            /*0x28ced5c*/ void set_shadowDistance(float value);
            /*0x28ced64*/ float get_shadowNearPlaneOffset();
            /*0x28ced6c*/ void set_shadowNearPlaneOffset(float value);
            /*0x28ced74*/ UnityEngine.Rendering.CullingOptions get_cullingOptions();
            /*0x28ced7c*/ void set_cullingOptions(UnityEngine.Rendering.CullingOptions value);
            /*0x28ced84*/ UnityEngine.Rendering.ReflectionProbeSortingCriteria get_reflectionProbeSortingCriteria();
            /*0x28ced8c*/ void set_reflectionProbeSortingCriteria(UnityEngine.Rendering.ReflectionProbeSortingCriteria value);
            /*0x28ced94*/ UnityEngine.Rendering.CameraProperties get_cameraProperties();
            /*0x28cedb0*/ void set_cameraProperties(UnityEngine.Rendering.CameraProperties value);
            /*0x28cedc8*/ UnityEngine.Matrix4x4 get_stereoViewMatrix();
            /*0x28cede0*/ void set_stereoViewMatrix(UnityEngine.Matrix4x4 value);
            /*0x28cedf8*/ UnityEngine.Matrix4x4 get_stereoProjectionMatrix();
            /*0x28cee10*/ void set_stereoProjectionMatrix(UnityEngine.Matrix4x4 value);
            /*0x28cee28*/ float get_stereoSeparationDistance();
            /*0x28cee30*/ void set_stereoSeparationDistance(float value);
            /*0x28cee38*/ float get_accurateOcclusionThreshold();
            /*0x28cee40*/ void set_accurateOcclusionThreshold(float value);
            /*0x28cee50*/ int get_maximumPortalCullingJobs();
            /*0x28cee58*/ void set_maximumPortalCullingJobs(int value);
            /*0x28cf018*/ float GetLayerCullingDistance(int layerIndex);
            /*0x28cf0f8*/ void SetLayerCullingDistance(int layerIndex, float distance);
            /*0x28cf1d8*/ UnityEngine.Plane GetCullingPlane(int index);
            /*0x28cf2c8*/ void SetCullingPlane(int index, UnityEngine.Plane plane);
            /*0x28cf3b8*/ bool Equals(UnityEngine.Rendering.ScriptableCullingParameters other);
            /*0x28cfaf8*/ bool Equals(object obj);
            /*0x28cfbb0*/ int GetHashCode();

            struct <m_CullingPlanes>e__FixedBuffer
            {
                /*0x10*/ byte FixedElementField;
            }

            struct <m_LayerFarCullDistances>e__FixedBuffer
            {
                /*0x10*/ float FixedElementField;
            }
        }

        struct DrawingSettings : System.IEquatable<UnityEngine.Rendering.DrawingSettings>
        {
            static int kMaxShaderPasses = 16;
            static /*0x0*/ int maxShaderPasses;
            /*0x10*/ UnityEngine.Rendering.SortingSettings m_SortingSettings;
            /*0xf0*/ UnityEngine.Rendering.DrawingSettings.<shaderPassNames> shaderPassNames;
            /*0x130*/ UnityEngine.Rendering.PerObjectData m_PerObjectData;
            /*0x134*/ UnityEngine.Rendering.DrawRendererFlags m_Flags;
            /*0x138*/ int m_OverrideMaterialInstanceId;
            /*0x13c*/ int m_OverrideMaterialPassIndex;
            /*0x140*/ int m_fallbackMaterialInstanceId;
            /*0x144*/ int m_MainLightIndex;
            /*0x148*/ int m_UseSrpBatcher;

            static /*0x28d0c80*/ DrawingSettings();
            static /*0x28d0bc4*/ bool op_Equality(UnityEngine.Rendering.DrawingSettings left, UnityEngine.Rendering.DrawingSettings right);
            static /*0x28d0c20*/ bool op_Inequality(UnityEngine.Rendering.DrawingSettings left, UnityEngine.Rendering.DrawingSettings right);
            /*0x28d0364*/ DrawingSettings(UnityEngine.Rendering.ShaderTagId shaderPassName, UnityEngine.Rendering.SortingSettings sortingSettings);
            /*0x28d043c*/ UnityEngine.Rendering.SortingSettings get_sortingSettings();
            /*0x28d0458*/ void set_sortingSettings(UnityEngine.Rendering.SortingSettings value);
            /*0x28d046c*/ UnityEngine.Rendering.PerObjectData get_perObjectData();
            /*0x28d0474*/ void set_perObjectData(UnityEngine.Rendering.PerObjectData value);
            /*0x28d047c*/ bool get_enableDynamicBatching();
            /*0x28d0488*/ void set_enableDynamicBatching(bool value);
            /*0x28d04a4*/ bool get_enableInstancing();
            /*0x28d04b0*/ void set_enableInstancing(bool value);
            /*0x28d04cc*/ UnityEngine.Material get_overrideMaterial();
            /*0x28d057c*/ void set_overrideMaterial(UnityEngine.Material value);
            /*0x28d05a8*/ int get_overrideMaterialPassIndex();
            /*0x28d05b0*/ void set_overrideMaterialPassIndex(int value);
            /*0x28d05b8*/ UnityEngine.Material get_fallbackMaterial();
            /*0x28d0668*/ void set_fallbackMaterial(UnityEngine.Material value);
            /*0x28d0694*/ int get_mainLightIndex();
            /*0x28d069c*/ void set_mainLightIndex(int value);
            /*0x28d06a4*/ UnityEngine.Rendering.ShaderTagId GetShaderPassName(int index);
            /*0x28d080c*/ void SetShaderPassName(int index, UnityEngine.Rendering.ShaderTagId shaderPassName);
            /*0x28d096c*/ bool Equals(UnityEngine.Rendering.DrawingSettings other);
            /*0x28d0aac*/ bool Equals(object obj);
            /*0x28d0b64*/ int GetHashCode();

            struct <shaderPassNames>e__FixedBuffer
            {
                /*0x10*/ int FixedElementField;
            }
        }

        struct BatchVisibility
        {
            /*0x10*/ int offset;
            /*0x14*/ int instancesCount;
            /*0x18*/ int visibleCount;
        }

        struct BatchCullingContext
        {
            /*0x10*/ Unity.Collections.NativeArray<UnityEngine.Plane> cullingPlanes;
            /*0x20*/ Unity.Collections.NativeArray<UnityEngine.Rendering.BatchVisibility> batchVisibility;
            /*0x30*/ Unity.Collections.NativeArray<int> visibleIndices;
            /*0x40*/ Unity.Collections.NativeArray<int> visibleIndicesY;
            /*0x50*/ UnityEngine.Rendering.LODParameters lodParameters;
            /*0x6c*/ UnityEngine.Matrix4x4 cullingMatrix;
            /*0xac*/ float nearPlane;

            /*0x28d0ccc*/ BatchCullingContext(Unity.Collections.NativeArray<UnityEngine.Plane> inCullingPlanes, Unity.Collections.NativeArray<UnityEngine.Rendering.BatchVisibility> inOutBatchVisibility, Unity.Collections.NativeArray<int> outVisibleIndices, UnityEngine.Rendering.LODParameters inLodParameters);
            /*0x28d0dd0*/ BatchCullingContext(Unity.Collections.NativeArray<UnityEngine.Plane> inCullingPlanes, Unity.Collections.NativeArray<UnityEngine.Rendering.BatchVisibility> inOutBatchVisibility, Unity.Collections.NativeArray<int> outVisibleIndices, UnityEngine.Rendering.LODParameters inLodParameters, UnityEngine.Matrix4x4 inCullingMatrix, float inNearPlane);
            /*0x28d0eb4*/ BatchCullingContext(Unity.Collections.NativeArray<UnityEngine.Plane> inCullingPlanes, Unity.Collections.NativeArray<UnityEngine.Rendering.BatchVisibility> inOutBatchVisibility, Unity.Collections.NativeArray<int> outVisibleIndices, Unity.Collections.NativeArray<int> outVisibleIndicesY, UnityEngine.Rendering.LODParameters inLodParameters, UnityEngine.Matrix4x4 inCullingMatrix, float inNearPlane);
        }

        struct BatchRendererCullingOutput
        {
            /*0x10*/ Unity.Jobs.JobHandle cullingJobsFence;
            /*0x20*/ UnityEngine.Matrix4x4 cullingMatrix;
            /*0x60*/ UnityEngine.Plane* cullingPlanes;
            /*0x68*/ UnityEngine.Rendering.BatchVisibility* batchVisibility;
            /*0x70*/ int* visibleIndices;
            /*0x78*/ int* visibleIndicesY;
            /*0x80*/ int cullingPlanesCount;
            /*0x84*/ int batchVisibilityCount;
            /*0x88*/ int visibleIndicesCount;
            /*0x8c*/ float nearPlane;
        }

        class BatchRendererGroup : System.IDisposable
        {
            /*0x10*/ nint m_GroupHandle;
            /*0x18*/ UnityEngine.Rendering.BatchRendererGroup.OnPerformCulling m_PerformCulling;

            static /*0x28d0fa0*/ nint Create(UnityEngine.Rendering.BatchRendererGroup group);
            static /*0x28d1060*/ void Destroy(nint groupHandle);
            static /*0x28d1ed4*/ void InvokeOnPerformCulling(UnityEngine.Rendering.BatchRendererGroup group, ref UnityEngine.Rendering.BatchRendererCullingOutput context, ref UnityEngine.Rendering.LODParameters lodParameters);
            /*0x28d0f08*/ BatchRendererGroup(UnityEngine.Rendering.BatchRendererGroup.OnPerformCulling cullingCallback);
            /*0x28d0fdc*/ void Dispose();
            /*0x28d109c*/ int AddBatch(UnityEngine.Mesh mesh, int subMeshIndex, UnityEngine.Material material, int layer, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, bool invertCulling, UnityEngine.Bounds bounds, int instanceCount, UnityEngine.MaterialPropertyBlock customProps, UnityEngine.GameObject associatedSceneObject, ulong sceneCullingMask, uint renderingLayerMask);
            /*0x28d121c*/ void SetBatchFlags(int batchIndex, ulong flags);
            /*0x28d1270*/ void SetBatchPropertyMetadata(int batchIndex, Unity.Collections.NativeArray<int> cbufferLengths, Unity.Collections.NativeArray<int> cbufferMetadata);
            /*0x28d134c*/ void InternalSetBatchPropertyMetadata(int batchIndex, nint cbufferLengths, int cbufferLengthsCount, nint cbufferMetadata, int cbufferMetadataCount);
            /*0x28d13c0*/ void SetInstancingData(int batchIndex, int instanceCount, UnityEngine.MaterialPropertyBlock customProps);
            /*0x28d141c*/ Unity.Collections.NativeArray<UnityEngine.Matrix4x4> GetBatchMatrices(int batchIndex);
            /*0x28d1500*/ Unity.Collections.NativeArray<int> GetBatchScalarArrayInt(int batchIndex, string propertyName);
            /*0x28d15fc*/ Unity.Collections.NativeArray<float> GetBatchScalarArray(int batchIndex, string propertyName);
            /*0x28d169c*/ Unity.Collections.NativeArray<int> GetBatchVectorArrayInt(int batchIndex, string propertyName);
            /*0x28d1798*/ Unity.Collections.NativeArray<UnityEngine.Vector4> GetBatchVectorArray(int batchIndex, string propertyName);
            /*0x28d1838*/ Unity.Collections.NativeArray<UnityEngine.Matrix4x4> GetBatchMatrixArray(int batchIndex, string propertyName);
            /*0x28d1934*/ Unity.Collections.NativeArray<int> GetBatchScalarArrayInt(int batchIndex, int propertyName);
            /*0x28d1a30*/ Unity.Collections.NativeArray<float> GetBatchScalarArray(int batchIndex, int propertyName);
            /*0x28d1ad0*/ Unity.Collections.NativeArray<int> GetBatchVectorArrayInt(int batchIndex, int propertyName);
            /*0x28d1bcc*/ Unity.Collections.NativeArray<UnityEngine.Vector4> GetBatchVectorArray(int batchIndex, int propertyName);
            /*0x28d1c6c*/ Unity.Collections.NativeArray<UnityEngine.Matrix4x4> GetBatchMatrixArray(int batchIndex, int propertyName);
            /*0x28d1d68*/ void SetBatchBounds(int batchIndex, UnityEngine.Bounds bounds);
            /*0x28d1e10*/ int GetNumBatches();
            /*0x28d1e4c*/ void RemoveBatch(int index);
            /*0x28d14ac*/ void* GetBatchMatrices(int batchIndex, ref int matrixCount);
            /*0x28d15a0*/ void* GetBatchScalarArray(int batchIndex, string propertyName, ref int elementCount);
            /*0x28d173c*/ void* GetBatchVectorArray(int batchIndex, string propertyName, ref int elementCount);
            /*0x28d18d8*/ void* GetBatchMatrixArray(int batchIndex, string propertyName, ref int elementCount);
            /*0x28d19d4*/ void* GetBatchScalarArray_Internal(int batchIndex, int propertyName, ref int elementCount);
            /*0x28d1b70*/ void* GetBatchVectorArray_Internal(int batchIndex, int propertyName, ref int elementCount);
            /*0x28d1d0c*/ void* GetBatchMatrixArray_Internal(int batchIndex, int propertyName, ref int elementCount);
            /*0x28d1e90*/ void EnableVisibleIndicesYArray(bool enabled);
            /*0x28d115c*/ int AddBatch_Injected(UnityEngine.Mesh mesh, int subMeshIndex, UnityEngine.Material material, int layer, UnityEngine.Rendering.ShadowCastingMode castShadows, bool receiveShadows, bool invertCulling, ref UnityEngine.Bounds bounds, int instanceCount, UnityEngine.MaterialPropertyBlock customProps, UnityEngine.GameObject associatedSceneObject, ulong sceneCullingMask, uint renderingLayerMask);
            /*0x28d1dbc*/ void SetBatchBounds_Injected(int batchIndex, ref UnityEngine.Bounds bounds);

            class OnPerformCulling : System.MulticastDelegate
            {
                /*0x28d20f4*/ OnPerformCulling(object object, nint method);
                /*0x28d2224*/ Unity.Jobs.JobHandle Invoke(UnityEngine.Rendering.BatchRendererGroup rendererGroup, UnityEngine.Rendering.BatchCullingContext cullingContext);
            }
        }

        struct SphericalHarmonicsL2 : System.IEquatable<UnityEngine.Rendering.SphericalHarmonicsL2>
        {
            /*0x10*/ float shr0;
            /*0x14*/ float shr1;
            /*0x18*/ float shr2;
            /*0x1c*/ float shr3;
            /*0x20*/ float shr4;
            /*0x24*/ float shr5;
            /*0x28*/ float shr6;
            /*0x2c*/ float shr7;
            /*0x30*/ float shr8;
            /*0x34*/ float shg0;
            /*0x38*/ float shg1;
            /*0x3c*/ float shg2;
            /*0x40*/ float shg3;
            /*0x44*/ float shg4;
            /*0x48*/ float shg5;
            /*0x4c*/ float shg6;
            /*0x50*/ float shg7;
            /*0x54*/ float shg8;
            /*0x58*/ float shb0;
            /*0x5c*/ float shb1;
            /*0x60*/ float shb2;
            /*0x64*/ float shb3;
            /*0x68*/ float shb4;
            /*0x6c*/ float shb5;
            /*0x70*/ float shb6;
            /*0x74*/ float shb7;
            /*0x78*/ float shb8;

            static /*0x28d23e4*/ void AddDirectionalLightInternal(ref UnityEngine.Rendering.SphericalHarmonicsL2 sh, UnityEngine.Vector3 direction, UnityEngine.Color color);
            static /*0x28d25c0*/ void EvaluateInternal(ref UnityEngine.Rendering.SphericalHarmonicsL2 sh, UnityEngine.Vector3[] directions, UnityEngine.Color[] results);
            static /*0x28d2d44*/ UnityEngine.Rendering.SphericalHarmonicsL2 op_Multiply(UnityEngine.Rendering.SphericalHarmonicsL2 lhs, float rhs);
            static /*0x28d2d94*/ UnityEngine.Rendering.SphericalHarmonicsL2 op_Multiply(float lhs, UnityEngine.Rendering.SphericalHarmonicsL2 rhs);
            static /*0x28d2de4*/ UnityEngine.Rendering.SphericalHarmonicsL2 op_Addition(UnityEngine.Rendering.SphericalHarmonicsL2 lhs, UnityEngine.Rendering.SphericalHarmonicsL2 rhs);
            static /*0x28d2b88*/ bool op_Equality(UnityEngine.Rendering.SphericalHarmonicsL2 lhs, UnityEngine.Rendering.SphericalHarmonicsL2 rhs);
            static /*0x28d2e48*/ bool op_Inequality(UnityEngine.Rendering.SphericalHarmonicsL2 lhs, UnityEngine.Rendering.SphericalHarmonicsL2 rhs);
            static /*0x28d22f8*/ void SetZero_Injected(ref UnityEngine.Rendering.SphericalHarmonicsL2 _unity_self);
            static /*0x28d2388*/ void AddAmbientLight_Injected(ref UnityEngine.Rendering.SphericalHarmonicsL2 _unity_self, ref UnityEngine.Color color);
            static /*0x28d2444*/ void AddDirectionalLightInternal_Injected(ref UnityEngine.Rendering.SphericalHarmonicsL2 sh, ref UnityEngine.Vector3 direction, ref UnityEngine.Color color);
            /*0x28d2280*/ void Clear();
            /*0x28d22bc*/ void SetZero();
            /*0x28d2334*/ void AddAmbientLight(UnityEngine.Color color);
            /*0x28d23cc*/ void AddDirectionalLight(UnityEngine.Vector3 direction, UnityEngine.Color color, float intensity);
            /*0x28d2498*/ void Evaluate(UnityEngine.Vector3[] directions, UnityEngine.Color[] results);
            /*0x28d2614*/ float get_Item(int rgb, int coefficient);
            /*0x28d2764*/ void set_Item(int rgb, int coefficient, float value);
            /*0x28d28b4*/ int GetHashCode();
            /*0x28d2a88*/ bool Equals(object other);
            /*0x28d2b40*/ bool Equals(UnityEngine.Rendering.SphericalHarmonicsL2 other);
        }

        enum ShaderKeywordType
        {
            None = 0,
            BuiltinDefault = 2,
            BuiltinExtra = 6,
            BuiltinAutoStripped = 10,
            UserDefined = 16,
            Plugin = 32,
        }

        struct ShaderKeyword
        {
            /*0x10*/ string m_Name;
            /*0x18*/ uint m_Index;
            /*0x1c*/ bool m_IsLocal;
            /*0x1d*/ bool m_IsCompute;
            /*0x1e*/ bool m_IsValid;

            static /*0x28d2e94*/ uint GetGlobalKeywordCount();
            static /*0x28d2ebc*/ uint GetGlobalKeywordIndex(string keyword);
            static /*0x28d2ef8*/ uint GetKeywordCount(UnityEngine.Shader shader);
            static /*0x28d2f34*/ uint GetKeywordIndex(UnityEngine.Shader shader, string keyword);
            static /*0x28d2f78*/ uint GetComputeShaderKeywordCount(UnityEngine.ComputeShader shader);
            static /*0x28d2fb4*/ uint GetComputeShaderKeywordIndex(UnityEngine.ComputeShader shader, string keyword);
            static /*0x28d2ff8*/ void CreateGlobalKeyword(string keyword);
            static /*0x28d3034*/ UnityEngine.Rendering.ShaderKeywordType GetGlobalShaderKeywordType(uint keyword);
            static /*0x28d3078*/ UnityEngine.Rendering.ShaderKeywordType GetGlobalKeywordType(UnityEngine.Rendering.ShaderKeyword index);
            static /*0x28d32e4*/ bool IsKeywordLocal(UnityEngine.Rendering.ShaderKeyword keyword);
            static /*0x28d330c*/ UnityEngine.Rendering.ShaderKeywordType GetKeywordType(UnityEngine.Shader shader, UnityEngine.Rendering.ShaderKeyword index);
            static /*0x28d3314*/ UnityEngine.Rendering.ShaderKeywordType GetKeywordType(UnityEngine.ComputeShader shader, UnityEngine.Rendering.ShaderKeyword index);
            static /*0x28d331c*/ string GetGlobalKeywordName(UnityEngine.Rendering.ShaderKeyword index);
            static /*0x28d3320*/ string GetKeywordName(UnityEngine.Shader shader, UnityEngine.Rendering.ShaderKeyword index);
            static /*0x28d3328*/ string GetKeywordName(UnityEngine.ComputeShader shader, UnityEngine.Rendering.ShaderKeyword index);
            /*0x28d30cc*/ ShaderKeyword(string keywordName);
            /*0x28d31ac*/ ShaderKeyword(UnityEngine.Shader shader, string keywordName);
            /*0x28d3248*/ ShaderKeyword(UnityEngine.ComputeShader shader, string keywordName);
            /*0x28d3070*/ string get_name();
            /*0x28d30c4*/ bool IsValid();
            /*0x28d32ec*/ bool IsValid(UnityEngine.ComputeShader shader);
            /*0x28d32f4*/ bool IsValid(UnityEngine.Shader shader);
            /*0x28d32fc*/ int get_index();
            /*0x28d3304*/ string ToString();
            /*0x28d3330*/ UnityEngine.Rendering.ShaderKeywordType GetKeywordType();
            /*0x28d3384*/ string GetKeywordName();
            /*0x28d338c*/ string GetName();
        }

        struct LocalKeyword : System.IEquatable<UnityEngine.Rendering.LocalKeyword>
        {
            /*0x10*/ UnityEngine.Rendering.LocalKeywordSpace m_SpaceInfo;
            /*0x18*/ string m_Name;
            /*0x20*/ uint m_Index;

            static /*0x28d3394*/ bool IsOverridable(UnityEngine.Rendering.LocalKeyword kw);
            static /*0x28d340c*/ uint GetShaderKeywordCount(UnityEngine.Shader shader);
            static /*0x28d3448*/ uint GetShaderKeywordIndex(UnityEngine.Shader shader, string keyword);
            static /*0x28d348c*/ uint GetComputeShaderKeywordCount(UnityEngine.ComputeShader shader);
            static /*0x28d34c8*/ uint GetComputeShaderKeywordIndex(UnityEngine.ComputeShader shader, string keyword);
            static /*0x28d350c*/ UnityEngine.Rendering.ShaderKeywordType GetKeywordType(UnityEngine.Rendering.LocalKeywordSpace spaceInfo, uint keyword);
            static /*0x28d3598*/ bool IsValid(UnityEngine.Rendering.LocalKeywordSpace spaceInfo, uint keyword);
            static /*0x28d3ba0*/ bool op_Equality(UnityEngine.Rendering.LocalKeyword lhs, UnityEngine.Rendering.LocalKeyword rhs);
            static /*0x28d3be8*/ bool op_Inequality(UnityEngine.Rendering.LocalKeyword lhs, UnityEngine.Rendering.LocalKeyword rhs);
            static /*0x28d33d0*/ bool IsOverridable_Injected(ref UnityEngine.Rendering.LocalKeyword kw);
            static /*0x28d3554*/ UnityEngine.Rendering.ShaderKeywordType GetKeywordType_Injected(ref UnityEngine.Rendering.LocalKeywordSpace spaceInfo, uint keyword);
            static /*0x28d35e4*/ bool IsValid_Injected(ref UnityEngine.Rendering.LocalKeywordSpace spaceInfo, uint keyword);
            /*0x28d371c*/ LocalKeyword(UnityEngine.Shader shader, string name);
            /*0x28d38ec*/ LocalKeyword(UnityEngine.ComputeShader shader, string name);
            /*0x28d3628*/ string get_name();
            /*0x28d3630*/ bool get_isOverridable();
            /*0x28d3680*/ bool get_isValid();
            /*0x28d36d0*/ UnityEngine.Rendering.ShaderKeywordType get_type();
            /*0x28d3abc*/ string ToString();
            /*0x28d3ac4*/ bool Equals(object o);
            /*0x28d3b50*/ bool Equals(UnityEngine.Rendering.LocalKeyword rhs);
            /*0x28d3c2c*/ int GetHashCode();
        }

        struct GlobalKeyword
        {
            /*0x10*/ string m_Name;
            /*0x18*/ uint m_Index;

            static /*0x28d3c9c*/ uint GetGlobalKeywordCount();
            static /*0x28d3cc4*/ uint GetGlobalKeywordIndex(string keyword);
            static /*0x28d3d00*/ void CreateGlobalKeyword(string keyword);
            static /*0x28d3d44*/ UnityEngine.Rendering.GlobalKeyword Create(string name);
            /*0x28d3da0*/ GlobalKeyword(string name);
            /*0x28d3d3c*/ string get_name();
            /*0x28d3ee0*/ string ToString();
        }

        struct PlatformKeywordSet
        {
            static int k_SizeInBits = 64;
            /*0x10*/ ulong m_Bits;

            /*0x28d3ee8*/ ulong ComputeKeywordMask(UnityEngine.Rendering.BuiltinShaderDefine define);
            /*0x28d3ef8*/ bool IsEnabled(UnityEngine.Rendering.BuiltinShaderDefine define);
            /*0x28d3f14*/ void Enable(UnityEngine.Rendering.BuiltinShaderDefine define);
            /*0x28d3f30*/ void Disable(UnityEngine.Rendering.BuiltinShaderDefine define);
        }

        struct PassIdentifier : System.IEquatable<UnityEngine.Rendering.PassIdentifier>
        {
            /*0x10*/ uint m_SubShaderIndex;
            /*0x14*/ uint m_PassIndex;

            static /*0x28d4010*/ bool op_Equality(UnityEngine.Rendering.PassIdentifier lhs, UnityEngine.Rendering.PassIdentifier rhs);
            static /*0x28d4030*/ bool op_Inequality(UnityEngine.Rendering.PassIdentifier lhs, UnityEngine.Rendering.PassIdentifier rhs);
            /*0x28d3f50*/ uint get_SubshaderIndex();
            /*0x28d3f58*/ uint get_PassIndex();
            /*0x28d3f60*/ bool Equals(object o);
            /*0x28d3fe8*/ bool Equals(UnityEngine.Rendering.PassIdentifier rhs);
            /*0x28d4050*/ int GetHashCode();
        }

        enum ShaderPropertyType
        {
            Color = 0,
            Vector = 1,
            Float = 2,
            Range = 3,
            Texture = 4,
            Int = 5,
        }

        enum ShaderPropertyFlags
        {
            None = 0,
            HideInInspector = 1,
            PerRendererData = 2,
            NoScaleOffset = 4,
            Normal = 8,
            HDR = 16,
            Gamma = 32,
            NonModifiableTextureData = 64,
            MainTexture = 128,
            MainColor = 256,
        }

        struct LocalKeywordSpace : System.IEquatable<UnityEngine.Rendering.LocalKeywordSpace>
        {
            /*0x10*/ nint m_KeywordSpace;

            static /*0x28d3b98*/ bool op_Equality(UnityEngine.Rendering.LocalKeywordSpace lhs, UnityEngine.Rendering.LocalKeywordSpace rhs);
            static /*0x28d4480*/ bool op_Inequality(UnityEngine.Rendering.LocalKeywordSpace lhs, UnityEngine.Rendering.LocalKeywordSpace rhs);
            static /*0x28d40d4*/ UnityEngine.Rendering.LocalKeyword[] GetKeywords_Injected(ref UnityEngine.Rendering.LocalKeywordSpace _unity_self);
            static /*0x28d414c*/ string[] GetKeywordNames_Injected(ref UnityEngine.Rendering.LocalKeywordSpace _unity_self);
            static /*0x28d41c4*/ uint GetKeywordCount_Injected(ref UnityEngine.Rendering.LocalKeywordSpace _unity_self);
            static /*0x28d4270*/ void GetKeyword_Injected(ref UnityEngine.Rendering.LocalKeywordSpace _unity_self, string name, ref UnityEngine.Rendering.LocalKeyword ret);
            /*0x28d4098*/ UnityEngine.Rendering.LocalKeyword[] GetKeywords();
            /*0x28d4110*/ string[] GetKeywordNames();
            /*0x28d4188*/ uint GetKeywordCount();
            /*0x28d4200*/ UnityEngine.Rendering.LocalKeyword GetKeyword(string name);
            /*0x28d42c4*/ UnityEngine.Rendering.LocalKeyword[] get_keywords();
            /*0x28d4300*/ string[] get_keywordNames();
            /*0x28d433c*/ uint get_keywordCount();
            /*0x28d4378*/ UnityEngine.Rendering.LocalKeyword FindKeyword(string name);
            /*0x28d43f8*/ bool Equals(object o);
            /*0x28d4474*/ bool Equals(UnityEngine.Rendering.LocalKeywordSpace rhs);
            /*0x28d3c7c*/ int GetHashCode();
        }

        struct ShaderKeywordSet
        {
            /*0x10*/ nint m_KeywordState;
            /*0x18*/ nint m_Shader;
            /*0x20*/ nint m_ComputeShader;
            /*0x28*/ ulong m_StateIndex;

            static /*0x28d449c*/ bool IsGlobalKeywordEnabled(UnityEngine.Rendering.ShaderKeywordSet state, uint index);
            static /*0x28d4524*/ bool IsKeywordEnabled(UnityEngine.Rendering.ShaderKeywordSet state, UnityEngine.Rendering.LocalKeywordSpace keywordSpace, uint index);
            static /*0x28d45d4*/ bool IsKeywordNameEnabled(UnityEngine.Rendering.ShaderKeywordSet state, string name);
            static /*0x28d465c*/ void EnableGlobalKeyword(UnityEngine.Rendering.ShaderKeywordSet state, uint index);
            static /*0x28d46e4*/ void EnableKeywordName(UnityEngine.Rendering.ShaderKeywordSet state, string name);
            static /*0x28d476c*/ void DisableGlobalKeyword(UnityEngine.Rendering.ShaderKeywordSet state, uint index);
            static /*0x28d47f4*/ void DisableKeywordName(UnityEngine.Rendering.ShaderKeywordSet state, string name);
            static /*0x28d487c*/ UnityEngine.Rendering.ShaderKeyword[] GetEnabledKeywords(UnityEngine.Rendering.ShaderKeywordSet state);
            static /*0x28d44e0*/ bool IsGlobalKeywordEnabled_Injected(ref UnityEngine.Rendering.ShaderKeywordSet state, uint index);
            static /*0x28d4580*/ bool IsKeywordEnabled_Injected(ref UnityEngine.Rendering.ShaderKeywordSet state, ref UnityEngine.Rendering.LocalKeywordSpace keywordSpace, uint index);
            static /*0x28d4618*/ bool IsKeywordNameEnabled_Injected(ref UnityEngine.Rendering.ShaderKeywordSet state, string name);
            static /*0x28d46a0*/ void EnableGlobalKeyword_Injected(ref UnityEngine.Rendering.ShaderKeywordSet state, uint index);
            static /*0x28d4728*/ void EnableKeywordName_Injected(ref UnityEngine.Rendering.ShaderKeywordSet state, string name);
            static /*0x28d47b0*/ void DisableGlobalKeyword_Injected(ref UnityEngine.Rendering.ShaderKeywordSet state, uint index);
            static /*0x28d4838*/ void DisableKeywordName_Injected(ref UnityEngine.Rendering.ShaderKeywordSet state, string name);
            static /*0x28d48b8*/ UnityEngine.Rendering.ShaderKeyword[] GetEnabledKeywords_Injected(ref UnityEngine.Rendering.ShaderKeywordSet state);
            /*0x28d48f4*/ void CheckKeywordCompatible(UnityEngine.Rendering.ShaderKeyword keyword);
            /*0x28d49c8*/ bool IsEnabled(UnityEngine.Rendering.ShaderKeyword keyword);
            /*0x28d4a28*/ bool IsEnabled(UnityEngine.Rendering.GlobalKeyword keyword);
            /*0x28d4a80*/ bool IsEnabled(UnityEngine.Rendering.LocalKeyword keyword);
            /*0x28d4ae4*/ void Enable(UnityEngine.Rendering.ShaderKeyword keyword);
            /*0x28d4b88*/ void Disable(UnityEngine.Rendering.ShaderKeyword keyword);
            /*0x28d4c24*/ UnityEngine.Rendering.ShaderKeyword[] GetShaderKeywords();
        }

        class SortingGroup : UnityEngine.Behaviour
        {
            static /*0x28d4c68*/ int get_invalidSortingGroupID();
            static /*0x28d4c90*/ void UpdateAllSortingGroups();
            static /*0x28d4cb8*/ UnityEngine.Rendering.SortingGroup GetSortingGroupByIndex(int index);
            /*0x28d4f28*/ SortingGroup();
            /*0x28d4cf4*/ string get_sortingLayerName();
            /*0x28d4d30*/ void set_sortingLayerName(string value);
            /*0x28d4d74*/ int get_sortingLayerID();
            /*0x28d4db0*/ void set_sortingLayerID(int value);
            /*0x28d4df4*/ int get_sortingOrder();
            /*0x28d4e30*/ void set_sortingOrder(int value);
            /*0x28d4e74*/ int get_sortingGroupID();
            /*0x28d4eb0*/ int get_sortingGroupOrder();
            /*0x28d4eec*/ int get_index();
        }

        namespace RendererUtils
        {
            enum RendererListStatus
            {
                kRendererListInvalid = -2,
                kRendererListProcessing = -1,
                kRendererListEmpty = 0,
                kRendererListPopulated = 1,
            }

            struct RendererList
            {
                static /*0x0*/ UnityEngine.Rendering.RendererUtils.RendererList nullRendererList;
                /*0x10*/ nuint context;
                /*0x18*/ uint index;
                /*0x1c*/ uint frame;

                static /*0x28d4fec*/ RendererList();
                static /*0x28d4fa4*/ bool get_isValid_Injected(ref UnityEngine.Rendering.RendererUtils.RendererList _unity_self);
                /*0x28d4fe0*/ RendererList(nuint ctx, uint indx);
                /*0x28d4f30*/ bool get_isValid();
            }

            struct RendererListDesc
            {
                /*0x10*/ UnityEngine.Rendering.SortingCriteria sortingCriteria;
                /*0x14*/ UnityEngine.Rendering.PerObjectData rendererConfiguration;
                /*0x18*/ UnityEngine.Rendering.RenderQueueRange renderQueueRange;
                /*0x20*/ System.Nullable<UnityEngine.Rendering.RenderStateBlock> stateBlock;
                /*0x90*/ UnityEngine.Material overrideMaterial;
                /*0x98*/ bool excludeObjectMotionVectors;
                /*0x9c*/ int layerMask;
                /*0xa0*/ int overrideMaterialPassIndex;
                /*0xa8*/ UnityEngine.Rendering.CullingResults <cullingResult>k__BackingField;
                /*0xb8*/ UnityEngine.Camera <camera>k__BackingField;
                /*0xc0*/ UnityEngine.Rendering.ShaderTagId <passName>k__BackingField;
                /*0xc8*/ UnityEngine.Rendering.ShaderTagId[] <passNames>k__BackingField;

                /*0x28d50b0*/ RendererListDesc(UnityEngine.Rendering.ShaderTagId passName, UnityEngine.Rendering.CullingResults cullingResult, UnityEngine.Camera camera);
                /*0x28d5104*/ RendererListDesc(UnityEngine.Rendering.ShaderTagId[] passNames, UnityEngine.Rendering.CullingResults cullingResult, UnityEngine.Camera camera);
                /*0x28d506c*/ UnityEngine.Rendering.CullingResults get_cullingResult();
                /*0x28d5078*/ void set_cullingResult(UnityEngine.Rendering.CullingResults value);
                /*0x28d5080*/ UnityEngine.Camera get_camera();
                /*0x28d5088*/ void set_camera(UnityEngine.Camera value);
                /*0x28d5090*/ UnityEngine.Rendering.ShaderTagId get_passName();
                /*0x28d5098*/ void set_passName(UnityEngine.Rendering.ShaderTagId value);
                /*0x28d50a0*/ UnityEngine.Rendering.ShaderTagId[] get_passNames();
                /*0x28d50a8*/ void set_passNames(UnityEngine.Rendering.ShaderTagId[] value);
                /*0x28d5198*/ bool IsValid();
            }

            struct RendererListParams
            {
                static /*0x0*/ UnityEngine.Rendering.ShaderTagId s_EmptyName;
                static /*0x8*/ UnityEngine.Rendering.RendererUtils.RendererListParams nullRendererList;
                /*0x10*/ bool <isValid>k__BackingField;
                /*0x18*/ UnityEngine.Rendering.CullingResults cullingResult;
                /*0x28*/ UnityEngine.Rendering.DrawingSettings drawSettings;
                /*0x164*/ UnityEngine.Rendering.FilteringSettings filteringSettings;
                /*0x17c*/ System.Nullable<UnityEngine.Rendering.RenderStateBlock> stateBlock;

                static /*0x28d5268*/ RendererListParams();
                static /*0x28ca980*/ UnityEngine.Rendering.RendererUtils.RendererListParams Create(ref UnityEngine.Rendering.RendererUtils.RendererListDesc desc);
                /*0x28d5254*/ bool get_isValid();
                /*0x28d525c*/ void set_isValid(bool value);
            }
        }
    }

    namespace SceneManagement
    {
        enum LoadSceneMode
        {
            Single = 0,
            Additive = 1,
        }

        enum LocalPhysicsMode
        {
            None = 0,
            Physics2D = 1,
            Physics3D = 2,
        }

        struct LoadSceneParameters
        {
            /*0x10*/ UnityEngine.SceneManagement.LoadSceneMode m_LoadSceneMode;
            /*0x14*/ UnityEngine.SceneManagement.LocalPhysicsMode m_LocalPhysicsMode;

            /*0x28d5310*/ LoadSceneParameters(UnityEngine.SceneManagement.LoadSceneMode mode);
            /*0x28d5318*/ LoadSceneParameters(UnityEngine.SceneManagement.LoadSceneMode mode, UnityEngine.SceneManagement.LocalPhysicsMode physicsMode);
            /*0x28d52f0*/ UnityEngine.SceneManagement.LoadSceneMode get_loadSceneMode();
            /*0x28d52f8*/ void set_loadSceneMode(UnityEngine.SceneManagement.LoadSceneMode value);
            /*0x28d5300*/ UnityEngine.SceneManagement.LocalPhysicsMode get_localPhysicsMode();
            /*0x28d5308*/ void set_localPhysicsMode(UnityEngine.SceneManagement.LocalPhysicsMode value);
        }

        struct CreateSceneParameters
        {
            /*0x10*/ UnityEngine.SceneManagement.LocalPhysicsMode m_LocalPhysicsMode;

            /*0x28d5330*/ CreateSceneParameters(UnityEngine.SceneManagement.LocalPhysicsMode physicsMode);
            /*0x28d5320*/ UnityEngine.SceneManagement.LocalPhysicsMode get_localPhysicsMode();
            /*0x28d5328*/ void set_localPhysicsMode(UnityEngine.SceneManagement.LocalPhysicsMode value);
        }

        enum UnloadSceneOptions
        {
            None = 0,
            UnloadAllEmbeddedSceneObjects = 1,
        }

        class SceneManager
        {
            static /*0x0*/ UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.LoadSceneMode> sceneLoaded;
            static /*0x8*/ UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene> sceneUnloaded;
            static /*0x10*/ UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene> activeSceneChanged;
            static /*0x18*/ bool s_AllowLoadScene;

            static /*0x28d7170*/ SceneManager();
            static /*0x28d5338*/ void add_sceneLoaded(UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.LoadSceneMode> value);
            static /*0x28d5428*/ void remove_sceneLoaded(UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.LoadSceneMode> value);
            static /*0x28d5518*/ void add_sceneUnloaded(UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene> value);
            static /*0x28d560c*/ void remove_sceneUnloaded(UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene> value);
            static /*0x28d5700*/ void add_activeSceneChanged(UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene> value);
            static /*0x28d57f4*/ void remove_activeSceneChanged(UnityEngine.Events.UnityAction<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene> value);
            static /*0x28d58e8*/ UnityEngine.SceneManagement.Scene[] GetAllScenes();
            static /*0x28d5ac8*/ UnityEngine.SceneManagement.Scene CreateScene(string sceneName);
            static /*0x28d5bbc*/ void LoadScene(string sceneName, UnityEngine.SceneManagement.LoadSceneMode mode);
            static /*0x28d5cc4*/ void LoadScene(string sceneName);
            static /*0x28d5c24*/ UnityEngine.SceneManagement.Scene LoadScene(string sceneName, UnityEngine.SceneManagement.LoadSceneParameters parameters);
            static /*0x28d5df8*/ void LoadScene(int sceneBuildIndex, UnityEngine.SceneManagement.LoadSceneMode mode);
            static /*0x28d5f00*/ void LoadScene(int sceneBuildIndex);
            static /*0x28d5e60*/ UnityEngine.SceneManagement.Scene LoadScene(int sceneBuildIndex, UnityEngine.SceneManagement.LoadSceneParameters parameters);
            static /*0x28d5f58*/ UnityEngine.AsyncOperation LoadSceneAsync(int sceneBuildIndex, UnityEngine.SceneManagement.LoadSceneMode mode);
            static /*0x28d602c*/ UnityEngine.AsyncOperation LoadSceneAsync(int sceneBuildIndex);
            static /*0x28d5fc0*/ UnityEngine.AsyncOperation LoadSceneAsync(int sceneBuildIndex, UnityEngine.SceneManagement.LoadSceneParameters parameters);
            static /*0x28d6084*/ UnityEngine.AsyncOperation LoadSceneAsync(string sceneName, UnityEngine.SceneManagement.LoadSceneMode mode);
            static /*0x28d6158*/ UnityEngine.AsyncOperation LoadSceneAsync(string sceneName);
            static /*0x28d60ec*/ UnityEngine.AsyncOperation LoadSceneAsync(string sceneName, UnityEngine.SceneManagement.LoadSceneParameters parameters);
            static /*0x28d61b0*/ bool UnloadScene(UnityEngine.SceneManagement.Scene scene);
            static /*0x28d6294*/ bool UnloadScene(int sceneBuildIndex);
            static /*0x28d6408*/ bool UnloadScene(string sceneName);
            static /*0x28d6480*/ UnityEngine.AsyncOperation UnloadSceneAsync(int sceneBuildIndex);
            static /*0x28d6508*/ UnityEngine.AsyncOperation UnloadSceneAsync(string sceneName);
            static /*0x28d657c*/ UnityEngine.AsyncOperation UnloadSceneAsync(UnityEngine.SceneManagement.Scene scene);
            static /*0x28d665c*/ UnityEngine.AsyncOperation UnloadSceneAsync(int sceneBuildIndex, UnityEngine.SceneManagement.UnloadSceneOptions options);
            static /*0x28d66e8*/ UnityEngine.AsyncOperation UnloadSceneAsync(string sceneName, UnityEngine.SceneManagement.UnloadSceneOptions options);
            static /*0x28d6760*/ UnityEngine.AsyncOperation UnloadSceneAsync(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.UnloadSceneOptions options);
            static /*0x28d67c4*/ void Internal_SceneLoaded(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode mode);
            static /*0x28d6874*/ void Internal_SceneUnloaded(UnityEngine.SceneManagement.Scene scene);
            static /*0x28d6910*/ void Internal_ActiveSceneChanged(UnityEngine.SceneManagement.Scene previousActiveScene, UnityEngine.SceneManagement.Scene newActiveScene);
            static /*0x28d5a14*/ int get_sceneCount();
            static /*0x28d69c0*/ int get_sceneCountInBuildSettings();
            static /*0x28d6ac8*/ UnityEngine.SceneManagement.Scene GetActiveScene();
            static /*0x28d6b80*/ bool SetActiveScene(UnityEngine.SceneManagement.Scene scene);
            static /*0x28d6c38*/ UnityEngine.SceneManagement.Scene GetSceneByPath(string scenePath);
            static /*0x28d6d08*/ UnityEngine.SceneManagement.Scene GetSceneByName(string name);
            static /*0x28d6dd8*/ UnityEngine.SceneManagement.Scene GetSceneByBuildIndex(int buildIndex);
            static /*0x28d5a3c*/ UnityEngine.SceneManagement.Scene GetSceneAt(int index);
            static /*0x28d5b28*/ UnityEngine.SceneManagement.Scene CreateScene(string sceneName, UnityEngine.SceneManagement.CreateSceneParameters parameters);
            static /*0x28d6208*/ bool UnloadSceneInternal(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.UnloadSceneOptions options);
            static /*0x28d65d4*/ UnityEngine.AsyncOperation UnloadSceneAsyncInternal(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.UnloadSceneOptions options);
            static /*0x28d5d1c*/ UnityEngine.AsyncOperation LoadSceneAsyncNameIndexInternal(string sceneName, int sceneBuildIndex, UnityEngine.SceneManagement.LoadSceneParameters parameters, bool mustCompleteNextFrame);
            static /*0x28d6320*/ UnityEngine.AsyncOperation UnloadSceneNameIndexInternal(string sceneName, int sceneBuildIndex, bool immediately, UnityEngine.SceneManagement.UnloadSceneOptions options, ref bool outSuccess);
            static /*0x28d6f68*/ void MergeScenes(UnityEngine.SceneManagement.Scene sourceScene, UnityEngine.SceneManagement.Scene destinationScene);
            static /*0x28d7034*/ void MoveGameObjectToScene(UnityEngine.GameObject go, UnityEngine.SceneManagement.Scene scene);
            static /*0x28d7100*/ UnityEngine.AsyncOperation LoadFirstScene_Internal(bool async);
            static /*0x28d6b44*/ void GetActiveScene_Injected(ref UnityEngine.SceneManagement.Scene ret);
            static /*0x28d6bfc*/ bool SetActiveScene_Injected(ref UnityEngine.SceneManagement.Scene scene);
            static /*0x28d6cc4*/ void GetSceneByPath_Injected(string scenePath, ref UnityEngine.SceneManagement.Scene ret);
            static /*0x28d6d94*/ void GetSceneByName_Injected(string name, ref UnityEngine.SceneManagement.Scene ret);
            static /*0x28d6e48*/ void GetSceneAt_Injected(int index, ref UnityEngine.SceneManagement.Scene ret);
            static /*0x28d6e8c*/ void CreateScene_Injected(string sceneName, ref UnityEngine.SceneManagement.CreateSceneParameters parameters, ref UnityEngine.SceneManagement.Scene ret);
            static /*0x28d6ee0*/ bool UnloadSceneInternal_Injected(ref UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.UnloadSceneOptions options);
            static /*0x28d6f24*/ UnityEngine.AsyncOperation UnloadSceneAsyncInternal_Injected(ref UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.UnloadSceneOptions options);
            static /*0x28d6ff0*/ void MergeScenes_Injected(ref UnityEngine.SceneManagement.Scene sourceScene, ref UnityEngine.SceneManagement.Scene destinationScene);
            static /*0x28d70bc*/ void MoveGameObjectToScene_Injected(UnityEngine.GameObject go, ref UnityEngine.SceneManagement.Scene scene);
            /*0x28d7168*/ SceneManager();
        }

        struct Scene
        {
            /*0x10*/ int m_Handle;

            static /*0x28d71bc*/ bool IsValidInternal(int sceneHandle);
            static /*0x28d71f8*/ string GetPathInternal(int sceneHandle);
            static /*0x28d7234*/ string GetNameInternal(int sceneHandle);
            static /*0x28d7270*/ void SetNameInternal(int sceneHandle, string name);
            static /*0x28d72b4*/ string GetGUIDInternal(int sceneHandle);
            static /*0x28d72f0*/ bool IsSubScene(int sceneHandle);
            static /*0x28d732c*/ void SetIsSubScene(int sceneHandle, bool value);
            static /*0x28d7370*/ bool GetIsLoadedInternal(int sceneHandle);
            static /*0x28d73ac*/ UnityEngine.SceneManagement.Scene.LoadingState GetLoadingStateInternal(int sceneHandle);
            static /*0x28d73e8*/ bool GetIsDirtyInternal(int sceneHandle);
            static /*0x28d7424*/ int GetDirtyID(int sceneHandle);
            static /*0x28d7460*/ int GetBuildIndexInternal(int sceneHandle);
            static /*0x28d749c*/ int GetRootCountInternal(int sceneHandle);
            static /*0x28d74d8*/ void GetRootGameObjectsInternal(int sceneHandle, object resultRootList);
            static /*0x28d7b78*/ bool op_Equality(UnityEngine.SceneManagement.Scene lhs, UnityEngine.SceneManagement.Scene rhs);
            static /*0x28d7b84*/ bool op_Inequality(UnityEngine.SceneManagement.Scene lhs, UnityEngine.SceneManagement.Scene rhs);
            /*0x28d751c*/ Scene(int handle);
            /*0x28d7524*/ int get_handle();
            /*0x28d752c*/ UnityEngine.SceneManagement.Scene.LoadingState get_loadingState();
            /*0x28d7568*/ string get_guid();
            /*0x28d75a4*/ bool IsValid();
            /*0x28d75e0*/ string get_path();
            /*0x28d761c*/ string get_name();
            /*0x28d7658*/ void set_name(string value);
            /*0x28d769c*/ bool get_isLoaded();
            /*0x28d76d8*/ int get_buildIndex();
            /*0x28d7714*/ bool get_isDirty();
            /*0x28d7750*/ int get_dirtyID();
            /*0x28d778c*/ int get_rootCount();
            /*0x28d77c8*/ bool get_isSubScene();
            /*0x28d7804*/ void set_isSubScene(bool value);
            /*0x28d7848*/ UnityEngine.GameObject[] GetRootGameObjects();
            /*0x28d7920*/ void GetRootGameObjects(System.Collections.Generic.List<UnityEngine.GameObject> rootGameObjects);
            /*0x28d7b90*/ int GetHashCode();
            /*0x28d7b98*/ bool Equals(object other);

            enum LoadingState
            {
                NotLoaded = 0,
                Loading = 1,
                Loaded = 2,
                Unloading = 3,
            }
        }

        class SceneUtility
        {
            static /*0x28d7c10*/ string GetScenePathByBuildIndex(int buildIndex);
            static /*0x28d7c4c*/ int GetBuildIndexByScenePath(string scenePath);
        }

        class SceneManagerAPIInternal
        {
            static /*0x28d7c88*/ int GetNumScenesInBuildSettings();
            static /*0x28d7cb0*/ UnityEngine.SceneManagement.Scene GetSceneByBuildIndex(int buildIndex);
            static /*0x28d7d40*/ UnityEngine.AsyncOperation LoadSceneAsyncNameIndexInternal(string sceneName, int sceneBuildIndex, UnityEngine.SceneManagement.LoadSceneParameters parameters, bool mustCompleteNextFrame);
            static /*0x28d7dfc*/ UnityEngine.AsyncOperation UnloadSceneNameIndexInternal(string sceneName, int sceneBuildIndex, bool immediately, UnityEngine.SceneManagement.UnloadSceneOptions options, ref bool outSuccess);
            static /*0x28d7cfc*/ void GetSceneByBuildIndex_Injected(int buildIndex, ref UnityEngine.SceneManagement.Scene ret);
            static /*0x28d7da0*/ UnityEngine.AsyncOperation LoadSceneAsyncNameIndexInternal_Injected(string sceneName, int sceneBuildIndex, ref UnityEngine.SceneManagement.LoadSceneParameters parameters, bool mustCompleteNextFrame);
        }

        class SceneManagerAPI
        {
            static /*0x0*/ UnityEngine.SceneManagement.SceneManagerAPI s_DefaultAPI;
            static /*0x8*/ UnityEngine.SceneManagement.SceneManagerAPI <overrideAPI>k__BackingField;

            static /*0x28d806c*/ SceneManagerAPI();
            static /*0x28d6a20*/ UnityEngine.SceneManagement.SceneManagerAPI get_ActiveAPI();
            static /*0x28d7e68*/ UnityEngine.SceneManagement.SceneManagerAPI get_overrideAPI();
            static /*0x28d7ec0*/ void set_overrideAPI(UnityEngine.SceneManagement.SceneManagerAPI value);
            /*0x28d7f1c*/ SceneManagerAPI();
            /*0x28d7f24*/ int GetNumScenesInBuildSettings();
            /*0x28d7f4c*/ UnityEngine.SceneManagement.Scene GetSceneByBuildIndex(int buildIndex);
            /*0x28d7f98*/ UnityEngine.AsyncOperation LoadSceneAsyncByNameOrIndex(string sceneName, int sceneBuildIndex, UnityEngine.SceneManagement.LoadSceneParameters parameters, bool mustCompleteNextFrame);
            /*0x28d7ff8*/ UnityEngine.AsyncOperation UnloadSceneAsyncByNameOrIndex(string sceneName, int sceneBuildIndex, bool immediately, UnityEngine.SceneManagement.UnloadSceneOptions options, ref bool outSuccess);
            /*0x28d8064*/ UnityEngine.AsyncOperation LoadFirstScene(bool mustLoadAsync);
        }
    }

    namespace IO
    {
        enum ThreadIORestrictionMode
        {
            Allowed = 0,
            TreatAsError = 1,
        }

        class File
        {
            static /*0x28d80d0*/ ulong get_totalOpenCalls();
            static /*0x28d8120*/ ulong get_totalCloseCalls();
            static /*0x28d8170*/ ulong get_totalReadCalls();
            static /*0x28d81c0*/ ulong get_totalWriteCalls();
            static /*0x28d8210*/ ulong get_totalSeekCalls();
            static /*0x28d8260*/ ulong get_totalZeroSeekCalls();
            static /*0x28d82b0*/ ulong get_totalFilesOpened();
            static /*0x28d8300*/ ulong get_totalFilesClosed();
            static /*0x28d8350*/ ulong get_totalBytesRead();
            static /*0x28d83a0*/ ulong get_totalBytesWritten();
            static /*0x28d83f0*/ void set_recordZeroSeeks(bool value);
            static /*0x28d8468*/ bool get_recordZeroSeeks();
            static /*0x28d84b8*/ UnityEngine.IO.ThreadIORestrictionMode get_MainThreadIORestrictionMode();
            static /*0x28d8508*/ void set_MainThreadIORestrictionMode(UnityEngine.IO.ThreadIORestrictionMode value);
            static /*0x28d842c*/ void SetRecordZeroSeeks(bool enable);
            static /*0x28d8490*/ bool GetRecordZeroSeeks();
            static /*0x28d80f8*/ ulong GetTotalOpenCalls();
            static /*0x28d8148*/ ulong GetTotalCloseCalls();
            static /*0x28d8198*/ ulong GetTotalReadCalls();
            static /*0x28d81e8*/ ulong GetTotalWriteCalls();
            static /*0x28d8238*/ ulong GetTotalSeekCalls();
            static /*0x28d8288*/ ulong GetTotalZeroSeekCalls();
            static /*0x28d82d8*/ ulong GetTotalFilesOpened();
            static /*0x28d8328*/ ulong GetTotalFilesClosed();
            static /*0x28d8378*/ ulong GetTotalBytesRead();
            static /*0x28d83c8*/ ulong GetTotalBytesWritten();
            static /*0x28d8544*/ void SetMainThreadFileIORestriction(UnityEngine.IO.ThreadIORestrictionMode mode);
            static /*0x28d84e0*/ UnityEngine.IO.ThreadIORestrictionMode GetMainThreadFileIORestriction();
        }
    }

    namespace Serialization
    {
        class UnitySurrogateSelector : System.Runtime.Serialization.ISurrogateSelector
        {
            /*0x28d87fc*/ UnitySurrogateSelector();
            /*0x28d8580*/ System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type type, System.Runtime.Serialization.StreamingContext context, ref System.Runtime.Serialization.ISurrogateSelector selector);
            /*0x28d877c*/ void ChainSelector(System.Runtime.Serialization.ISurrogateSelector selector);
            /*0x28d87bc*/ System.Runtime.Serialization.ISurrogateSelector GetNextSelector();
        }

        class ListSerializationSurrogate : System.Runtime.Serialization.ISerializationSurrogate
        {
            static /*0x0*/ System.Runtime.Serialization.ISerializationSurrogate Default;

            static /*0x28d8e70*/ ListSerializationSurrogate();
            static /*0x28d8990*/ System.Array ArrayFromGenericList(System.Collections.IList list);
            /*0x28d8e68*/ ListSerializationSurrogate();
            /*0x28d8804*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x28d8ae0*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);
        }

        class DictionarySerializationSurrogate<TKey, TValue> : System.Runtime.Serialization.ISerializationSurrogate
        {
            DictionarySerializationSurrogate();
            void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);
        }

        class FormerlySerializedAsAttribute : System.Attribute
        {
            /*0x10*/ string m_oldName;

            /*0x28d8ed4*/ FormerlySerializedAsAttribute(string oldName);
            /*0x28d8efc*/ string get_oldName();
        }
    }

    namespace Experimental
    {
        namespace U2D
        {
            struct SpriteIntermediateRendererInfo
            {
                /*0x10*/ int SpriteID;
                /*0x14*/ int TextureID;
                /*0x18*/ int MaterialID;
                /*0x1c*/ UnityEngine.Color Color;
                /*0x2c*/ UnityEngine.Matrix4x4 Transform;
                /*0x6c*/ UnityEngine.Bounds Bounds;
                /*0x84*/ int Layer;
                /*0x88*/ int SortingLayer;
                /*0x8c*/ int SortingOrder;
                /*0x90*/ ulong SceneCullingMask;
                /*0x98*/ nint IndexData;
                /*0xa0*/ nint VertexData;
                /*0xa8*/ int IndexCount;
                /*0xac*/ int VertexCount;
                /*0xb0*/ int ShaderChannelMask;
            }

            class SpriteRendererGroup
            {
                static /*0x28d8f04*/ void AddRenderers(Unity.Collections.NativeArray<UnityEngine.Experimental.U2D.SpriteIntermediateRendererInfo> renderers);
                static /*0x28d8f8c*/ void AddRenderers(void* renderers, int count);
                static /*0x28d8fd0*/ void Clear();
                /*0x28d8ff8*/ SpriteRendererGroup();
            }
        }

        namespace GlobalIllumination
        {
            class RenderSettings
            {
                static /*0x28d9000*/ bool get_useRadianceAmbientProbe();
                static /*0x28d9028*/ void set_useRadianceAmbientProbe(bool value);
                /*0x28d9064*/ RenderSettings();
            }

            enum LightType
            {
                Directional = 0,
                Point = 1,
                Spot = 2,
                Rectangle = 3,
                Disc = 4,
                SpotPyramidShape = 5,
                SpotBoxShape = 6,
            }

            enum LightMode
            {
                Realtime = 0,
                Mixed = 1,
                Baked = 2,
                Unknown = 3,
            }

            enum FalloffType
            {
                InverseSquared = 0,
                InverseSquaredNoRangeAttenuation = 1,
                Linear = 2,
                Legacy = 3,
                Undefined = 4,
            }

            enum AngularFalloffType
            {
                LUT = 0,
                AnalyticAndInnerAngle = 1,
            }

            struct LinearColor
            {
                /*0x10*/ float m_red;
                /*0x14*/ float m_green;
                /*0x18*/ float m_blue;
                /*0x1c*/ float m_intensity;

                static /*0x28d9350*/ UnityEngine.Experimental.GlobalIllumination.LinearColor Convert(UnityEngine.Color color, float intensity);
                static /*0x28d9688*/ UnityEngine.Experimental.GlobalIllumination.LinearColor Black();
                /*0x28d906c*/ float get_red();
                /*0x28d9074*/ void set_red(float value);
                /*0x28d9128*/ float get_green();
                /*0x28d9130*/ void set_green(float value);
                /*0x28d91e4*/ float get_blue();
                /*0x28d91ec*/ void set_blue(float value);
                /*0x28d92a0*/ float get_intensity();
                /*0x28d92a8*/ void set_intensity(float value);
            }

            struct DirectionalLight
            {
                /*0x10*/ int instanceID;
                /*0x14*/ bool shadow;
                /*0x15*/ UnityEngine.Experimental.GlobalIllumination.LightMode mode;
                /*0x18*/ UnityEngine.Vector3 position;
                /*0x24*/ UnityEngine.Quaternion orientation;
                /*0x34*/ UnityEngine.Experimental.GlobalIllumination.LinearColor color;
                /*0x44*/ UnityEngine.Experimental.GlobalIllumination.LinearColor indirectColor;
                /*0x54*/ float penumbraWidthRadian;
                /*0x58*/ UnityEngine.Vector3 direction;
            }

            struct PointLight
            {
                /*0x10*/ int instanceID;
                /*0x14*/ bool shadow;
                /*0x15*/ UnityEngine.Experimental.GlobalIllumination.LightMode mode;
                /*0x18*/ UnityEngine.Vector3 position;
                /*0x24*/ UnityEngine.Quaternion orientation;
                /*0x34*/ UnityEngine.Experimental.GlobalIllumination.LinearColor color;
                /*0x44*/ UnityEngine.Experimental.GlobalIllumination.LinearColor indirectColor;
                /*0x54*/ float range;
                /*0x58*/ float sphereRadius;
                /*0x5c*/ UnityEngine.Experimental.GlobalIllumination.FalloffType falloff;
            }

            struct SpotLight
            {
                /*0x10*/ int instanceID;
                /*0x14*/ bool shadow;
                /*0x15*/ UnityEngine.Experimental.GlobalIllumination.LightMode mode;
                /*0x18*/ UnityEngine.Vector3 position;
                /*0x24*/ UnityEngine.Quaternion orientation;
                /*0x34*/ UnityEngine.Experimental.GlobalIllumination.LinearColor color;
                /*0x44*/ UnityEngine.Experimental.GlobalIllumination.LinearColor indirectColor;
                /*0x54*/ float range;
                /*0x58*/ float sphereRadius;
                /*0x5c*/ float coneAngle;
                /*0x60*/ float innerConeAngle;
                /*0x64*/ UnityEngine.Experimental.GlobalIllumination.FalloffType falloff;
                /*0x65*/ UnityEngine.Experimental.GlobalIllumination.AngularFalloffType angularFalloff;
            }

            struct RectangleLight
            {
                /*0x10*/ int instanceID;
                /*0x14*/ bool shadow;
                /*0x15*/ UnityEngine.Experimental.GlobalIllumination.LightMode mode;
                /*0x18*/ UnityEngine.Vector3 position;
                /*0x24*/ UnityEngine.Quaternion orientation;
                /*0x34*/ UnityEngine.Experimental.GlobalIllumination.LinearColor color;
                /*0x44*/ UnityEngine.Experimental.GlobalIllumination.LinearColor indirectColor;
                /*0x54*/ float range;
                /*0x58*/ float width;
                /*0x5c*/ float height;
                /*0x60*/ UnityEngine.Experimental.GlobalIllumination.FalloffType falloff;
            }

            struct DiscLight
            {
                /*0x10*/ int instanceID;
                /*0x14*/ bool shadow;
                /*0x15*/ UnityEngine.Experimental.GlobalIllumination.LightMode mode;
                /*0x18*/ UnityEngine.Vector3 position;
                /*0x24*/ UnityEngine.Quaternion orientation;
                /*0x34*/ UnityEngine.Experimental.GlobalIllumination.LinearColor color;
                /*0x44*/ UnityEngine.Experimental.GlobalIllumination.LinearColor indirectColor;
                /*0x54*/ float range;
                /*0x58*/ float radius;
                /*0x5c*/ UnityEngine.Experimental.GlobalIllumination.FalloffType falloff;
            }

            struct SpotLightBoxShape
            {
                /*0x10*/ int instanceID;
                /*0x14*/ bool shadow;
                /*0x15*/ UnityEngine.Experimental.GlobalIllumination.LightMode mode;
                /*0x18*/ UnityEngine.Vector3 position;
                /*0x24*/ UnityEngine.Quaternion orientation;
                /*0x34*/ UnityEngine.Experimental.GlobalIllumination.LinearColor color;
                /*0x44*/ UnityEngine.Experimental.GlobalIllumination.LinearColor indirectColor;
                /*0x54*/ float range;
                /*0x58*/ float width;
                /*0x5c*/ float height;
            }

            struct SpotLightPyramidShape
            {
                /*0x10*/ int instanceID;
                /*0x14*/ bool shadow;
                /*0x15*/ UnityEngine.Experimental.GlobalIllumination.LightMode mode;
                /*0x18*/ UnityEngine.Vector3 position;
                /*0x24*/ UnityEngine.Quaternion orientation;
                /*0x34*/ UnityEngine.Experimental.GlobalIllumination.LinearColor color;
                /*0x44*/ UnityEngine.Experimental.GlobalIllumination.LinearColor indirectColor;
                /*0x54*/ float range;
                /*0x58*/ float angle;
                /*0x5c*/ float aspectRatio;
                /*0x60*/ UnityEngine.Experimental.GlobalIllumination.FalloffType falloff;
            }

            struct Cookie
            {
                /*0x10*/ int instanceID;
                /*0x14*/ float scale;
                /*0x18*/ UnityEngine.Vector2 sizes;

                static /*0x28d969c*/ UnityEngine.Experimental.GlobalIllumination.Cookie Defaults();
            }

            struct LightDataGI
            {
                /*0x10*/ int instanceID;
                /*0x14*/ int cookieID;
                /*0x18*/ float cookieScale;
                /*0x1c*/ UnityEngine.Experimental.GlobalIllumination.LinearColor color;
                /*0x2c*/ UnityEngine.Experimental.GlobalIllumination.LinearColor indirectColor;
                /*0x3c*/ UnityEngine.Quaternion orientation;
                /*0x4c*/ UnityEngine.Vector3 position;
                /*0x58*/ float range;
                /*0x5c*/ float coneAngle;
                /*0x60*/ float innerConeAngle;
                /*0x64*/ float shape0;
                /*0x68*/ float shape1;
                /*0x6c*/ UnityEngine.Experimental.GlobalIllumination.LightType type;
                /*0x6d*/ UnityEngine.Experimental.GlobalIllumination.LightMode mode;
                /*0x6e*/ byte shadow;
                /*0x6f*/ UnityEngine.Experimental.GlobalIllumination.FalloffType falloff;

                /*0x28d96a8*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.DirectionalLight light, ref UnityEngine.Experimental.GlobalIllumination.Cookie cookie);
                /*0x28d9710*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.PointLight light, ref UnityEngine.Experimental.GlobalIllumination.Cookie cookie);
                /*0x28d9780*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.SpotLight light, ref UnityEngine.Experimental.GlobalIllumination.Cookie cookie);
                /*0x28d97f8*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.RectangleLight light, ref UnityEngine.Experimental.GlobalIllumination.Cookie cookie);
                /*0x28d9868*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.DiscLight light, ref UnityEngine.Experimental.GlobalIllumination.Cookie cookie);
                /*0x28d98d8*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape light, ref UnityEngine.Experimental.GlobalIllumination.Cookie cookie);
                /*0x28d9948*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape light, ref UnityEngine.Experimental.GlobalIllumination.Cookie cookie);
                /*0x28d99b8*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.DirectionalLight light);
                /*0x28d9a24*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.PointLight light);
                /*0x28d9a98*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.SpotLight light);
                /*0x28d9ac0*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.RectangleLight light);
                /*0x28d9b34*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.DiscLight light);
                /*0x28d9ba8*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape light);
                /*0x28d9c1c*/ void Init(ref UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape light);
                /*0x28d9c90*/ void InitNoBake(int lightInstanceID);
            }

            class LightmapperUtils
            {
                static /*0x28daca0*/ UnityEngine.Experimental.GlobalIllumination.LightMode Extract(UnityEngine.LightmapBakeType baketype);
                static /*0x28dacc0*/ UnityEngine.Experimental.GlobalIllumination.LinearColor ExtractIndirect(UnityEngine.Light l);
                static /*0x28dad3c*/ float ExtractInnerCone(UnityEngine.Light l);
                static /*0x28dad90*/ UnityEngine.Color ExtractColorTemperature(UnityEngine.Light l);
                static /*0x28dae04*/ void ApplyColorTemperature(UnityEngine.Color cct, ref UnityEngine.Experimental.GlobalIllumination.LinearColor lightColor);
                static /*0x28dae7c*/ void Extract(UnityEngine.Light l, ref UnityEngine.Experimental.GlobalIllumination.DirectionalLight dir);
                static /*0x28db018*/ void Extract(UnityEngine.Light l, ref UnityEngine.Experimental.GlobalIllumination.PointLight point);
                static /*0x28db1cc*/ void Extract(UnityEngine.Light l, ref UnityEngine.Experimental.GlobalIllumination.SpotLight spot);
                static /*0x28db3a8*/ void Extract(UnityEngine.Light l, ref UnityEngine.Experimental.GlobalIllumination.RectangleLight rect);
                static /*0x28db55c*/ void Extract(UnityEngine.Light l, ref UnityEngine.Experimental.GlobalIllumination.DiscLight disc);
                static /*0x28db710*/ void Extract(UnityEngine.Light l, ref UnityEngine.Experimental.GlobalIllumination.Cookie cookie);
            }

            class Lightmapping
            {
                static /*0x0*/ UnityEngine.Experimental.GlobalIllumination.Lightmapping.RequestLightsDelegate s_DefaultDelegate;
                static /*0x8*/ UnityEngine.Experimental.GlobalIllumination.Lightmapping.RequestLightsDelegate s_RequestLightsDelegate;

                static /*0x28dba4c*/ Lightmapping();
                static /*0x28db854*/ void SetDelegate(UnityEngine.Experimental.GlobalIllumination.Lightmapping.RequestLightsDelegate del);
                static /*0x28db8cc*/ UnityEngine.Experimental.GlobalIllumination.Lightmapping.RequestLightsDelegate GetDelegate();
                static /*0x28db924*/ void ResetDelegate();
                static /*0x28db980*/ void RequestLights(UnityEngine.Light[] lights, nint outLightsPtr, int outLightsCount);

                class RequestLightsDelegate : System.MulticastDelegate
                {
                    /*0x28dbb1c*/ RequestLightsDelegate(object object, nint method);
                    /*0x28dbbf4*/ void Invoke(UnityEngine.Light[] requests, Unity.Collections.NativeArray<UnityEngine.Experimental.GlobalIllumination.LightDataGI> lightsOutput);
                }

                class <>c
                {
                    static /*0x0*/ UnityEngine.Experimental.GlobalIllumination.Lightmapping.<> <>9;

                    static /*0x28dbc08*/ <>c();
                    /*0x28dbc6c*/ <>c();
                    /*0x28dbc74*/ void <.cctor>b__7_0(UnityEngine.Light[] requests, Unity.Collections.NativeArray<UnityEngine.Experimental.GlobalIllumination.LightDataGI> lightsOutput);
                }
            }
        }

        namespace Rendering
        {
            enum RayTracingSubMeshFlags
            {
                Disabled = 0,
                Enabled = 1,
                ClosestHitOnly = 2,
                UniqueAnyHitCalls = 4,
            }

            class RayTracingAccelerationStructure : System.IDisposable
            {
                /*0x10*/ nint m_Ptr;

                static /*0x28dc0b4*/ nint Create(UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RASSettings desc);
                static /*0x28dc040*/ void Destroy(UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure accelStruct);
                static /*0x28dc120*/ nint Create_Injected(ref UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RASSettings desc);
                /*0x28dc07c*/ RayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RASSettings settings);
                /*0x28dc0f8*/ RayTracingAccelerationStructure();
                /*0x28dbe94*/ void Finalize();
                /*0x28dbfdc*/ void Dispose();
                /*0x28dbf5c*/ void Dispose(bool disposing);
                /*0x28dc15c*/ void Release();
                /*0x28dc160*/ void Build();
                /*0x28dc208*/ void Update();
                /*0x28dc1b4*/ void Build(UnityEngine.Vector3 relativeOrigin);
                /*0x28dc2a0*/ void Update(UnityEngine.Vector3 relativeOrigin);
                /*0x28dc338*/ void AddInstance(UnityEngine.Renderer targetRenderer, bool[] subMeshMask, bool[] subMeshTransparencyFlags, bool enableTriangleCulling, bool frontTriangleCounterClockwise, uint mask, uint id);
                /*0x28dc3c4*/ void AddInstance(UnityEngine.Renderer targetRenderer, UnityEngine.Experimental.Rendering.RayTracingSubMeshFlags[] subMeshFlags, bool enableTriangleCulling, bool frontTriangleCounterClockwise, uint mask, uint id);
                /*0x28dc4cc*/ void RemoveInstance(UnityEngine.Renderer targetRenderer);
                /*0x28dc510*/ void AddInstance(UnityEngine.GraphicsBuffer aabbBuffer, uint numElements, UnityEngine.Material material, bool isCutOff, bool enableTriangleCulling, bool frontTriangleCounterClockwise, uint mask, bool reuseBounds, uint id);
                /*0x28dc6bc*/ void AddInstance(UnityEngine.GraphicsBuffer aabbBuffer, uint numElements, UnityEngine.Material material, UnityEngine.Matrix4x4 instanceTransform, bool isCutOff, bool enableTriangleCulling, bool frontTriangleCounterClockwise, uint mask, bool reuseBounds, uint id);
                /*0x28dc608*/ void AddInstance_Procedural(UnityEngine.GraphicsBuffer aabbBuffer, uint numElements, UnityEngine.Material material, UnityEngine.Matrix4x4 instanceTransform, bool isCutOff, bool enableTriangleCulling, bool frontTriangleCounterClockwise, uint mask, bool reuseBounds, uint id);
                /*0x28dc838*/ void UpdateInstanceTransform(UnityEngine.Renderer renderer);
                /*0x28dc87c*/ void UpdateInstanceMask(UnityEngine.Renderer renderer, uint mask);
                /*0x28dc8d0*/ void UpdateInstanceID(UnityEngine.Renderer renderer, uint instanceID);
                /*0x28dc924*/ ulong GetSize();
                /*0x28dc960*/ uint GetInstanceCount();
                /*0x28dc448*/ void AddInstanceSubMeshFlagsArray(UnityEngine.Renderer targetRenderer, UnityEngine.Experimental.Rendering.RayTracingSubMeshFlags[] subMeshFlags, bool enableTriangleCulling, bool frontTriangleCounterClockwise, uint mask, uint id);
                /*0x28dc25c*/ void Build_Injected(ref UnityEngine.Vector3 relativeOrigin);
                /*0x28dc2f4*/ void Update_Injected(ref UnityEngine.Vector3 relativeOrigin);
                /*0x28dc784*/ void AddInstance_Procedural_Injected(UnityEngine.GraphicsBuffer aabbBuffer, uint numElements, UnityEngine.Material material, ref UnityEngine.Matrix4x4 instanceTransform, bool isCutOff, bool enableTriangleCulling, bool frontTriangleCounterClockwise, uint mask, bool reuseBounds, uint id);

                enum RayTracingModeMask
                {
                    Nothing = 0,
                    Static = 2,
                    DynamicTransform = 4,
                    DynamicGeometry = 8,
                    Everything = 14,
                }

                enum ManagementMode
                {
                    Manual = 0,
                    Automatic = 1,
                }

                struct RASSettings
                {
                    /*0x10*/ UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.ManagementMode managementMode;
                    /*0x14*/ UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RayTracingModeMask rayTracingModeMask;
                    /*0x18*/ int layerMask;
                }
            }

            struct ShaderWarmupSetup
            {
                /*0x10*/ UnityEngine.Rendering.VertexAttributeDescriptor[] vdecl;
            }

            class ShaderWarmup
            {
                static /*0x28dc99c*/ void WarmupShader(UnityEngine.Shader shader, UnityEngine.Experimental.Rendering.ShaderWarmupSetup setup);
                static /*0x28dca28*/ void WarmupShaderFromCollection(UnityEngine.ShaderVariantCollection collection, UnityEngine.Shader shader, UnityEngine.Experimental.Rendering.ShaderWarmupSetup setup);
                static /*0x28dc9e4*/ void WarmupShader_Injected(UnityEngine.Shader shader, ref UnityEngine.Experimental.Rendering.ShaderWarmupSetup setup);
                static /*0x28dca80*/ void WarmupShaderFromCollection_Injected(UnityEngine.ShaderVariantCollection collection, UnityEngine.Shader shader, ref UnityEngine.Experimental.Rendering.ShaderWarmupSetup setup);
            }

            class GraphicsFormatUtility
            {
                static /*0x0*/ UnityEngine.Experimental.Rendering.GraphicsFormat[] tableNoStencil;
                static /*0x8*/ UnityEngine.Experimental.Rendering.GraphicsFormat[] tableStencil;

                static /*0x28dde40*/ GraphicsFormatUtility();
                static /*0x28dcad4*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetFormat(UnityEngine.Texture texture);
                static /*0x28dcb10*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetGraphicsFormat(UnityEngine.TextureFormat format, bool isSRGB);
                static /*0x28dcb94*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetGraphicsFormat_Native_TextureFormat(UnityEngine.TextureFormat format, bool isSRGB);
                static /*0x28dcbd8*/ UnityEngine.TextureFormat GetTextureFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dcc4c*/ UnityEngine.TextureFormat GetTextureFormat_Native_GraphicsFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dcc88*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetGraphicsFormat(UnityEngine.RenderTextureFormat format, bool isSRGB);
                static /*0x28dcd0c*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetGraphicsFormat_Native_RenderTextureFormat(UnityEngine.RenderTextureFormat format, bool isSRGB);
                static /*0x28dcd50*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetGraphicsFormat(UnityEngine.RenderTextureFormat format, UnityEngine.RenderTextureReadWrite readWrite);
                static /*0x28dcdd8*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetDepthStencilFormatFromBitsLegacy_Native(int minimumDepthBits);
                static /*0x28dce14*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetDepthStencilFormat(int minimumDepthBits);
                static /*0x28dce88*/ int GetDepthBits(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dcec4*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetDepthStencilFormat(int minimumDepthBits, int minimumStencilBits);
                static /*0x28dd0b8*/ bool IsSRGBFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd0f4*/ bool IsSwizzleFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd130*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetSRGBFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd16c*/ UnityEngine.Experimental.Rendering.GraphicsFormat GetLinearFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd1a8*/ UnityEngine.RenderTextureFormat GetRenderTextureFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd1e4*/ uint GetColorComponentCount(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd220*/ uint GetAlphaComponentCount(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd25c*/ uint GetComponentCount(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd298*/ string GetFormatString(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd2d4*/ bool IsCompressedFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd310*/ bool IsCompressedTextureFormat(UnityEngine.TextureFormat format);
                static /*0x28dd34c*/ bool CanDecompressFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, bool wholeImage);
                static /*0x28dd390*/ bool CanDecompressFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd408*/ bool IsPackedFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd444*/ bool Is16BitPackedFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd480*/ UnityEngine.Experimental.Rendering.GraphicsFormat ConvertToAlphaFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd4bc*/ bool IsAlphaOnlyFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd4f8*/ bool IsAlphaTestFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd534*/ bool HasAlphaChannel(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd570*/ bool IsDepthFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd5ac*/ bool IsStencilFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd5e8*/ bool IsIEEE754Format(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd624*/ bool IsFloatFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd660*/ bool IsHalfFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd69c*/ bool IsUnsignedFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd6d8*/ bool IsSignedFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd714*/ bool IsNormFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd750*/ bool IsUNormFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd78c*/ bool IsSNormFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd7c8*/ bool IsIntegerFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd804*/ bool IsUIntFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd840*/ bool IsSIntFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd87c*/ bool IsXRFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd8b8*/ bool IsDXTCFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd8f4*/ bool IsRGTCFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd930*/ bool IsBPTCFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd96c*/ bool IsBCFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd9a8*/ bool IsPVRTCFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dd9e4*/ bool IsETCFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dda20*/ bool IsEACFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dda5c*/ bool IsASTCFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28dda98*/ bool IsCrunchFormat(UnityEngine.TextureFormat format);
                static /*0x28ddabc*/ UnityEngine.Rendering.FormatSwizzle GetSwizzleR(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28ddaf8*/ UnityEngine.Rendering.FormatSwizzle GetSwizzleG(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28ddb34*/ UnityEngine.Rendering.FormatSwizzle GetSwizzleB(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28ddb70*/ UnityEngine.Rendering.FormatSwizzle GetSwizzleA(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28ddbac*/ uint GetBlockSize(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28ddbe8*/ uint GetBlockWidth(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28ddc24*/ uint GetBlockHeight(UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28ddc60*/ uint ComputeMipmapSize(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28ddcec*/ uint ComputeMipmapSize_Native_2D(int width, int height, UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28ddd40*/ uint ComputeMipmapSize(int width, int height, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat format);
                static /*0x28ddddc*/ uint ComputeMipmapSize_Native_3D(int width, int height, int depth, UnityEngine.Experimental.Rendering.GraphicsFormat format);
                /*0x28dde38*/ GraphicsFormatUtility();
            }

            enum TextureCreationFlags
            {
                None = 0,
                MipChain = 1,
                Crunch = 64,
            }

            enum FormatUsage
            {
                Sample = 0,
                Linear = 1,
                Sparse = 2,
                Render = 4,
                Blend = 5,
                GetPixels = 6,
                SetPixels = 7,
                SetPixels32 = 8,
                ReadPixels = 9,
                LoadStore = 10,
                MSAA2x = 11,
                MSAA4x = 12,
                MSAA8x = 13,
                StencilSampling = 16,
            }

            enum DefaultFormat
            {
                LDR = 0,
                HDR = 1,
                DepthStencil = 2,
                Shadow = 3,
                Video = 4,
            }

            enum GraphicsFormat
            {
                None = 0,
                R8_SRGB = 1,
                R8G8_SRGB = 2,
                R8G8B8_SRGB = 3,
                R8G8B8A8_SRGB = 4,
                R8_UNorm = 5,
                R8G8_UNorm = 6,
                R8G8B8_UNorm = 7,
                R8G8B8A8_UNorm = 8,
                R8_SNorm = 9,
                R8G8_SNorm = 10,
                R8G8B8_SNorm = 11,
                R8G8B8A8_SNorm = 12,
                R8_UInt = 13,
                R8G8_UInt = 14,
                R8G8B8_UInt = 15,
                R8G8B8A8_UInt = 16,
                R8_SInt = 17,
                R8G8_SInt = 18,
                R8G8B8_SInt = 19,
                R8G8B8A8_SInt = 20,
                R16_UNorm = 21,
                R16G16_UNorm = 22,
                R16G16B16_UNorm = 23,
                R16G16B16A16_UNorm = 24,
                R16_SNorm = 25,
                R16G16_SNorm = 26,
                R16G16B16_SNorm = 27,
                R16G16B16A16_SNorm = 28,
                R16_UInt = 29,
                R16G16_UInt = 30,
                R16G16B16_UInt = 31,
                R16G16B16A16_UInt = 32,
                R16_SInt = 33,
                R16G16_SInt = 34,
                R16G16B16_SInt = 35,
                R16G16B16A16_SInt = 36,
                R32_UInt = 37,
                R32G32_UInt = 38,
                R32G32B32_UInt = 39,
                R32G32B32A32_UInt = 40,
                R32_SInt = 41,
                R32G32_SInt = 42,
                R32G32B32_SInt = 43,
                R32G32B32A32_SInt = 44,
                R16_SFloat = 45,
                R16G16_SFloat = 46,
                R16G16B16_SFloat = 47,
                R16G16B16A16_SFloat = 48,
                R32_SFloat = 49,
                R32G32_SFloat = 50,
                R32G32B32_SFloat = 51,
                R32G32B32A32_SFloat = 52,
                B8G8R8_SRGB = 56,
                B8G8R8A8_SRGB = 57,
                B8G8R8_UNorm = 58,
                B8G8R8A8_UNorm = 59,
                B8G8R8_SNorm = 60,
                B8G8R8A8_SNorm = 61,
                B8G8R8_UInt = 62,
                B8G8R8A8_UInt = 63,
                B8G8R8_SInt = 64,
                B8G8R8A8_SInt = 65,
                R4G4B4A4_UNormPack16 = 66,
                B4G4R4A4_UNormPack16 = 67,
                R5G6B5_UNormPack16 = 68,
                B5G6R5_UNormPack16 = 69,
                R5G5B5A1_UNormPack16 = 70,
                B5G5R5A1_UNormPack16 = 71,
                A1R5G5B5_UNormPack16 = 72,
                E5B9G9R9_UFloatPack32 = 73,
                B10G11R11_UFloatPack32 = 74,
                A2B10G10R10_UNormPack32 = 75,
                A2B10G10R10_UIntPack32 = 76,
                A2B10G10R10_SIntPack32 = 77,
                A2R10G10B10_UNormPack32 = 78,
                A2R10G10B10_UIntPack32 = 79,
                A2R10G10B10_SIntPack32 = 80,
                A2R10G10B10_XRSRGBPack32 = 81,
                A2R10G10B10_XRUNormPack32 = 82,
                R10G10B10_XRSRGBPack32 = 83,
                R10G10B10_XRUNormPack32 = 84,
                A10R10G10B10_XRSRGBPack32 = 85,
                A10R10G10B10_XRUNormPack32 = 86,
                D16_UNorm = 90,
                D24_UNorm = 91,
                D24_UNorm_S8_UInt = 92,
                D32_SFloat = 93,
                D32_SFloat_S8_UInt = 94,
                S8_UInt = 95,
                RGB_DXT1_SRGB = 96,
                RGBA_DXT1_SRGB = 96,
                RGB_DXT1_UNorm = 97,
                RGBA_DXT1_UNorm = 97,
                RGBA_DXT3_SRGB = 98,
                RGBA_DXT3_UNorm = 99,
                RGBA_DXT5_SRGB = 100,
                RGBA_DXT5_UNorm = 101,
                R_BC4_UNorm = 102,
                R_BC4_SNorm = 103,
                RG_BC5_UNorm = 104,
                RG_BC5_SNorm = 105,
                RGB_BC6H_UFloat = 106,
                RGB_BC6H_SFloat = 107,
                RGBA_BC7_SRGB = 108,
                RGBA_BC7_UNorm = 109,
                RGB_PVRTC_2Bpp_SRGB = 110,
                RGB_PVRTC_2Bpp_UNorm = 111,
                RGB_PVRTC_4Bpp_SRGB = 112,
                RGB_PVRTC_4Bpp_UNorm = 113,
                RGBA_PVRTC_2Bpp_SRGB = 114,
                RGBA_PVRTC_2Bpp_UNorm = 115,
                RGBA_PVRTC_4Bpp_SRGB = 116,
                RGBA_PVRTC_4Bpp_UNorm = 117,
                RGB_ETC_UNorm = 118,
                RGB_ETC2_SRGB = 119,
                RGB_ETC2_UNorm = 120,
                RGB_A1_ETC2_SRGB = 121,
                RGB_A1_ETC2_UNorm = 122,
                RGBA_ETC2_SRGB = 123,
                RGBA_ETC2_UNorm = 124,
                R_EAC_UNorm = 125,
                R_EAC_SNorm = 126,
                RG_EAC_UNorm = 127,
                RG_EAC_SNorm = 128,
                RGBA_ASTC4X4_SRGB = 129,
                RGBA_ASTC4X4_UNorm = 130,
                RGBA_ASTC5X5_SRGB = 131,
                RGBA_ASTC5X5_UNorm = 132,
                RGBA_ASTC6X6_SRGB = 133,
                RGBA_ASTC6X6_UNorm = 134,
                RGBA_ASTC8X8_SRGB = 135,
                RGBA_ASTC8X8_UNorm = 136,
                RGBA_ASTC10X10_SRGB = 137,
                RGBA_ASTC10X10_UNorm = 138,
                RGBA_ASTC12X12_SRGB = 139,
                RGBA_ASTC12X12_UNorm = 140,
                YUV2 = 141,
                DepthAuto = 142,
                ShadowAuto = 143,
                VideoAuto = 144,
                RGBA_ASTC4X4_UFloat = 145,
                RGBA_ASTC5X5_UFloat = 146,
                RGBA_ASTC6X6_UFloat = 147,
                RGBA_ASTC8X8_UFloat = 148,
                RGBA_ASTC10X10_UFloat = 149,
                RGBA_ASTC12X12_UFloat = 150,
            }

            enum RayTracingMode
            {
                Off = 0,
                Static = 1,
                DynamicTransform = 2,
                DynamicGeometry = 3,
            }

            class ExternalGPUProfiler
            {
                static /*0x28ddf50*/ void BeginGPUCapture();
                static /*0x28ddf78*/ void EndGPUCapture();
                static /*0x28ddfa0*/ bool IsAttached();
            }

            enum WaitForPresentSyncPoint
            {
                BeginFrame = 0,
                EndFrame = 1,
            }

            enum GraphicsJobsSyncPoint
            {
                EndOfFrame = 0,
                AfterScriptUpdate = 1,
                AfterScriptLateUpdate = 2,
                WaitForPresent = 3,
            }

            class GraphicsDeviceSettings
            {
                static /*0x28ddfc8*/ UnityEngine.Experimental.Rendering.WaitForPresentSyncPoint get_waitForPresentSyncPoint();
                static /*0x28ddff0*/ void set_waitForPresentSyncPoint(UnityEngine.Experimental.Rendering.WaitForPresentSyncPoint value);
                static /*0x28de02c*/ UnityEngine.Experimental.Rendering.GraphicsJobsSyncPoint get_graphicsJobsSyncPoint();
                static /*0x28de054*/ void set_graphicsJobsSyncPoint(UnityEngine.Experimental.Rendering.GraphicsJobsSyncPoint value);
            }

            class ScriptableRuntimeReflectionSystemSettings
            {
                static /*0x0*/ UnityEngine.Experimental.Rendering.ScriptableRuntimeReflectionSystemWrapper s_Instance;

                static /*0x28de544*/ ScriptableRuntimeReflectionSystemSettings();
                static /*0x28de090*/ UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem get_system();
                static /*0x28de140*/ void set_system(UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem value);
                static /*0x28de0dc*/ UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem get_Internal_ScriptableRuntimeReflectionSystemSettings_system();
                static /*0x28de37c*/ void set_Internal_ScriptableRuntimeReflectionSystemSettings_system(UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem value);
                static /*0x28de4c4*/ UnityEngine.Experimental.Rendering.ScriptableRuntimeReflectionSystemWrapper get_Internal_ScriptableRuntimeReflectionSystemSettings_instance();
                static /*0x28de51c*/ void ScriptingDirtyReflectionSystemInstance();
            }

            class ScriptableRuntimeReflectionSystem : UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem, System.IDisposable
            {
                /*0x28de63c*/ ScriptableRuntimeReflectionSystem();
                /*0x28de5c4*/ bool TickRealtimeProbes();
                /*0x28de5cc*/ void Dispose(bool disposing);
                /*0x28de5d0*/ void System.IDisposable.Dispose();
            }

            interface IScriptableRuntimeReflectionSystem : System.IDisposable
            {
                bool TickRealtimeProbes();
            }

            class ScriptableRuntimeReflectionSystemWrapper
            {
                /*0x10*/ UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem <implementation>k__BackingField;

                /*0x28de5bc*/ ScriptableRuntimeReflectionSystemWrapper();
                /*0x28de644*/ UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem get_implementation();
                /*0x28de64c*/ void set_implementation(UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem value);
                /*0x28de654*/ void Internal_ScriptableRuntimeReflectionSystemWrapper_TickRealtimeProbes(ref bool result);
            }

            class BuiltinRuntimeReflectionSystem : UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem, System.IDisposable
            {
                static /*0x28de730*/ bool BuiltinUpdate();
                static /*0x28de760*/ UnityEngine.Experimental.Rendering.BuiltinRuntimeReflectionSystem Internal_BuiltinRuntimeReflectionSystem_New();
                /*0x28de7bc*/ BuiltinRuntimeReflectionSystem();
                /*0x28de708*/ bool TickRealtimeProbes();
                /*0x28de758*/ void Dispose();
                /*0x28de75c*/ void Dispose(bool disposing);
            }

            class RayTracingShader : UnityEngine.Object
            {
                /*0x28de7c4*/ RayTracingShader();
                /*0x28de81c*/ void SetFloat(string name, float val);
                /*0x28de8d0*/ void SetInt(string name, int val);
                /*0x28de984*/ void SetVector(string name, UnityEngine.Vector4 val);
                /*0x28dea34*/ void SetMatrix(string name, UnityEngine.Matrix4x4 val);
                /*0x28deafc*/ void SetVectorArray(string name, UnityEngine.Vector4[] values);
                /*0x28debb0*/ void SetMatrixArray(string name, UnityEngine.Matrix4x4[] values);
                /*0x28dec64*/ void SetFloats(string name, float[] values);
                /*0x28ded18*/ void SetFloats(int nameID, float[] values);
                /*0x28ded6c*/ void SetInts(string name, int[] values);
                /*0x28dee20*/ void SetInts(int nameID, int[] values);
                /*0x28dee74*/ void SetBool(string name, bool val);
                /*0x28deee0*/ void SetBool(int nameID, bool val);
                /*0x28def3c*/ void SetTexture(string name, UnityEngine.Texture texture);
                /*0x28deff0*/ void SetBuffer(string name, UnityEngine.ComputeBuffer buffer);
                /*0x28df0a4*/ void SetBuffer(string name, UnityEngine.GraphicsBuffer buffer);
                /*0x28df158*/ void SetConstantBuffer(int nameID, UnityEngine.ComputeBuffer buffer, int offset, int size);
                /*0x28df230*/ void SetConstantBuffer(string name, UnityEngine.ComputeBuffer buffer, int offset, int size);
                /*0x28df2a8*/ void SetConstantBuffer(int nameID, UnityEngine.GraphicsBuffer buffer, int offset, int size);
                /*0x28df380*/ void SetConstantBuffer(string name, UnityEngine.GraphicsBuffer buffer, int offset, int size);
                /*0x28df3f8*/ void SetAccelerationStructure(string name, UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure accelerationStructure);
                /*0x28df4ac*/ void SetTextureFromGlobal(string name, string globalTextureName);
                /*0x28df570*/ float get_maxRecursionDepth();
                /*0x28de87c*/ void SetFloat(int nameID, float val);
                /*0x28de930*/ void SetInt(int nameID, int val);
                /*0x28de9d8*/ void SetVector(int nameID, UnityEngine.Vector4 val);
                /*0x28deaa8*/ void SetMatrix(int nameID, UnityEngine.Matrix4x4 val);
                /*0x28decc4*/ void SetFloatArray(int nameID, float[] values);
                /*0x28dedcc*/ void SetIntArray(int nameID, int[] values);
                /*0x28deb5c*/ void SetVectorArray(int nameID, UnityEngine.Vector4[] values);
                /*0x28dec10*/ void SetMatrixArray(int nameID, UnityEngine.Matrix4x4[] values);
                /*0x28def9c*/ void SetTexture(int nameID, UnityEngine.Texture texture);
                /*0x28df050*/ void SetBuffer(int nameID, UnityEngine.ComputeBuffer buffer);
                /*0x28df654*/ void SetGraphicsBuffer(int nameID, UnityEngine.GraphicsBuffer buffer);
                /*0x28df1c4*/ void SetConstantComputeBuffer(int nameID, UnityEngine.ComputeBuffer buffer, int offset, int size);
                /*0x28df314*/ void SetConstantGraphicsBuffer(int nameID, UnityEngine.GraphicsBuffer buffer, int offset, int size);
                /*0x28df458*/ void SetAccelerationStructure(int nameID, UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure accelerationStructure);
                /*0x28df6a8*/ void SetShaderPass(string passName);
                /*0x28df51c*/ void SetTextureFromGlobal(int nameID, int globalTextureNameID);
                /*0x28df6ec*/ void Dispatch(string rayGenFunctionName, int width, int height, int depth, UnityEngine.Camera camera);
                /*0x28df104*/ void SetBuffer(int nameID, UnityEngine.GraphicsBuffer buffer);
                /*0x28df5ac*/ void SetVector_Injected(int nameID, ref UnityEngine.Vector4 val);
                /*0x28df600*/ void SetMatrix_Injected(int nameID, ref UnityEngine.Matrix4x4 val);
            }
        }

        namespace Playables
        {
            struct MaterialEffectPlayable : UnityEngine.Playables.IPlayable, System.IEquatable<UnityEngine.Experimental.Playables.MaterialEffectPlayable>
            {
                /*0x10*/ UnityEngine.Playables.PlayableHandle m_Handle;

                static /*0x28df760*/ UnityEngine.Experimental.Playables.MaterialEffectPlayable Create(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Material material, int pass);
                static /*0x28df798*/ UnityEngine.Playables.PlayableHandle CreateHandle(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Material material, int pass);
                static /*0x28dfa50*/ UnityEngine.Playables.Playable op_Implicit(UnityEngine.Experimental.Playables.MaterialEffectPlayable playable);
                static /*0x28dfa5c*/ UnityEngine.Experimental.Playables.MaterialEffectPlayable op_Explicit(UnityEngine.Playables.Playable playable);
                static /*0x28dfbcc*/ UnityEngine.Material GetMaterialInternal(ref UnityEngine.Playables.PlayableHandle hdl);
                static /*0x28dfc4c*/ void SetMaterialInternal(ref UnityEngine.Playables.PlayableHandle hdl, UnityEngine.Material material);
                static /*0x28dfccc*/ int GetPassInternal(ref UnityEngine.Playables.PlayableHandle hdl);
                static /*0x28dfd4c*/ void SetPassInternal(ref UnityEngine.Playables.PlayableHandle hdl, int pass);
                static /*0x28df974*/ bool InternalCreateMaterialEffectPlayable(ref UnityEngine.Playables.PlayableGraph graph, UnityEngine.Material material, int pass, ref UnityEngine.Playables.PlayableHandle handle);
                static /*0x28dfd90*/ bool ValidateType(ref UnityEngine.Playables.PlayableHandle hdl);
                /*0x28df860*/ MaterialEffectPlayable(UnityEngine.Playables.PlayableHandle handle);
                /*0x28dfa44*/ UnityEngine.Playables.PlayableHandle GetHandle();
                /*0x28dfa94*/ bool Equals(UnityEngine.Experimental.Playables.MaterialEffectPlayable other);
                /*0x28dfb90*/ UnityEngine.Material GetMaterial();
                /*0x28dfc08*/ void SetMaterial(UnityEngine.Material value);
                /*0x28dfc90*/ int GetPass();
                /*0x28dfd08*/ void SetPass(int value);
            }

            struct CameraPlayable : UnityEngine.Playables.IPlayable, System.IEquatable<UnityEngine.Experimental.Playables.CameraPlayable>
            {
                /*0x10*/ UnityEngine.Playables.PlayableHandle m_Handle;

                static /*0x28dfdcc*/ UnityEngine.Experimental.Playables.CameraPlayable Create(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Camera camera);
                static /*0x28dfe04*/ UnityEngine.Playables.PlayableHandle CreateHandle(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Camera camera);
                static /*0x28dffd8*/ UnityEngine.Playables.Playable op_Implicit(UnityEngine.Experimental.Playables.CameraPlayable playable);
                static /*0x28dffdc*/ UnityEngine.Experimental.Playables.CameraPlayable op_Explicit(UnityEngine.Playables.Playable playable);
                static /*0x28e00b8*/ UnityEngine.Camera GetCameraInternal(ref UnityEngine.Playables.PlayableHandle hdl);
                static /*0x28e0138*/ void SetCameraInternal(ref UnityEngine.Playables.PlayableHandle hdl, UnityEngine.Camera camera);
                static /*0x28dff78*/ bool InternalCreateCameraPlayable(ref UnityEngine.Playables.PlayableGraph graph, UnityEngine.Camera camera, ref UnityEngine.Playables.PlayableHandle handle);
                static /*0x28e017c*/ bool ValidateType(ref UnityEngine.Playables.PlayableHandle hdl);
                /*0x28dfebc*/ CameraPlayable(UnityEngine.Playables.PlayableHandle handle);
                /*0x28dffcc*/ UnityEngine.Playables.PlayableHandle GetHandle();
                /*0x28e0008*/ bool Equals(UnityEngine.Experimental.Playables.CameraPlayable other);
                /*0x28e007c*/ UnityEngine.Camera GetCamera();
                /*0x28e00f4*/ void SetCamera(UnityEngine.Camera value);
            }

            class TexturePlayableGraphExtensions
            {
                static /*0x28e01b8*/ bool InternalCreateTextureOutput(ref UnityEngine.Playables.PlayableGraph graph, string name, ref UnityEngine.Playables.PlayableOutputHandle handle);
            }

            class TexturePlayableBinding
            {
                static /*0x28e020c*/ UnityEngine.Playables.PlayableBinding Create(string name, UnityEngine.Object key);
                static /*0x28e03e4*/ UnityEngine.Playables.PlayableOutput CreateTextureOutput(UnityEngine.Playables.PlayableGraph graph, string name);
            }

            struct TexturePlayableOutput : UnityEngine.Playables.IPlayableOutput
            {
                /*0x10*/ UnityEngine.Playables.PlayableOutputHandle m_Handle;

                static /*0x28e03ec*/ UnityEngine.Experimental.Playables.TexturePlayableOutput Create(UnityEngine.Playables.PlayableGraph graph, string name, UnityEngine.RenderTexture target);
                static /*0x28e0498*/ UnityEngine.Experimental.Playables.TexturePlayableOutput get_Null();
                static /*0x28e0494*/ UnityEngine.Playables.PlayableOutput op_Implicit(UnityEngine.Experimental.Playables.TexturePlayableOutput output);
                static /*0x28e06f0*/ UnityEngine.Experimental.Playables.TexturePlayableOutput op_Explicit(UnityEngine.Playables.PlayableOutput output);
                static /*0x28e0764*/ UnityEngine.RenderTexture InternalGetTarget(ref UnityEngine.Playables.PlayableOutputHandle output);
                static /*0x28e07a0*/ void InternalSetTarget(ref UnityEngine.Playables.PlayableOutputHandle output, UnityEngine.RenderTexture target);
                /*0x28e0510*/ TexturePlayableOutput(UnityEngine.Playables.PlayableOutputHandle handle);
                /*0x28e06dc*/ UnityEngine.Playables.PlayableOutputHandle GetHandle();
                /*0x28e0728*/ UnityEngine.RenderTexture GetTarget();
                /*0x28e05cc*/ void SetTarget(UnityEngine.RenderTexture value);
            }

            struct TextureMixerPlayable : UnityEngine.Playables.IPlayable, System.IEquatable<UnityEngine.Experimental.Playables.TextureMixerPlayable>
            {
                /*0x10*/ UnityEngine.Playables.PlayableHandle m_Handle;

                static /*0x28e07e4*/ UnityEngine.Experimental.Playables.TextureMixerPlayable Create(UnityEngine.Playables.PlayableGraph graph);
                static /*0x28e081c*/ UnityEngine.Playables.PlayableHandle CreateHandle(UnityEngine.Playables.PlayableGraph graph);
                static /*0x28e09d8*/ UnityEngine.Playables.Playable op_Implicit(UnityEngine.Experimental.Playables.TextureMixerPlayable playable);
                static /*0x28e09dc*/ UnityEngine.Experimental.Playables.TextureMixerPlayable op_Explicit(UnityEngine.Playables.Playable playable);
                static /*0x28e0988*/ bool CreateTextureMixerPlayableInternal(ref UnityEngine.Playables.PlayableGraph graph, ref UnityEngine.Playables.PlayableHandle handle);
                /*0x28e08cc*/ TextureMixerPlayable(UnityEngine.Playables.PlayableHandle handle);
                /*0x28e09cc*/ UnityEngine.Playables.PlayableHandle GetHandle();
                /*0x28e0a08*/ bool Equals(UnityEngine.Experimental.Playables.TextureMixerPlayable other);
            }
        }
    }

    namespace Playables
    {
        struct PlayableOutputHandle : System.IEquatable<UnityEngine.Playables.PlayableOutputHandle>
        {
            static /*0x0*/ UnityEngine.Playables.PlayableOutputHandle m_Null;
            /*0x10*/ nint m_Handle;
            /*0x18*/ uint m_Version;

            static /*0x28e18a4*/ PlayableOutputHandle();
            static /*0x28e0684*/ UnityEngine.Playables.PlayableOutputHandle get_Null();
            static /*0x28e0ab0*/ bool op_Equality(UnityEngine.Playables.PlayableOutputHandle lhs, UnityEngine.Playables.PlayableOutputHandle rhs);
            static /*0x28e0b6c*/ bool op_Inequality(UnityEngine.Playables.PlayableOutputHandle lhs, UnityEngine.Playables.PlayableOutputHandle rhs);
            static /*0x28e0b38*/ bool CompareVersion(UnityEngine.Playables.PlayableOutputHandle lhs, UnityEngine.Playables.PlayableOutputHandle rhs);
            static /*0x28e0d64*/ bool IsNull_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self);
            static /*0x28e0da0*/ bool IsValid_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self);
            static /*0x28e0e50*/ System.Type GetPlayableOutputType_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self);
            static /*0x28e0f00*/ UnityEngine.Object GetReferenceObject_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self);
            static /*0x28e0fc0*/ void SetReferenceObject_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, UnityEngine.Object target);
            static /*0x28e1078*/ UnityEngine.Object GetUserData_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self);
            static /*0x28e1138*/ void SetUserData_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, UnityEngine.Object target);
            static /*0x28e1208*/ void GetSourcePlayable_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, ref UnityEngine.Playables.PlayableHandle ret);
            static /*0x28e12e4*/ void SetSourcePlayable_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, ref UnityEngine.Playables.PlayableHandle target, int port);
            static /*0x28e13ac*/ int GetSourceOutputPort_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self);
            static /*0x28e145c*/ float GetWeight_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self);
            static /*0x28e151c*/ void SetWeight_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, float weight);
            static /*0x28e1608*/ void PushNotification_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, ref UnityEngine.Playables.PlayableHandle origin, UnityEngine.Playables.INotification notification, object context);
            static /*0x28e16d8*/ UnityEngine.Playables.INotificationReceiver[] GetNotificationReceivers_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self);
            static /*0x28e1798*/ void AddNotificationReceiver_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, UnityEngine.Playables.INotificationReceiver receiver);
            static /*0x28e1860*/ void RemoveNotificationReceiver_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, UnityEngine.Playables.INotificationReceiver receiver);
            bool IsPlayableOutputOfType<T>();
            /*0x28e0a7c*/ int GetHashCode();
            /*0x28e0bf8*/ bool Equals(object p);
            /*0x28e0c70*/ bool Equals(UnityEngine.Playables.PlayableOutputHandle other);
            /*0x28e0cf0*/ bool IsNull();
            /*0x28e0610*/ bool IsValid();
            /*0x28e0ddc*/ System.Type GetPlayableOutputType();
            /*0x28e0e8c*/ UnityEngine.Object GetReferenceObject();
            /*0x28e0f3c*/ void SetReferenceObject(UnityEngine.Object target);
            /*0x28e1004*/ UnityEngine.Object GetUserData();
            /*0x28e10b4*/ void SetUserData(UnityEngine.Object target);
            /*0x28e117c*/ UnityEngine.Playables.PlayableHandle GetSourcePlayable();
            /*0x28e124c*/ void SetSourcePlayable(UnityEngine.Playables.PlayableHandle target, int port);
            /*0x28e1338*/ int GetSourceOutputPort();
            /*0x28e13e8*/ float GetWeight();
            /*0x28e1498*/ void SetWeight(float weight);
            /*0x28e1568*/ void PushNotification(UnityEngine.Playables.PlayableHandle origin, UnityEngine.Playables.INotification notification, object context);
            /*0x28e1664*/ UnityEngine.Playables.INotificationReceiver[] GetNotificationReceivers();
            /*0x28e1714*/ void AddNotificationReceiver(UnityEngine.Playables.INotificationReceiver receiver);
            /*0x28e17dc*/ void RemoveNotificationReceiver(UnityEngine.Playables.INotificationReceiver receiver);
        }

        struct FrameData
        {
            /*0x10*/ ulong m_FrameID;
            /*0x18*/ double m_DeltaTime;
            /*0x20*/ float m_Weight;
            /*0x24*/ float m_EffectiveWeight;
            /*0x28*/ double m_EffectiveParentDelay;
            /*0x30*/ float m_EffectiveParentSpeed;
            /*0x34*/ float m_EffectiveSpeed;
            /*0x38*/ UnityEngine.Playables.FrameData.Flags m_Flags;
            /*0x40*/ UnityEngine.Playables.PlayableOutput m_Output;

            /*0x28e18ec*/ bool HasFlags(UnityEngine.Playables.FrameData.Flags flag);
            /*0x28e18fc*/ ulong get_frameId();
            /*0x28e1904*/ float get_deltaTime();
            /*0x28e1910*/ float get_weight();
            /*0x28e1918*/ float get_effectiveWeight();
            /*0x28e1920*/ double get_effectiveParentDelay();
            /*0x28e1928*/ float get_effectiveParentSpeed();
            /*0x28e1930*/ float get_effectiveSpeed();
            /*0x28e1938*/ UnityEngine.Playables.FrameData.EvaluationType get_evaluationType();
            /*0x28e1948*/ bool get_seekOccurred();
            /*0x28e1954*/ bool get_timeLooped();
            /*0x28e1960*/ bool get_timeHeld();
            /*0x28e196c*/ UnityEngine.Playables.PlayableOutput get_output();
            /*0x28e1978*/ UnityEngine.Playables.PlayState get_effectivePlayState();

            enum Flags
            {
                Evaluate = 1,
                SeekOccured = 2,
                Loop = 4,
                Hold = 8,
                EffectivePlayStateDelayed = 16,
                EffectivePlayStatePlaying = 32,
            }

            enum EvaluationType
            {
                Evaluate = 0,
                Playback = 1,
            }
        }

        interface INotification
        {
            UnityEngine.PropertyName get_id();
        }

        struct FrameRate : System.IEquatable<UnityEngine.Playables.FrameRate>
        {
            static /*0x0*/ UnityEngine.Playables.FrameRate k_24Fps;
            static /*0x4*/ UnityEngine.Playables.FrameRate k_23_976Fps;
            static /*0x8*/ UnityEngine.Playables.FrameRate k_25Fps;
            static /*0xc*/ UnityEngine.Playables.FrameRate k_30Fps;
            static /*0x10*/ UnityEngine.Playables.FrameRate k_29_97Fps;
            static /*0x14*/ UnityEngine.Playables.FrameRate k_50Fps;
            static /*0x18*/ UnityEngine.Playables.FrameRate k_60Fps;
            static /*0x1c*/ UnityEngine.Playables.FrameRate k_59_94Fps;
            /*0x10*/ int m_Rate;

            static /*0x28e1e24*/ FrameRate();
            static /*0x28e1a74*/ bool op_Equality(UnityEngine.Playables.FrameRate a, UnityEngine.Playables.FrameRate b);
            static /*0x28e1a80*/ bool op_Inequality(UnityEngine.Playables.FrameRate a, UnityEngine.Playables.FrameRate b);
            static /*0x28e1a8c*/ bool op_LessThan(UnityEngine.Playables.FrameRate a, UnityEngine.Playables.FrameRate b);
            static /*0x28e1ad4*/ bool op_LessThanOrEqual(UnityEngine.Playables.FrameRate a, UnityEngine.Playables.FrameRate b);
            static /*0x28e1b1c*/ bool op_GreaterThan(UnityEngine.Playables.FrameRate a, UnityEngine.Playables.FrameRate b);
            static /*0x28e1b64*/ bool op_GreaterThanOrEqual(UnityEngine.Playables.FrameRate a, UnityEngine.Playables.FrameRate b);
            static /*0x28e1d5c*/ int FrameRateToInt(UnityEngine.Playables.FrameRate framerate);
            static /*0x28e1d60*/ UnityEngine.Playables.FrameRate DoubleToFrameRate(double framerate);
            /*0x28e19c4*/ FrameRate(uint frameRate, bool drop);
            /*0x28e1990*/ bool get_dropFrame();
            /*0x28e199c*/ double get_rate();
            /*0x28e19dc*/ bool IsValid();
            /*0x28e19ec*/ bool Equals(UnityEngine.Playables.FrameRate other);
            /*0x28e19fc*/ bool Equals(object obj);
            /*0x28e1bac*/ int GetHashCode();
            /*0x28e1bb4*/ string ToString();
            /*0x28e1d54*/ string ToString(string format);
            /*0x28e1bc0*/ string ToString(string format, System.IFormatProvider formatProvider);
        }

        interface IPlayableAsset
        {
            UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner);
            double get_duration();
            System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding> get_outputs();
        }

        class PlayableAsset : UnityEngine.ScriptableObject, UnityEngine.Playables.IPlayableAsset
        {
            static /*0x28e1f2c*/ void Internal_CreatePlayable(UnityEngine.Playables.PlayableAsset asset, UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, nint ptr);
            static /*0x28e205c*/ void Internal_GetPlayableAssetDuration(UnityEngine.Playables.PlayableAsset asset, nint ptrToDouble);
            /*0x28e2084*/ PlayableAsset();
            UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner);
            /*0x28e1e7c*/ double get_duration();
            /*0x28e1ed4*/ System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding> get_outputs();
        }

        struct ScriptPlayable<T> : UnityEngine.Playables.IPlayable, System.IEquatable<UnityEngine.Playables.ScriptPlayable<T>>
        {
            static /*0x0*/ UnityEngine.Playables.ScriptPlayable<T> m_NullPlayable;
            /*0x0*/ UnityEngine.Playables.PlayableHandle m_Handle;

            static ScriptPlayable();
            static UnityEngine.Playables.ScriptPlayable<T> get_Null();
            static UnityEngine.Playables.ScriptPlayable<T> Create(UnityEngine.Playables.PlayableGraph graph, int inputCount);
            static UnityEngine.Playables.ScriptPlayable<T> Create(UnityEngine.Playables.PlayableGraph graph, T template, int inputCount);
            static UnityEngine.Playables.PlayableHandle CreateHandle(UnityEngine.Playables.PlayableGraph graph, T template, int inputCount);
            static object CreateScriptInstance();
            static object CloneScriptInstance(UnityEngine.Playables.IPlayableBehaviour source);
            static object CloneScriptInstanceFromEngineObject(UnityEngine.Object source);
            static object CloneScriptInstanceFromIClonable(System.ICloneable source);
            static UnityEngine.Playables.Playable op_Implicit(UnityEngine.Playables.ScriptPlayable<T> playable);
            static UnityEngine.Playables.ScriptPlayable<T> op_Explicit(UnityEngine.Playables.Playable playable);
            ScriptPlayable(UnityEngine.Playables.PlayableHandle handle);
            UnityEngine.Playables.PlayableHandle GetHandle();
            T GetBehaviour();
            bool Equals(UnityEngine.Playables.ScriptPlayable<T> other);
        }

        struct ScriptPlayableOutput : UnityEngine.Playables.IPlayableOutput
        {
            /*0x10*/ UnityEngine.Playables.PlayableOutputHandle m_Handle;

            static /*0x28e208c*/ UnityEngine.Playables.ScriptPlayableOutput Create(UnityEngine.Playables.PlayableGraph graph, string name);
            static /*0x28e2158*/ UnityEngine.Playables.ScriptPlayableOutput get_Null();
            static /*0x28e2298*/ UnityEngine.Playables.PlayableOutput op_Implicit(UnityEngine.Playables.ScriptPlayableOutput output);
            static /*0x28e229c*/ UnityEngine.Playables.ScriptPlayableOutput op_Explicit(UnityEngine.Playables.PlayableOutput output);
            /*0x28e21d0*/ ScriptPlayableOutput(UnityEngine.Playables.PlayableOutputHandle handle);
            /*0x28e228c*/ UnityEngine.Playables.PlayableOutputHandle GetHandle();
        }

        class PlayableBehaviour : UnityEngine.Playables.IPlayableBehaviour, System.ICloneable
        {
            /*0x28e22c8*/ PlayableBehaviour();
            /*0x28e22d0*/ void OnGraphStart(UnityEngine.Playables.Playable playable);
            /*0x28e22d4*/ void OnGraphStop(UnityEngine.Playables.Playable playable);
            /*0x28e22d8*/ void OnPlayableCreate(UnityEngine.Playables.Playable playable);
            /*0x28e22dc*/ void OnPlayableDestroy(UnityEngine.Playables.Playable playable);
            /*0x28e22e0*/ void OnBehaviourDelay(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
            /*0x28e22e4*/ void OnBehaviourPlay(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
            /*0x28e22e8*/ void OnBehaviourPause(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
            /*0x28e22ec*/ void PrepareData(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
            /*0x28e22f0*/ void PrepareFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
            /*0x28e22f4*/ void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
            /*0x28e22f8*/ object Clone();
        }

        class PlayableOutputExtensions
        {
            static int GetSourceInputPort<U>(U output);
            static void SetSourceInputPort<U>(U output, int value);
            static void SetSourceOutputPort<U>(U output, int value);
            static bool IsOutputNull<U>(U output);
            static bool IsOutputValid<U>(U output);
            static UnityEngine.Object GetReferenceObject<U>(U output);
            static void SetReferenceObject<U>(U output, UnityEngine.Object value);
            static UnityEngine.Object GetUserData<U>(U output);
            static void SetUserData<U>(U output, UnityEngine.Object value);
            static UnityEngine.Playables.Playable GetSourcePlayable<U>(U output);
            static void SetSourcePlayable<U, V>(U output, V value);
            static void SetSourcePlayable<U, V>(U output, V value, int port);
            static int GetSourceOutputPort<U>(U output);
            static float GetWeight<U>(U output);
            static void SetWeight<U>(U output, float value);
            static void PushNotification<U>(U output, UnityEngine.Playables.Playable origin, UnityEngine.Playables.INotification notification, object context);
            static UnityEngine.Playables.INotificationReceiver[] GetNotificationReceivers<U>(U output);
            static void AddNotificationReceiver<U>(U output, UnityEngine.Playables.INotificationReceiver receiver);
            static void RemoveNotificationReceiver<U>(U output, UnityEngine.Playables.INotificationReceiver receiver);
        }

        enum DirectorWrapMode
        {
            Hold = 0,
            Loop = 1,
            None = 2,
        }

        struct Playable : UnityEngine.Playables.IPlayable, System.IEquatable<UnityEngine.Playables.Playable>
        {
            static /*0x0*/ UnityEngine.Playables.Playable m_NullPlayable;
            /*0x10*/ UnityEngine.Playables.PlayableHandle m_Handle;

            static /*0x28e24d0*/ Playable();
            static /*0x28e2004*/ UnityEngine.Playables.Playable get_Null();
            static /*0x28e2300*/ UnityEngine.Playables.Playable Create(UnityEngine.Playables.PlayableGraph graph, int inputCount);
            /*0x28dfa54*/ Playable(UnityEngine.Playables.PlayableHandle handle);
            /*0x28dfa88*/ UnityEngine.Playables.PlayableHandle GetHandle();
            bool IsPlayableOfType<T>();
            /*0x28e23c4*/ System.Type GetPlayableType();
            /*0x28e245c*/ bool Equals(UnityEngine.Playables.Playable other);
        }

        interface IPlayableOutput
        {
            UnityEngine.Playables.PlayableOutputHandle GetHandle();
        }

        enum DataStreamType
        {
            Animation = 0,
            Audio = 1,
            Texture = 2,
            None = 3,
        }

        struct PlayableBinding
        {
            static /*0x0*/ UnityEngine.Playables.PlayableBinding[] None;
            static /*0x8*/ double DefaultDuration;
            /*0x10*/ string m_StreamName;
            /*0x18*/ UnityEngine.Object m_SourceObject;
            /*0x20*/ System.Type m_SourceBindingType;
            /*0x28*/ UnityEngine.Playables.PlayableBinding.CreateOutputMethod m_CreateOutputMethod;

            static /*0x28e2668*/ PlayableBinding();
            static /*0x28e03d8*/ UnityEngine.Playables.PlayableBinding CreateInternal(string name, UnityEngine.Object sourceObject, System.Type sourceType, UnityEngine.Playables.PlayableBinding.CreateOutputMethod createFunction);
            /*0x28e2540*/ string get_streamName();
            /*0x28e2548*/ void set_streamName(string value);
            /*0x28e2550*/ UnityEngine.Object get_sourceObject();
            /*0x28e2558*/ void set_sourceObject(UnityEngine.Object value);
            /*0x28e2560*/ System.Type get_outputTargetType();
            /*0x28e2568*/ System.Type get_sourceBindingType();
            /*0x28e2570*/ void set_sourceBindingType(System.Type value);
            /*0x28e2574*/ UnityEngine.Playables.DataStreamType get_streamType();
            /*0x28e257c*/ void set_streamType(UnityEngine.Playables.DataStreamType value);
            /*0x28e2580*/ UnityEngine.Playables.PlayableOutput CreateOutput(UnityEngine.Playables.PlayableGraph graph);

            class CreateOutputMethod : System.MulticastDelegate
            {
                /*0x28e0314*/ CreateOutputMethod(object object, nint method);
                /*0x28e26e0*/ UnityEngine.Playables.PlayableOutput Invoke(UnityEngine.Playables.PlayableGraph graph, string name);
            }
        }

        class ScriptPlayableBinding
        {
            static /*0x28e26f4*/ UnityEngine.Playables.PlayableBinding Create(string name, UnityEngine.Object key, System.Type type);
            static /*0x28e27b0*/ UnityEngine.Playables.PlayableOutput CreateScriptOutput(UnityEngine.Playables.PlayableGraph graph, string name);
        }

        enum PlayableTraversalMode
        {
            Mix = 0,
            Passthrough = 1,
        }

        class PlayableExtensions
        {
            static bool IsNull<U>(U playable);
            static bool IsValid<U>(U playable);
            static void Destroy<U>(U playable);
            static UnityEngine.Playables.PlayableGraph GetGraph<U>(U playable);
            static void SetPlayState<U>(U playable, UnityEngine.Playables.PlayState value);
            static UnityEngine.Playables.PlayState GetPlayState<U>(U playable);
            static void Play<U>(U playable);
            static void Pause<U>(U playable);
            static void SetSpeed<U>(U playable, double value);
            static double GetSpeed<U>(U playable);
            static void SetDuration<U>(U playable, double value);
            static double GetDuration<U>(U playable);
            static void SetTime<U>(U playable, double value);
            static double GetTime<U>(U playable);
            static double GetPreviousTime<U>(U playable);
            static void SetDone<U>(U playable, bool value);
            static bool IsDone<U>(U playable);
            static void SetPropagateSetTime<U>(U playable, bool value);
            static bool GetPropagateSetTime<U>(U playable);
            static bool CanChangeInputs<U>(U playable);
            static bool CanSetWeights<U>(U playable);
            static bool CanDestroy<U>(U playable);
            static void SetInputCount<U>(U playable, int value);
            static int GetInputCount<U>(U playable);
            static void SetOutputCount<U>(U playable, int value);
            static int GetOutputCount<U>(U playable);
            static UnityEngine.Playables.Playable GetInput<U>(U playable, int inputPort);
            static UnityEngine.Playables.Playable GetOutput<U>(U playable, int outputPort);
            static void SetInputWeight<U>(U playable, int inputIndex, float weight);
            static void SetInputWeight<U, V>(U playable, V input, float weight);
            static float GetInputWeight<U>(U playable, int inputIndex);
            static void ConnectInput<U, V>(U playable, int inputIndex, V sourcePlayable, int sourceOutputIndex);
            static void ConnectInput<U, V>(U playable, int inputIndex, V sourcePlayable, int sourceOutputIndex, float weight);
            static void DisconnectInput<U>(U playable, int inputPort);
            static int AddInput<U, V>(U playable, V sourcePlayable, int sourceOutputIndex, float weight);
            static void SetDelay<U>(U playable, double delay);
            static double GetDelay<U>(U playable);
            static bool IsDelayed<U>(U playable);
            static void SetLeadTime<U>(U playable, float value);
            static float GetLeadTime<U>(U playable);
            static UnityEngine.Playables.PlayableTraversalMode GetTraversalMode<U>(U playable);
            static void SetTraversalMode<U>(U playable, UnityEngine.Playables.PlayableTraversalMode mode);
            static UnityEngine.Playables.DirectorWrapMode GetTimeWrapMode<U>(U playable);
            static void SetTimeWrapMode<U>(U playable, UnityEngine.Playables.DirectorWrapMode value);
        }

        enum DirectorUpdateMode
        {
            DSPClock = 0,
            GameTime = 1,
            UnscaledGameTime = 2,
            Manual = 3,
        }

        struct PlayableGraph
        {
            /*0x10*/ nint m_Handle;
            /*0x18*/ uint m_Version;

            static /*0x28e2994*/ UnityEngine.Playables.PlayableGraph Create();
            static /*0x28e299c*/ UnityEngine.Playables.PlayableGraph Create(string name);
            static /*0x28e29f0*/ void Create_Injected(string name, ref UnityEngine.Playables.PlayableGraph ret);
            static /*0x28e2a70*/ void Destroy_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e2ae8*/ bool IsValid_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e2b60*/ bool IsPlaying_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e2bd8*/ bool IsDone_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e2c50*/ void Play_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e2cc8*/ void Stop_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e2d04*/ void Evaluate_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, float deltaTime);
            static /*0x28e2d8c*/ UnityEngine.Playables.DirectorUpdateMode GetTimeUpdateMode_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e2e0c*/ void SetTimeUpdateMode_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, UnityEngine.Playables.DirectorUpdateMode value);
            static /*0x28e2e8c*/ UnityEngine.IExposedPropertyTable GetResolver_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e2f0c*/ void SetResolver_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, UnityEngine.IExposedPropertyTable value);
            static /*0x28e2f8c*/ int GetPlayableCount_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e3004*/ int GetRootPlayableCount_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e3090*/ void SynchronizeEvaluation_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, ref UnityEngine.Playables.PlayableGraph playable);
            static /*0x28e3110*/ int GetOutputCount_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e314c*/ void CreatePlayableHandle_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, ref UnityEngine.Playables.PlayableHandle ret);
            static /*0x28e3190*/ bool CreateScriptOutputInternal_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, string name, ref UnityEngine.Playables.PlayableOutputHandle handle);
            static /*0x28e31e4*/ void GetRootPlayableInternal_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, int index, ref UnityEngine.Playables.PlayableHandle ret);
            static /*0x28e3288*/ void DestroyOutputInternal_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, ref UnityEngine.Playables.PlayableOutputHandle handle);
            static /*0x28e3308*/ bool IsMatchFrameRateEnabled_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e338c*/ void EnableMatchFrameRate_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, ref UnityEngine.Playables.FrameRate frameRate);
            static /*0x28e340c*/ void DisableMatchFrameRate_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self);
            static /*0x28e3494*/ void GetFrameRate_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, ref UnityEngine.Playables.FrameRate ret);
            static /*0x28e34d8*/ bool GetOutputInternal_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, int index, ref UnityEngine.Playables.PlayableOutputHandle handle);
            static /*0x28e3570*/ int GetOutputCountByTypeInternal_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, System.Type outputType);
            static /*0x28e3610*/ bool GetOutputByTypeInternal_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, System.Type outputType, int index, ref UnityEngine.Playables.PlayableOutputHandle handle);
            static /*0x28e36e0*/ bool ConnectInternal_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, ref UnityEngine.Playables.PlayableHandle source, int sourceOutputPort, ref UnityEngine.Playables.PlayableHandle destination, int destinationInputPort);
            static /*0x28e37a4*/ void DisconnectInternal_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, ref UnityEngine.Playables.PlayableHandle playable, int inputPort);
            static /*0x28e3848*/ void DestroyPlayableInternal_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, ref UnityEngine.Playables.PlayableHandle playable);
            static /*0x28e38dc*/ void DestroySubgraphInternal_Injected(ref UnityEngine.Playables.PlayableGraph _unity_self, ref UnityEngine.Playables.PlayableHandle playable);
            /*0x28e27b4*/ UnityEngine.Playables.Playable GetRootPlayable(int index);
            bool Connect<U, V>(U source, int sourceOutputPort, V destination, int destinationInputPort);
            void Disconnect<U>(U input, int inputPort);
            void DestroyPlayable<U>(U playable);
            void DestroySubgraph<U>(U playable);
            void DestroyOutput<U>(U output);
            int GetOutputCountByType<T>();
            /*0x28e2814*/ UnityEngine.Playables.PlayableOutput GetOutput(int index);
            UnityEngine.Playables.PlayableOutput GetOutputByType<T>(int index);
            /*0x28e2908*/ void Evaluate();
            /*0x28e2a34*/ void Destroy();
            /*0x28e2aac*/ bool IsValid();
            /*0x28e2b24*/ bool IsPlaying();
            /*0x28e2b9c*/ bool IsDone();
            /*0x28e2c14*/ void Play();
            /*0x28e2c8c*/ void Stop();
            /*0x28e2948*/ void Evaluate(float deltaTime);
            /*0x28e2d50*/ UnityEngine.Playables.DirectorUpdateMode GetTimeUpdateMode();
            /*0x28e2dc8*/ void SetTimeUpdateMode(UnityEngine.Playables.DirectorUpdateMode value);
            /*0x28e2e50*/ UnityEngine.IExposedPropertyTable GetResolver();
            /*0x28e2ec8*/ void SetResolver(UnityEngine.IExposedPropertyTable value);
            /*0x28e2f50*/ int GetPlayableCount();
            /*0x28e2fc8*/ int GetRootPlayableCount();
            /*0x28e3040*/ void SynchronizeEvaluation(UnityEngine.Playables.PlayableGraph playable);
            /*0x28e30d4*/ int GetOutputCount();
            /*0x28e2370*/ UnityEngine.Playables.PlayableHandle CreatePlayableHandle();
            /*0x28e2104*/ bool CreateScriptOutputInternal(string name, ref UnityEngine.Playables.PlayableOutputHandle handle);
            /*0x28e27b8*/ UnityEngine.Playables.PlayableHandle GetRootPlayableInternal(int index);
            /*0x28e3238*/ void DestroyOutputInternal(UnityEngine.Playables.PlayableOutputHandle handle);
            /*0x28e32cc*/ bool IsMatchFrameRateEnabled();
            /*0x28e3344*/ void EnableMatchFrameRate(UnityEngine.Playables.FrameRate frameRate);
            /*0x28e33d0*/ void DisableMatchFrameRate();
            /*0x28e3448*/ UnityEngine.Playables.FrameRate GetFrameRate();
            /*0x28e28b4*/ bool GetOutputInternal(int index, ref UnityEngine.Playables.PlayableOutputHandle handle);
            /*0x28e352c*/ int GetOutputCountByTypeInternal(System.Type outputType);
            /*0x28e35b4*/ bool GetOutputByTypeInternal(System.Type outputType, int index, ref UnityEngine.Playables.PlayableOutputHandle handle);
            /*0x28e366c*/ bool ConnectInternal(UnityEngine.Playables.PlayableHandle source, int sourceOutputPort, UnityEngine.Playables.PlayableHandle destination, int destinationInputPort);
            /*0x28e374c*/ void DisconnectInternal(UnityEngine.Playables.PlayableHandle playable, int inputPort);
            /*0x28e37f8*/ void DestroyPlayableInternal(UnityEngine.Playables.PlayableHandle playable);
            /*0x28e388c*/ void DestroySubgraphInternal(UnityEngine.Playables.PlayableHandle playable);
        }

        interface IPlayable
        {
            UnityEngine.Playables.PlayableHandle GetHandle();
        }

        class Notification : UnityEngine.Playables.INotification
        {
            /*0x10*/ UnityEngine.PropertyName <id>k__BackingField;

            /*0x28e3920*/ Notification(string name);
            /*0x28e3960*/ UnityEngine.PropertyName get_id();
        }

        interface INotificationReceiver
        {
            void OnNotify(UnityEngine.Playables.Playable origin, UnityEngine.Playables.INotification notification, object context);
        }

        struct PlayableOutput : UnityEngine.Playables.IPlayableOutput, System.IEquatable<UnityEngine.Playables.PlayableOutput>
        {
            static /*0x0*/ UnityEngine.Playables.PlayableOutput m_NullPlayableOutput;
            /*0x10*/ UnityEngine.Playables.PlayableOutputHandle m_Handle;

            static /*0x28e3a00*/ PlayableOutput();
            static /*0x28e2610*/ UnityEngine.Playables.PlayableOutput get_Null();
            /*0x28e06e8*/ PlayableOutput(UnityEngine.Playables.PlayableOutputHandle handle);
            /*0x28e071c*/ UnityEngine.Playables.PlayableOutputHandle GetHandle();
            bool IsPlayableOutputOfType<T>();
            /*0x28e3968*/ System.Type GetPlayableOutputType();
            /*0x28e398c*/ bool Equals(UnityEngine.Playables.PlayableOutput other);
        }

        enum PlayState
        {
            Paused = 0,
            Playing = 1,
            Delayed = 2,
        }

        struct PlayableHandle : System.IEquatable<UnityEngine.Playables.PlayableHandle>
        {
            static /*0x0*/ UnityEngine.Playables.PlayableHandle m_Null;
            /*0x10*/ nint m_Handle;
            /*0x18*/ uint m_Version;

            static /*0x28e5e90*/ PlayableHandle();
            static /*0x28df91c*/ UnityEngine.Playables.PlayableHandle get_Null();
            static /*0x28dfb08*/ bool op_Equality(UnityEngine.Playables.PlayableHandle x, UnityEngine.Playables.PlayableHandle y);
            static /*0x28e3e74*/ bool op_Inequality(UnityEngine.Playables.PlayableHandle x, UnityEngine.Playables.PlayableHandle y);
            static /*0x28e3e40*/ bool CompareVersion(UnityEngine.Playables.PlayableHandle lhs, UnityEngine.Playables.PlayableHandle rhs);
            static /*0x28e4338*/ bool IsNull_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e4374*/ bool IsValid_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e43b0*/ System.Type GetPlayableType_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e4460*/ System.Type GetJobType_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e4520*/ void SetScriptInstance_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, object scriptInstance);
            static /*0x28e45d8*/ bool CanChangeInputs_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e4688*/ bool CanSetWeights_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e4738*/ bool CanDestroy_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e47e8*/ UnityEngine.Playables.PlayState GetPlayState_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e4898*/ void Play_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e4948*/ void Pause_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e49f8*/ double GetSpeed_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e4ab8*/ void SetSpeed_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, double value);
            static /*0x28e4b78*/ double GetTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e4c38*/ void SetTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, double value);
            static /*0x28e4cf8*/ bool IsDone_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e4db8*/ void SetDone_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, bool value);
            static /*0x28e4e70*/ double GetDuration_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e4f30*/ void SetDuration_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, double value);
            static /*0x28e4ff0*/ bool GetPropagateSetTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e50b0*/ void SetPropagateSetTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, bool value);
            static /*0x28e50f4*/ void GetGraph_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, ref UnityEngine.Playables.PlayableGraph ret);
            static /*0x28e5138*/ int GetInputCount_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e51f8*/ void SetInputCount_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, int value);
            static /*0x28e52b0*/ int GetOutputCount_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e5370*/ void SetOutputCount_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, int value);
            static /*0x28e544c*/ void SetInputWeight_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, ref UnityEngine.Playables.PlayableHandle input, float weight);
            static /*0x28e5524*/ void SetDelay_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, double delay);
            static /*0x28e55e4*/ double GetDelay_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e5694*/ bool IsDelayed_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e5744*/ double GetPreviousTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e5804*/ void SetLeadTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, float value);
            static /*0x28e58c4*/ float GetLeadTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e5974*/ UnityEngine.Playables.PlayableTraversalMode GetTraversalMode_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e5a34*/ void SetTraversalMode_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, UnityEngine.Playables.PlayableTraversalMode mode);
            static /*0x28e5aec*/ nint GetJobData_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e5b9c*/ UnityEngine.Playables.DirectorWrapMode GetTimeWrapMode_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e5c5c*/ void SetTimeWrapMode_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, UnityEngine.Playables.DirectorWrapMode mode);
            static /*0x28e5d14*/ object GetScriptInstance_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self);
            static /*0x28e5d50*/ void GetInputHandle_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, int index, ref UnityEngine.Playables.PlayableHandle ret);
            static /*0x28e5da4*/ void GetOutputHandle_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, int index, ref UnityEngine.Playables.PlayableHandle ret);
            static /*0x28e5df8*/ void SetInputWeightFromIndex_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, int index, float weight);
            static /*0x28e5e4c*/ float GetInputWeightFromIndex_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, int index);
            T GetObject<T>();
            bool IsPlayableOfType<T>();
            /*0x28e3a70*/ UnityEngine.Playables.Playable GetInput(int inputPort);
            /*0x28e3b10*/ UnityEngine.Playables.Playable GetOutput(int outputPort);
            /*0x28e3bb0*/ bool SetInputWeight(int inputIndex, float weight);
            /*0x28e3ca0*/ float GetInputWeight(int inputIndex);
            /*0x28e3d50*/ void Destroy();
            /*0x28e3f00*/ bool Equals(object p);
            /*0x28e3f78*/ bool Equals(UnityEngine.Playables.PlayableHandle other);
            /*0x28e3ff8*/ int GetHashCode();
            /*0x28e3bf4*/ bool CheckInputBounds(int inputIndex);
            /*0x28e402c*/ bool CheckInputBounds(int inputIndex, bool acceptAny);
            /*0x28e42c4*/ bool IsNull();
            /*0x28df9d0*/ bool IsValid();
            /*0x28e23e8*/ System.Type GetPlayableType();
            /*0x28e43ec*/ System.Type GetJobType();
            /*0x28e449c*/ void SetScriptInstance(object scriptInstance);
            /*0x28e4564*/ bool CanChangeInputs();
            /*0x28e4614*/ bool CanSetWeights();
            /*0x28e46c4*/ bool CanDestroy();
            /*0x28e4774*/ UnityEngine.Playables.PlayState GetPlayState();
            /*0x28e4824*/ void Play();
            /*0x28e48d4*/ void Pause();
            /*0x28e4984*/ double GetSpeed();
            /*0x28e4a34*/ void SetSpeed(double value);
            /*0x28e4b04*/ double GetTime();
            /*0x28e4bb4*/ void SetTime(double value);
            /*0x28e4c84*/ bool IsDone();
            /*0x28e4d34*/ void SetDone(bool value);
            /*0x28e4dfc*/ double GetDuration();
            /*0x28e4eac*/ void SetDuration(double value);
            /*0x28e4f7c*/ bool GetPropagateSetTime();
            /*0x28e502c*/ void SetPropagateSetTime(bool value);
            /*0x28e3db4*/ UnityEngine.Playables.PlayableGraph GetGraph();
            /*0x28e4250*/ int GetInputCount();
            /*0x28e5174*/ void SetInputCount(int value);
            /*0x28e523c*/ int GetOutputCount();
            /*0x28e52ec*/ void SetOutputCount(int value);
            /*0x28e53b4*/ void SetInputWeight(UnityEngine.Playables.PlayableHandle input, float weight);
            /*0x28e54a0*/ void SetDelay(double delay);
            /*0x28e5570*/ double GetDelay();
            /*0x28e5620*/ bool IsDelayed();
            /*0x28e56d0*/ double GetPreviousTime();
            /*0x28e5780*/ void SetLeadTime(float value);
            /*0x28e5850*/ float GetLeadTime();
            /*0x28e5900*/ UnityEngine.Playables.PlayableTraversalMode GetTraversalMode();
            /*0x28e59b0*/ void SetTraversalMode(UnityEngine.Playables.PlayableTraversalMode mode);
            /*0x28e5a78*/ nint GetJobData();
            /*0x28e5b28*/ UnityEngine.Playables.DirectorWrapMode GetTimeWrapMode();
            /*0x28e5bd8*/ void SetTimeWrapMode(UnityEngine.Playables.DirectorWrapMode mode);
            /*0x28e5ca0*/ object GetScriptInstance();
            /*0x28e3a74*/ UnityEngine.Playables.PlayableHandle GetInputHandle(int index);
            /*0x28e3b14*/ UnityEngine.Playables.PlayableHandle GetOutputHandle(int index);
            /*0x28e3c0c*/ void SetInputWeightFromIndex(int index, float weight);
            /*0x28e3ccc*/ float GetInputWeightFromIndex(int index);
        }

        interface IPlayableBehaviour
        {
            void OnGraphStart(UnityEngine.Playables.Playable playable);
            void OnGraphStop(UnityEngine.Playables.Playable playable);
            void OnPlayableCreate(UnityEngine.Playables.Playable playable);
            void OnPlayableDestroy(UnityEngine.Playables.Playable playable);
            void OnBehaviourPlay(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
            void OnBehaviourPause(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
            void PrepareFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
            void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
        }
    }

    namespace Pool
    {
        interface IObjectPool<T>
        {
            int get_CountInactive();
            T Get();
            UnityEngine.Pool.PooledObject<T> Get(ref T v);
            void Release(T element);
            void Clear();
        }

        class CollectionPool<TCollection, TItem>
        {
            static /*0x0*/ UnityEngine.Pool.ObjectPool<TCollection> s_Pool;

            static CollectionPool();
            static TCollection Get();
            static UnityEngine.Pool.PooledObject<TCollection> Get(ref TCollection value);
            static void Release(TCollection toRelease);
            CollectionPool();

            class <>c<TCollection, TItem>
            {
                static /*0x0*/ UnityEngine.Pool.CollectionPool.<>c<TCollection, TItem> <>9;

                static <>c();
                <>c();
                TCollection <.cctor>b__5_0();
                void <.cctor>b__5_1(TCollection l);
            }
        }

        class ListPool<T> : UnityEngine.Pool.CollectionPool<System.Collections.Generic.List<T>, T>
        {
            ListPool();
        }

        class HashSetPool<T> : UnityEngine.Pool.CollectionPool<System.Collections.Generic.HashSet<T>, T>
        {
            HashSetPool();
        }

        class DictionaryPool<TKey, TValue> : UnityEngine.Pool.CollectionPool<System.Collections.Generic.Dictionary<TKey, TValue>, System.Collections.Generic.KeyValuePair<TKey, TValue>>
        {
            DictionaryPool();
        }

        class LinkedPool<T> : System.IDisposable, UnityEngine.Pool.IObjectPool<T>
        {
            /*0x0*/ System.Func<T> m_CreateFunc;
            /*0x0*/ System.Action<T> m_ActionOnGet;
            /*0x0*/ System.Action<T> m_ActionOnRelease;
            /*0x0*/ System.Action<T> m_ActionOnDestroy;
            /*0x0*/ int m_Limit;
            /*0x0*/ UnityEngine.Pool.LinkedPool.LinkedPoolItem<T> m_PoolFirst;
            /*0x0*/ UnityEngine.Pool.LinkedPool.LinkedPoolItem<T> m_NextAvailableListItem;
            /*0x0*/ bool m_CollectionCheck;
            /*0x0*/ int <CountInactive>k__BackingField;

            LinkedPool(System.Func<T> createFunc, System.Action<T> actionOnGet, System.Action<T> actionOnRelease, System.Action<T> actionOnDestroy, bool collectionCheck, int maxSize);
            int get_CountInactive();
            void set_CountInactive(int value);
            T Get();
            UnityEngine.Pool.PooledObject<T> Get(ref T v);
            void Release(T item);
            void Clear();
            void Dispose();

            class LinkedPoolItem<T>
            {
                /*0x0*/ UnityEngine.Pool.LinkedPool.LinkedPoolItem<T> poolNext;
                /*0x0*/ T value;

                LinkedPoolItem();
            }
        }

        class UnsafeGenericPool<T>
        {
            static /*0x0*/ UnityEngine.Pool.ObjectPool<T> s_Pool;

            static UnsafeGenericPool();
            static T Get();
            static UnityEngine.Pool.PooledObject<T> Get(ref T value);
            static void Release(T toRelease);

            class <>c<T>
            {
                static /*0x0*/ UnityEngine.Pool.UnsafeGenericPool.<>c<T> <>9;

                static <>c();
                <>c();
                T <.cctor>b__4_0();
            }
        }

        struct PooledObject<T> : System.IDisposable
        {
            /*0x0*/ T m_ToReturn;
            /*0x0*/ UnityEngine.Pool.IObjectPool<T> m_Pool;

            PooledObject(T value, UnityEngine.Pool.IObjectPool<T> pool);
            void System.IDisposable.Dispose();
        }

        class GenericPool<T>
        {
            static /*0x0*/ UnityEngine.Pool.ObjectPool<T> s_Pool;

            static GenericPool();
            static T Get();
            static UnityEngine.Pool.PooledObject<T> Get(ref T value);
            static void Release(T toRelease);
            GenericPool();

            class <>c<T>
            {
                static /*0x0*/ UnityEngine.Pool.GenericPool.<>c<T> <>9;

                static <>c();
                <>c();
                T <.cctor>b__5_0();
            }
        }

        class ObjectPool<T> : System.IDisposable, UnityEngine.Pool.IObjectPool<T>
        {
            /*0x0*/ System.Collections.Generic.List<T> m_List;
            /*0x0*/ System.Func<T> m_CreateFunc;
            /*0x0*/ System.Action<T> m_ActionOnGet;
            /*0x0*/ System.Action<T> m_ActionOnRelease;
            /*0x0*/ System.Action<T> m_ActionOnDestroy;
            /*0x0*/ int m_MaxSize;
            /*0x0*/ bool m_CollectionCheck;
            /*0x0*/ int <CountAll>k__BackingField;

            ObjectPool(System.Func<T> createFunc, System.Action<T> actionOnGet, System.Action<T> actionOnRelease, System.Action<T> actionOnDestroy, bool collectionCheck, int defaultCapacity, int maxSize);
            int get_CountAll();
            void set_CountAll(int value);
            int get_CountActive();
            int get_CountInactive();
            T Get();
            UnityEngine.Pool.PooledObject<T> Get(ref T v);
            void Release(T element);
            void Clear();
            void Dispose();
        }
    }

    namespace Events
    {
        enum PersistentListenerMode
        {
            EventDefined = 0,
            Void = 1,
            Object = 2,
            Int = 3,
            Float = 4,
            String = 5,
            Bool = 6,
        }

        class UnityEventTools
        {
            static /*0x28e5ed8*/ string TidyAssemblyTypeName(string assemblyTypeName);
            /*0x28e6100*/ UnityEventTools();
        }

        class ArgumentCache : UnityEngine.ISerializationCallbackReceiver
        {
            /*0x10*/ UnityEngine.Object m_ObjectArgument;
            /*0x18*/ string m_ObjectArgumentAssemblyTypeName;
            /*0x20*/ int m_IntArgument;
            /*0x24*/ float m_FloatArgument;
            /*0x28*/ string m_StringArgument;
            /*0x30*/ bool m_BoolArgument;

            /*0x28e6258*/ ArgumentCache();
            /*0x28e6108*/ UnityEngine.Object get_unityObjectArgument();
            /*0x28e6110*/ void set_unityObjectArgument(UnityEngine.Object value);
            /*0x28e61d4*/ string get_unityObjectArgumentAssemblyTypeName();
            /*0x28e61dc*/ int get_intArgument();
            /*0x28e61e4*/ void set_intArgument(int value);
            /*0x28e61ec*/ float get_floatArgument();
            /*0x28e61f4*/ void set_floatArgument(float value);
            /*0x28e61fc*/ string get_stringArgument();
            /*0x28e6204*/ void set_stringArgument(string value);
            /*0x28e620c*/ bool get_boolArgument();
            /*0x28e6214*/ void set_boolArgument(bool value);
            /*0x28e6220*/ void OnBeforeSerialize();
            /*0x28e623c*/ void OnAfterDeserialize();
        }

        class BaseInvokableCall
        {
            static void ThrowOnInvalidArg<T>(object arg);
            static /*0x28e6350*/ bool AllowInvoke(System.Delegate delegate);
            /*0x28e6260*/ BaseInvokableCall();
            /*0x28e6268*/ BaseInvokableCall(object target, System.Reflection.MethodInfo function);
            void Invoke(object[] args);
            bool Find(object targetObj, System.Reflection.MethodInfo method);
        }

        class InvokableCall : UnityEngine.Events.BaseInvokableCall
        {
            /*0x10*/ UnityEngine.Events.UnityAction Delegate;

            /*0x28e6530*/ InvokableCall(object target, System.Reflection.MethodInfo theFunction);
            /*0x28e6618*/ InvokableCall(UnityEngine.Events.UnityAction action);
            /*0x28e63f8*/ void add_Delegate(UnityEngine.Events.UnityAction value);
            /*0x28e6494*/ void remove_Delegate(UnityEngine.Events.UnityAction value);
            /*0x28e6644*/ void Invoke(object[] args);
            /*0x28e6680*/ void Invoke();
            /*0x28e66bc*/ bool Find(object targetObj, System.Reflection.MethodInfo method);
        }

        class InvokableCall<T1> : UnityEngine.Events.BaseInvokableCall
        {
            /*0x0*/ UnityEngine.Events.UnityAction<T1> Delegate;

            InvokableCall(object target, System.Reflection.MethodInfo theFunction);
            InvokableCall(UnityEngine.Events.UnityAction<T1> action);
            void add_Delegate(UnityEngine.Events.UnityAction<T1> value);
            void remove_Delegate(UnityEngine.Events.UnityAction<T1> value);
            void Invoke(object[] args);
            void Invoke(T1 args0);
            bool Find(object targetObj, System.Reflection.MethodInfo method);
        }

        class InvokableCall<T1, T2> : UnityEngine.Events.BaseInvokableCall
        {
            /*0x0*/ UnityEngine.Events.UnityAction<T1, T2> Delegate;

            InvokableCall(object target, System.Reflection.MethodInfo theFunction);
            InvokableCall(UnityEngine.Events.UnityAction<T1, T2> action);
            void add_Delegate(UnityEngine.Events.UnityAction<T1, T2> value);
            void remove_Delegate(UnityEngine.Events.UnityAction<T1, T2> value);
            void Invoke(object[] args);
            void Invoke(T1 args0, T2 args1);
            bool Find(object targetObj, System.Reflection.MethodInfo method);
        }

        class InvokableCall<T1, T2, T3> : UnityEngine.Events.BaseInvokableCall
        {
            /*0x0*/ UnityEngine.Events.UnityAction<T1, T2, T3> Delegate;

            InvokableCall(object target, System.Reflection.MethodInfo theFunction);
            InvokableCall(UnityEngine.Events.UnityAction<T1, T2, T3> action);
            void add_Delegate(UnityEngine.Events.UnityAction<T1, T2, T3> value);
            void remove_Delegate(UnityEngine.Events.UnityAction<T1, T2, T3> value);
            void Invoke(object[] args);
            void Invoke(T1 args0, T2 args1, T3 args2);
            bool Find(object targetObj, System.Reflection.MethodInfo method);
        }

        class InvokableCall<T1, T2, T3, T4> : UnityEngine.Events.BaseInvokableCall
        {
            /*0x0*/ UnityEngine.Events.UnityAction<T1, T2, T3, T4> Delegate;

            InvokableCall(object target, System.Reflection.MethodInfo theFunction);
            InvokableCall(UnityEngine.Events.UnityAction<T1, T2, T3, T4> action);
            void add_Delegate(UnityEngine.Events.UnityAction<T1, T2, T3, T4> value);
            void remove_Delegate(UnityEngine.Events.UnityAction<T1, T2, T3, T4> value);
            void Invoke(object[] args);
            void Invoke(T1 args0, T2 args1, T3 args2, T4 args3);
            bool Find(object targetObj, System.Reflection.MethodInfo method);
        }

        class CachedInvokableCall<T> : UnityEngine.Events.InvokableCall<T>
        {
            /*0x0*/ T m_Arg1;

            CachedInvokableCall(UnityEngine.Object target, System.Reflection.MethodInfo theFunction, T argument);
            void Invoke(object[] args);
            void Invoke(T arg0);
        }

        enum UnityEventCallState
        {
            Off = 0,
            EditorAndRuntime = 1,
            RuntimeOnly = 2,
        }

        class PersistentCall : UnityEngine.ISerializationCallbackReceiver
        {
            /*0x10*/ UnityEngine.Object m_Target;
            /*0x18*/ string m_TargetAssemblyTypeName;
            /*0x20*/ string m_MethodName;
            /*0x28*/ UnityEngine.Events.PersistentListenerMode m_Mode;
            /*0x30*/ UnityEngine.Events.ArgumentCache m_Arguments;
            /*0x38*/ UnityEngine.Events.UnityEventCallState m_CallState;

            static /*0x28e6cd8*/ UnityEngine.Events.BaseInvokableCall GetObjectCall(UnityEngine.Object target, System.Reflection.MethodInfo method, UnityEngine.Events.ArgumentCache arguments);
            /*0x28e71d8*/ PersistentCall();
            /*0x28e6708*/ UnityEngine.Object get_target();
            /*0x28e6710*/ string get_targetAssemblyTypeName();
            /*0x28e67bc*/ string get_methodName();
            /*0x28e67c4*/ UnityEngine.Events.PersistentListenerMode get_mode();
            /*0x28e67cc*/ void set_mode(UnityEngine.Events.PersistentListenerMode value);
            /*0x28e67d4*/ UnityEngine.Events.ArgumentCache get_arguments();
            /*0x28e67dc*/ UnityEngine.Events.UnityEventCallState get_callState();
            /*0x28e67e4*/ void set_callState(UnityEngine.Events.UnityEventCallState value);
            /*0x28e67ec*/ bool IsValid();
            /*0x28e6828*/ UnityEngine.Events.BaseInvokableCall GetRuntimeCall(UnityEngine.Events.UnityEventBase theEvent);
            /*0x28e7108*/ void RegisterPersistentListener(UnityEngine.Object ttarget, System.Type targetType, string mmethodName);
            /*0x28e714c*/ void UnregisterPersistentListener();
            /*0x28e71a0*/ void OnBeforeSerialize();
            /*0x28e71bc*/ void OnAfterDeserialize();
        }

        class PersistentCallGroup
        {
            /*0x10*/ System.Collections.Generic.List<UnityEngine.Events.PersistentCall> m_Calls;

            /*0x28e724c*/ PersistentCallGroup();
            /*0x28e72cc*/ int get_Count();
            /*0x28e7314*/ UnityEngine.Events.PersistentCall GetListener(int index);
            /*0x28e736c*/ System.Collections.Generic.IEnumerable<UnityEngine.Events.PersistentCall> GetListeners();
            /*0x28e7374*/ void AddListener();
            /*0x28e7444*/ void AddListener(UnityEngine.Events.PersistentCall call);
            /*0x28e74ec*/ void RemoveListener(int index);
            /*0x28e7544*/ void Clear();
            /*0x28e75b4*/ void RegisterEventPersistentListener(int index, UnityEngine.Object targetObj, System.Type targetObjType, string methodName);
            /*0x28e7600*/ void RegisterVoidPersistentListener(int index, UnityEngine.Object targetObj, System.Type targetObjType, string methodName);
            /*0x28e7650*/ void RegisterObjectPersistentListener(int index, UnityEngine.Object targetObj, System.Type targetObjType, UnityEngine.Object argument, string methodName);
            /*0x28e76b0*/ void RegisterIntPersistentListener(int index, UnityEngine.Object targetObj, System.Type targetObjType, int argument, string methodName);
            /*0x28e7710*/ void RegisterFloatPersistentListener(int index, UnityEngine.Object targetObj, System.Type targetObjType, float argument, string methodName);
            /*0x28e7778*/ void RegisterStringPersistentListener(int index, UnityEngine.Object targetObj, System.Type targetObjType, string argument, string methodName);
            /*0x28e77d8*/ void RegisterBoolPersistentListener(int index, UnityEngine.Object targetObj, System.Type targetObjType, bool argument, string methodName);
            /*0x28e783c*/ void UnregisterPersistentListener(int index);
            /*0x28e789c*/ void RemoveListeners(UnityEngine.Object target, string methodName);
            /*0x28e7ad4*/ void Initialize(UnityEngine.Events.InvokableCallList invokableList, UnityEngine.Events.UnityEventBase unityEventBase);
        }

        class InvokableCallList
        {
            /*0x10*/ System.Collections.Generic.List<UnityEngine.Events.BaseInvokableCall> m_PersistentCalls;
            /*0x18*/ System.Collections.Generic.List<UnityEngine.Events.BaseInvokableCall> m_RuntimeCalls;
            /*0x20*/ System.Collections.Generic.List<UnityEngine.Events.BaseInvokableCall> m_ExecutingCalls;
            /*0x28*/ bool m_NeedsUpdate;

            /*0x28e82ac*/ InvokableCallList();
            /*0x28e7d10*/ int get_Count();
            /*0x28e7c64*/ void AddPersistentInvokableCall(UnityEngine.Events.BaseInvokableCall call);
            /*0x28e7d68*/ void AddListener(UnityEngine.Events.BaseInvokableCall call);
            /*0x28e7e14*/ void RemoveListener(object targetObj, System.Reflection.MethodInfo method);
            /*0x28e8088*/ void Clear();
            /*0x28e8140*/ void ClearPersistent();
            /*0x28e81f8*/ System.Collections.Generic.List<UnityEngine.Events.BaseInvokableCall> PrepareInvoke();
        }

        class UnityEventBase : UnityEngine.ISerializationCallbackReceiver
        {
            /*0x10*/ UnityEngine.Events.InvokableCallList m_Calls;
            /*0x18*/ UnityEngine.Events.PersistentCallGroup m_PersistentCalls;
            /*0x20*/ bool m_CallsDirty;

            static /*0x28e8c60*/ System.Reflection.MethodInfo GetValidMethodInfo(object obj, string functionName, System.Type[] argumentTypes);
            static /*0x28e86e0*/ System.Reflection.MethodInfo GetValidMethodInfo(System.Type objectType, string functionName, System.Type[] argumentTypes);
            /*0x28e8370*/ UnityEventBase();
            /*0x28e840c*/ void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize();
            /*0x28e8438*/ void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize();
            /*0x28e843c*/ System.Reflection.MethodInfo FindMethod_Impl(string name, object targetObj);
            System.Reflection.MethodInfo FindMethod_Impl(string name, System.Type targetObjType);
            UnityEngine.Events.BaseInvokableCall GetDelegate(object target, System.Reflection.MethodInfo theFunction);
            /*0x28e6b10*/ System.Reflection.MethodInfo FindMethod(UnityEngine.Events.PersistentCall call);
            /*0x28e8480*/ System.Reflection.MethodInfo FindMethod(string name, System.Type listenerType, UnityEngine.Events.PersistentListenerMode mode, System.Type argumentType);
            /*0x28e8888*/ int GetPersistentEventCount();
            /*0x28e88a0*/ UnityEngine.Object GetPersistentTarget(int index);
            /*0x28e88c4*/ string GetPersistentMethodName(int index);
            /*0x28e8410*/ void DirtyPersistentCalls();
            /*0x28e8934*/ void RebuildPersistentCallsIfNeeded();
            /*0x28e8968*/ void SetPersistentListenerState(int index, UnityEngine.Events.UnityEventCallState state);
            /*0x28e89a0*/ UnityEngine.Events.UnityEventCallState GetPersistentListenerState(int index);
            /*0x28e8a98*/ void AddListener(object targetObj, System.Reflection.MethodInfo method);
            /*0x28e8ac4*/ void AddCall(UnityEngine.Events.BaseInvokableCall call);
            /*0x28e8adc*/ void RemoveListener(object targetObj, System.Reflection.MethodInfo method);
            /*0x28e8af4*/ void RemoveAllListeners();
            /*0x28e8b0c*/ System.Collections.Generic.List<UnityEngine.Events.BaseInvokableCall> PrepareInvoke();
            /*0x28e8b2c*/ void Invoke(object[] parameters);
            /*0x28e8bdc*/ string ToString();
        }

        class UnityAction<T0, T1> : System.MulticastDelegate
        {
            UnityAction(object object, nint method);
            void Invoke(T0 arg0, T1 arg1);
            System.IAsyncResult BeginInvoke(T0 arg0, T1 arg1, System.AsyncCallback callback, object object);
            void EndInvoke(System.IAsyncResult result);
        }

        class UnityEvent<T0, T1> : UnityEngine.Events.UnityEventBase
        {
            /*0x0*/ object[] m_InvokeArray;

            static UnityEngine.Events.BaseInvokableCall GetDelegate(UnityEngine.Events.UnityAction<T0, T1> action);
            UnityEvent();
            void AddListener(UnityEngine.Events.UnityAction<T0, T1> call);
            void RemoveListener(UnityEngine.Events.UnityAction<T0, T1> call);
            System.Reflection.MethodInfo FindMethod_Impl(string name, System.Type targetObjType);
            UnityEngine.Events.BaseInvokableCall GetDelegate(object target, System.Reflection.MethodInfo theFunction);
            void Invoke(T0 arg0, T1 arg1);
        }

        class UnityAction<T0> : System.MulticastDelegate
        {
            UnityAction(object object, nint method);
            void Invoke(T0 arg0);
            System.IAsyncResult BeginInvoke(T0 arg0, System.AsyncCallback callback, object object);
            void EndInvoke(System.IAsyncResult result);
        }

        class UnityEvent<T0> : UnityEngine.Events.UnityEventBase
        {
            /*0x0*/ object[] m_InvokeArray;

            static UnityEngine.Events.BaseInvokableCall GetDelegate(UnityEngine.Events.UnityAction<T0> action);
            UnityEvent();
            void AddListener(UnityEngine.Events.UnityAction<T0> call);
            void RemoveListener(UnityEngine.Events.UnityAction<T0> call);
            System.Reflection.MethodInfo FindMethod_Impl(string name, System.Type targetObjType);
            UnityEngine.Events.BaseInvokableCall GetDelegate(object target, System.Reflection.MethodInfo theFunction);
            void Invoke(T0 arg0);
        }

        class UnityAction<T0, T1, T2> : System.MulticastDelegate
        {
            UnityAction(object object, nint method);
            void Invoke(T0 arg0, T1 arg1, T2 arg2);
            System.IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, System.AsyncCallback callback, object object);
            void EndInvoke(System.IAsyncResult result);
        }

        class UnityEvent<T0, T1, T2> : UnityEngine.Events.UnityEventBase
        {
            /*0x0*/ object[] m_InvokeArray;

            static UnityEngine.Events.BaseInvokableCall GetDelegate(UnityEngine.Events.UnityAction<T0, T1, T2> action);
            UnityEvent();
            void AddListener(UnityEngine.Events.UnityAction<T0, T1, T2> call);
            void RemoveListener(UnityEngine.Events.UnityAction<T0, T1, T2> call);
            System.Reflection.MethodInfo FindMethod_Impl(string name, System.Type targetObjType);
            UnityEngine.Events.BaseInvokableCall GetDelegate(object target, System.Reflection.MethodInfo theFunction);
            void Invoke(T0 arg0, T1 arg1, T2 arg2);
        }

        class UnityAction<T0, T1, T2, T3> : System.MulticastDelegate
        {
            UnityAction(object object, nint method);
            void Invoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3);
            System.IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3, System.AsyncCallback callback, object object);
            void EndInvoke(System.IAsyncResult result);
        }

        class UnityEvent<T0, T1, T2, T3> : UnityEngine.Events.UnityEventBase
        {
            /*0x0*/ object[] m_InvokeArray;

            static UnityEngine.Events.BaseInvokableCall GetDelegate(UnityEngine.Events.UnityAction<T0, T1, T2, T3> action);
            UnityEvent();
            void AddListener(UnityEngine.Events.UnityAction<T0, T1, T2, T3> call);
            void RemoveListener(UnityEngine.Events.UnityAction<T0, T1, T2, T3> call);
            System.Reflection.MethodInfo FindMethod_Impl(string name, System.Type targetObjType);
            UnityEngine.Events.BaseInvokableCall GetDelegate(object target, System.Reflection.MethodInfo theFunction);
            void Invoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3);
        }

        class UnityAction : System.MulticastDelegate
        {
            /*0x28e8c94*/ UnityAction(object object, nint method);
            /*0x28e8d50*/ void Invoke();
            /*0x28e8d64*/ System.IAsyncResult BeginInvoke(System.AsyncCallback callback, object object);
            /*0x28e8d84*/ void EndInvoke(System.IAsyncResult result);
        }

        class UnityEvent : UnityEngine.Events.UnityEventBase
        {
            /*0x28*/ object[] m_InvokeArray;

            static /*0x28e8dc4*/ UnityEngine.Events.BaseInvokableCall GetDelegate(UnityEngine.Events.UnityAction action);
            /*0x28e8d90*/ UnityEvent();
            /*0x28e8d98*/ void AddListener(UnityEngine.Events.UnityAction call);
            /*0x28e8e30*/ void RemoveListener(UnityEngine.Events.UnityAction call);
            /*0x28e8e74*/ System.Reflection.MethodInfo FindMethod_Impl(string name, System.Type targetObjType);
            /*0x28e8ed8*/ UnityEngine.Events.BaseInvokableCall GetDelegate(object target, System.Reflection.MethodInfo theFunction);
            /*0x28e8f48*/ void Invoke();
        }
    }

    namespace LowLevel
    {
        struct PlayerLoopSystemInternal
        {
            /*0x10*/ System.Type type;
            /*0x18*/ UnityEngine.LowLevel.PlayerLoopSystem.UpdateFunction updateDelegate;
            /*0x20*/ nint updateFunction;
            /*0x28*/ nint loopConditionFunction;
            /*0x30*/ int numSubSystems;
        }

        struct PlayerLoopSystem
        {
            /*0x10*/ System.Type type;
            /*0x18*/ UnityEngine.LowLevel.PlayerLoopSystem[] subSystemList;
            /*0x20*/ UnityEngine.LowLevel.PlayerLoopSystem.UpdateFunction updateDelegate;
            /*0x28*/ nint updateFunction;
            /*0x30*/ nint loopConditionFunction;

            /*0x28e90c8*/ string ToString();

            class UpdateFunction : System.MulticastDelegate
            {
                /*0x28e90ec*/ UpdateFunction(object object, nint method);
                /*0x28e91a8*/ void Invoke();
            }
        }

        class PlayerLoop
        {
            static /*0x28e91bc*/ UnityEngine.LowLevel.PlayerLoopSystem GetDefaultPlayerLoop();
            static /*0x28e9458*/ UnityEngine.LowLevel.PlayerLoopSystem GetCurrentPlayerLoop();
            static /*0x28e94f4*/ void SetPlayerLoop(UnityEngine.LowLevel.PlayerLoopSystem loop);
            static /*0x28e95d8*/ int PlayerLoopSystemToInternal(UnityEngine.LowLevel.PlayerLoopSystem sys, ref System.Collections.Generic.List<UnityEngine.LowLevel.PlayerLoopSystemInternal> internalSys);
            static /*0x28e9258*/ UnityEngine.LowLevel.PlayerLoopSystem InternalToPlayerLoopSystem(UnityEngine.LowLevel.PlayerLoopSystemInternal[] internalSys, ref int offset);
            static /*0x28e9230*/ UnityEngine.LowLevel.PlayerLoopSystemInternal[] GetDefaultPlayerLoopInternal();
            static /*0x28e94cc*/ UnityEngine.LowLevel.PlayerLoopSystemInternal[] GetCurrentPlayerLoopInternal();
            static /*0x28e977c*/ void SetPlayerLoopInternal(UnityEngine.LowLevel.PlayerLoopSystemInternal[] loop);
            /*0x28e97b8*/ PlayerLoop();
        }
    }

    namespace PlayerLoop
    {
        struct TimeUpdate
        {
            struct WaitForLastPresentationAndUpdateTime
            {
            }
        }

        struct Initialization
        {
            struct ProfilerStartFrame
            {
            }

            struct UpdateCameraMotionVectors
            {
            }

            struct DirectorSampleTime
            {
            }

            struct AsyncUploadTimeSlicedUpdate
            {
            }

            struct SynchronizeState
            {
            }

            struct SynchronizeInputs
            {
            }

            struct XREarlyUpdate
            {
            }
        }

        struct EarlyUpdate
        {
            struct PollPlayerConnection
            {
            }

            struct PollHtcsPlayerConnection
            {
            }

            struct GpuTimestamp
            {
            }

            struct AnalyticsCoreStatsUpdate
            {
            }

            struct UnityWebRequestUpdate
            {
            }

            struct UpdateStreamingManager
            {
            }

            struct ExecuteMainThreadJobs
            {
            }

            struct ProcessMouseInWindow
            {
            }

            struct ClearIntermediateRenderers
            {
            }

            struct ClearLines
            {
            }

            struct PresentBeforeUpdate
            {
            }

            struct ResetFrameStatsAfterPresent
            {
            }

            struct UpdateAsyncReadbackManager
            {
            }

            struct UpdateTextureStreamingManager
            {
            }

            struct UpdatePreloading
            {
            }

            struct RendererNotifyInvisible
            {
            }

            struct PlayerCleanupCachedData
            {
            }

            struct UpdateMainGameViewRect
            {
            }

            struct UpdateCanvasRectTransform
            {
            }

            struct UpdateInputManager
            {
            }

            struct ProcessRemoteInput
            {
            }

            struct XRUpdate
            {
            }

            struct ScriptRunDelayedStartupFrame
            {
            }

            struct UpdateKinect
            {
            }

            struct DeliverIosPlatformEvents
            {
            }

            struct DispatchEventQueueEvents
            {
            }

            struct PhysicsResetInterpolatedTransformPosition
            {
            }

            struct SpriteAtlasManagerUpdate
            {
            }

            struct TangoUpdate
            {
            }

            struct ARCoreUpdate
            {
            }

            struct PerformanceAnalyticsUpdate
            {
            }
        }

        struct FixedUpdate
        {
            struct ClearLines
            {
            }

            struct DirectorFixedSampleTime
            {
            }

            struct AudioFixedUpdate
            {
            }

            struct ScriptRunBehaviourFixedUpdate
            {
            }

            struct DirectorFixedUpdate
            {
            }

            struct LegacyFixedAnimationUpdate
            {
            }

            struct XRFixedUpdate
            {
            }

            struct PhysicsFixedUpdate
            {
            }

            struct Physics2DFixedUpdate
            {
            }

            struct PhysicsClothFixedUpdate
            {
            }

            struct DirectorFixedUpdatePostPhysics
            {
            }

            struct ScriptRunDelayedFixedFrameRate
            {
            }

            struct NewInputFixedUpdate
            {
            }
        }

        struct PreUpdate
        {
            struct PhysicsUpdate
            {
            }

            struct Physics2DUpdate
            {
            }

            struct CheckTexFieldInput
            {
            }

            struct IMGUISendQueuedEvents
            {
            }

            struct SendMouseEvents
            {
            }

            struct AIUpdate
            {
            }

            struct WindUpdate
            {
            }

            struct UpdateVideo
            {
            }

            struct NewInputUpdate
            {
            }
        }

        struct Update
        {
            struct ScriptRunBehaviourUpdate
            {
            }

            struct DirectorUpdate
            {
            }

            struct ScriptRunDelayedDynamicFrameRate
            {
            }

            struct ScriptRunDelayedTasks
            {
            }
        }

        struct PreLateUpdate
        {
            struct Physics2DLateUpdate
            {
            }

            struct AIUpdatePostScript
            {
            }

            struct DirectorUpdateAnimationBegin
            {
            }

            struct LegacyAnimationUpdate
            {
            }

            struct DirectorUpdateAnimationEnd
            {
            }

            struct DirectorDeferredEvaluate
            {
            }

            struct UIElementsUpdatePanels
            {
            }

            struct UpdateNetworkManager
            {
            }

            struct UpdateMasterServerInterface
            {
            }

            struct UNetUpdate
            {
            }

            struct EndGraphicsJobsAfterScriptUpdate
            {
            }

            struct ParticleSystemBeginUpdateAll
            {
            }

            struct ScriptRunBehaviourLateUpdate
            {
            }

            struct ConstraintManagerUpdate
            {
            }
        }

        struct PostLateUpdate
        {
            struct PlayerSendFrameStarted
            {
            }

            struct UpdateRectTransform
            {
            }

            struct UpdateCanvasRectTransform
            {
            }

            struct PlayerUpdateCanvases
            {
            }

            struct UpdateAudio
            {
            }

            struct UpdateVideo
            {
            }

            struct DirectorLateUpdate
            {
            }

            struct ScriptRunDelayedDynamicFrameRate
            {
            }

            struct VFXUpdate
            {
            }

            struct ParticleSystemEndUpdateAll
            {
            }

            struct EndGraphicsJobsAfterScriptLateUpdate
            {
            }

            struct UpdateSubstance
            {
            }

            struct UpdateCustomRenderTextures
            {
            }

            struct XRPostLateUpdate
            {
            }

            struct UpdateAllRenderers
            {
            }

            struct UpdateLightProbeProxyVolumes
            {
            }

            struct EnlightenRuntimeUpdate
            {
            }

            struct UpdateAllSkinnedMeshes
            {
            }

            struct ProcessWebSendMessages
            {
            }

            struct SortingGroupsUpdate
            {
            }

            struct UpdateVideoTextures
            {
            }

            struct DirectorRenderImage
            {
            }

            struct PlayerEmitCanvasGeometry
            {
            }

            struct FinishFrameRendering
            {
            }

            struct BatchModeUpdate
            {
            }

            struct PlayerSendFrameComplete
            {
            }

            struct UpdateCaptureScreenshot
            {
            }

            struct PresentAfterDraw
            {
            }

            struct ClearImmediateRenderers
            {
            }

            struct XRPostPresent
            {
            }

            struct UpdateResolution
            {
            }

            struct InputEndFrame
            {
            }

            struct GUIClearEvents
            {
            }

            struct ShaderHandleErrors
            {
            }

            struct ResetInputAxis
            {
            }

            struct ThreadedLoadingDebug
            {
            }

            struct ProfilerSynchronizeStats
            {
            }

            struct MemoryFrameMaintenance
            {
            }

            struct ExecuteGameCenterCallbacks
            {
            }

            struct XRPreEndFrame
            {
            }

            struct ProfilerEndFrame
            {
            }

            struct GraphicsWarmupPreloadedShaders
            {
            }

            struct PlayerSendFramePostPresent
            {
            }

            struct PhysicsSkinnedClothBeginUpdate
            {
            }

            struct PhysicsSkinnedClothFinishUpdate
            {
            }

            struct TriggerEndOfFrameCallbacks
            {
            }
        }
    }

    namespace Apple
    {
        enum FrameCaptureDestination
        {
            DevTools = 1,
            GPUTraceDocument = 2,
        }

        class FrameCapture
        {
            static /*0x28e97c8*/ bool IsDestinationSupportedImpl(UnityEngine.Apple.FrameCaptureDestination dest);
            static /*0x28e9804*/ void BeginCaptureImpl(UnityEngine.Apple.FrameCaptureDestination dest, string path);
            static /*0x28e9848*/ void EndCaptureImpl();
            static /*0x28e9870*/ void CaptureNextFrameImpl(UnityEngine.Apple.FrameCaptureDestination dest, string path);
            static /*0x28e98b4*/ bool IsDestinationSupported(UnityEngine.Apple.FrameCaptureDestination dest);
            static /*0x28e995c*/ void BeginCaptureToXcode();
            static /*0x28e9a08*/ void BeginCaptureToFile(string path);
            static /*0x28e9bfc*/ void EndCapture();
            static /*0x28e9c24*/ void CaptureNextFrameToXcode();
            static /*0x28e9cd0*/ void CaptureNextFrameToFile(string path);
            /*0x28e97c0*/ FrameCapture();
        }
    }

    namespace Lumin
    {
        class UsesLuminPrivilegeAttribute : System.Attribute
        {
            /*0x10*/ string m_Privilege;

            /*0x28e9ec4*/ UsesLuminPrivilegeAttribute(string privilege);
            /*0x28e9eec*/ string get_privilege();
        }

        class UsesLuminPlatformLevelAttribute : System.Attribute
        {
            /*0x10*/ uint m_PlatformLevel;

            /*0x28e9ef4*/ UsesLuminPlatformLevelAttribute(uint platformLevel);
            /*0x28e9f1c*/ uint get_platformLevel();
        }
    }

    namespace TestTools
    {
        class ExcludeFromCoverageAttribute : System.Attribute
        {
            /*0x28e9f24*/ ExcludeFromCoverageAttribute();
        }

        struct CoveredSequencePoint
        {
            /*0x10*/ System.Reflection.MethodBase method;
            /*0x18*/ uint ilOffset;
            /*0x1c*/ uint hitCount;
            /*0x20*/ string filename;
            /*0x28*/ uint line;
            /*0x2c*/ uint column;
        }

        struct CoveredMethodStats
        {
            /*0x10*/ System.Reflection.MethodBase method;
            /*0x18*/ int totalSequencePoints;
            /*0x1c*/ int uncoveredSequencePoints;

            /*0x28e9f2c*/ string GetTypeDisplayName(System.Type t);
            /*0x28ea2fc*/ string ToString();
        }

        class Coverage
        {
            static /*0x28ea570*/ bool get_enabled();
            static /*0x28ea598*/ void set_enabled(bool value);
            static /*0x28ea5d4*/ UnityEngine.TestTools.CoveredSequencePoint[] GetSequencePointsFor_Internal(System.Reflection.MethodBase method);
            static /*0x28ea610*/ void ResetFor_Internal(System.Reflection.MethodBase method);
            static /*0x28ea64c*/ UnityEngine.TestTools.CoveredMethodStats GetStatsFor_Internal(System.Reflection.MethodBase method);
            static /*0x28ea6e4*/ UnityEngine.TestTools.CoveredSequencePoint[] GetSequencePointsFor(System.Reflection.MethodBase method);
            static /*0x28ea770*/ UnityEngine.TestTools.CoveredMethodStats GetStatsFor(System.Reflection.MethodBase method);
            static /*0x28ea7c8*/ UnityEngine.TestTools.CoveredMethodStats[] GetStatsFor(System.Reflection.MethodBase[] methods);
            static /*0x28ea8d0*/ UnityEngine.TestTools.CoveredMethodStats[] GetStatsFor(System.Type type);
            static /*0x28ea99c*/ UnityEngine.TestTools.CoveredMethodStats[] GetStatsForAllCoveredMethods();
            static /*0x28ea9c4*/ void ResetFor(System.Reflection.MethodBase method);
            static /*0x28eaa50*/ void ResetAll();
            static /*0x28ea6a0*/ void GetStatsFor_Internal_Injected(System.Reflection.MethodBase method, ref UnityEngine.TestTools.CoveredMethodStats ret);
        }
    }
}
